name: Store Sync

on:
  issues:
    types: [reopened]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  SNAPSHOT_PATH: data/papers/gh-store-snapshot.json

concurrency:
  group: store-sync-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'stored-object')
    permissions:
      issues: write
      contents: write
    outputs:
      sync_id: ${{ steps.set-id.outputs.sync_id }}
    steps:
      - id: set-id
        run: echo "sync_id=${{ github.run_id }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install dependencies
        run: pip install gh-store
          
      - name: Sync Store
        run: |
          python -m gh_store process-updates \
            --issue ${{ github.event.issue.number }} \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --repo ${{ github.repository }}
            
          mkdir -p $(dirname ${{ env.SNAPSHOT_PATH }})
          python -m gh_store update-snapshot \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --repo ${{ github.repository }} \
            --snapshot-path ${{ env.SNAPSHOT_PATH }}
            
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update store snapshot [${{ github.run_id }}]"
          file_pattern: "${{ env.SNAPSHOT_PATH }}"

  notify-deploy:
    needs: sync
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deploy
        uses: actions/github-script@v7
        with:
          retries: 3
          script: |
            try {
            const syncId = '${{ needs.sync.outputs.sync_id }}';
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.name,
              workflow_id: '2_deploy-frontend.yml',
              ref: '${{ github.ref_name }}',
              inputs: { sync_id: syncId }
            });
            } catch (error) {
              core.setFailed(`Failed to trigger deploy: ${error.message}`);
            }
