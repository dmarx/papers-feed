{"version":3,"file":"content-script.js","sources":["../../utils/logger.ts","../../source-integration/link-processor.ts","../../utils/metadata-extractor.ts","../../source-integration/base-source.ts","../../source-integration/arxiv/xml-parser.ts","../../source-integration/arxiv/index.ts","../../content.ts"],"sourcesContent":["// utils/logger.ts\n// Logging utility wrapping loguru\n\n/**\n * Logger class for consistent logging throughout the extension\n */\nexport class Logger {\n  constructor(private module: string) {}\n  \n  /**\n   * Log debug message\n   */\n  debug(message: string, data?: any): void {\n    console.debug(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log info message\n   */\n  info(message: string, data?: any): void {\n    console.info(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log warning message\n   */\n  warning(message: string, data?: any): void {\n    console.warn(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log error message\n   */\n  error(message: string, data?: any): void {\n    console.error(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\n/**\n * Loguru mock for browser extension use\n */\nclass LoguruMock {\n  /**\n   * Get logger for a module\n   */\n  getLogger(module: string): Logger {\n    return new Logger(module);\n  }\n}\n\n// Export singleton instance\nexport const loguru = new LoguruMock();\n","// extension/source-integration/link-processor.ts\n// Generic link detection and processing module\n\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('link-processor');\n\ninterface LinkPattern {\n  // Source integration ID\n  sourceId: string;\n  \n  // Regular expression to match URLs\n  pattern: RegExp;\n  \n  // Function to extract paper ID from URL\n  extractPaperId: (url: string) => string | null;\n}\n\nexport class LinkProcessor {\n  private patterns: LinkPattern[] = [];\n  private observer: MutationObserver | null = null;\n  private processedLinks = new Set<string>();\n  private onLinkFound: (sourceId: string, paperId: string, link: HTMLAnchorElement) => void;\n  \n  constructor(onLinkFound: (sourceId: string, paperId: string, link: HTMLAnchorElement) => void) {\n    this.onLinkFound = onLinkFound;\n    logger.debug('Link processor initialized');\n  }\n  \n  /**\n   * Register a new link pattern\n   */\n  registerPattern(pattern: LinkPattern): void {\n    this.patterns.push(pattern);\n    logger.debug(`Registered pattern for ${pattern.sourceId}`);\n  }\n  \n  /**\n   * Process all links in the document\n   */\n  processLinks(document: Document): void {\n    // Process all links in the document\n    const links = document.querySelectorAll<HTMLAnchorElement>('a[href]');\n    \n    links.forEach(link => {\n      // Use a unique identifier for this link\n      const linkId = this.getLinkId(link);\n      \n      // Skip if already processed\n      if (this.processedLinks.has(linkId)) {\n        return;\n      }\n      \n      this.processedLinks.add(linkId);\n      \n      // Check each pattern\n      for (const pattern of this.patterns) {\n        if (pattern.pattern.test(link.href)) {\n          const paperId = pattern.extractPaperId(link.href);\n          \n          if (paperId) {\n            // Call the callback\n            this.onLinkFound(pattern.sourceId, paperId, link);\n            break; // Stop after first match\n          }\n        }\n      }\n    });\n  }\n  \n  /**\n   * Start observing for DOM changes\n   */\n  startObserving(document: Document): void {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n    \n    this.observer = new MutationObserver((mutations) => {\n      let newLinks = false;\n      \n      mutations.forEach(mutation => {\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            // If this is an anchor tag, check it\n            if ((node as Element).tagName === 'A') {\n              newLinks = true;\n            }\n            \n            // Check for any anchor tags within this element\n            const links = (node as Element).querySelectorAll('a[href]');\n            if (links.length > 0) {\n              newLinks = true;\n            }\n          }\n        });\n      });\n      \n      if (newLinks) {\n        this.processLinks(document);\n      }\n    });\n    \n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n    \n    logger.debug('Started observing for DOM changes');\n  }\n  \n  /**\n   * Create a unique ID for a link\n   */\n  private getLinkId(link: HTMLAnchorElement): string {\n    // Use href and position in document to create a unique ID\n    const path = this.getElementPath(link);\n    return `${link.href}|${path}`;\n  }\n  \n  /**\n   * Get element path in DOM for identification\n   */\n  private getElementPath(element: Element): string {\n    const path: string[] = [];\n    let current: Element | null = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.id) {\n        selector += `#${current.id}`;\n      } else {\n        const siblings = Array.from(current.parentElement?.children || []);\n        const index = siblings.indexOf(current) + 1;\n        if (siblings.length > 1) {\n          selector += `:nth-child(${index})`;\n        }\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n  \n  /**\n   * Stop observing DOM changes\n   */\n  stopObserving(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n      logger.debug('Stopped observing DOM changes');\n    }\n  }\n}\n","// extension/utils/metadata-extractor.ts\n// Object-oriented metadata extraction system with customizable extraction methods\n\nimport { loguru } from './logger';\n\nconst logger = loguru.getLogger('metadata-extractor');\n\nexport interface ExtractedMetadata {\n  title: string;\n  authors: string;\n  description: string;\n  publishedDate: string;\n  doi?: string;\n  journalName?: string;\n  tags?: string[];\n  url?: string;\n}\n\n// Constants for standard source types\nexport const SOURCE_TYPES = {\n  PDF: 'pdf',\n  URL: 'url',\n} as const;\n\nexport type SourceType = typeof SOURCE_TYPES[keyof typeof SOURCE_TYPES];\n\n/**\n * Base class for metadata extraction with customizable extraction methods\n * Each method can be overridden to provide source-specific extraction\n */\nexport class MetadataExtractor {\n  protected document: Document;\n  protected url: string;\n  \n  /**\n   * Create a new metadata extractor for a document\n   */\n  constructor(document: Document) {\n    this.document = document;\n    this.url = document.location.href;\n    logger.debug('Initialized metadata extractor for:', this.url);\n  }\n  \n  /**\n   * Helper method to get content from meta tags\n   */\n  protected getMetaContent(selector: string): string {\n    const element = this.document.querySelector(selector);\n    return element ? element.getAttribute('content') || '' : '';\n  }\n  \n  /**\n   * Extract and return all metadata fields\n   */\n  public extract(): ExtractedMetadata {\n    logger.debug('Extracting metadata from page:', this.url);\n    \n    const metadata: ExtractedMetadata = {\n      title: this.extractTitle(),\n      authors: this.extractAuthors(),\n      description: this.extractDescription(),\n      publishedDate: this.extractPublishedDate(),\n      doi: this.extractDoi(),\n      journalName: this.extractJournalName(),\n      tags: this.extractTags(),\n      url: this.url\n    };\n    \n    logger.debug('Metadata extraction complete:', metadata);\n    return metadata;\n  }\n  \n  /**\n   * Extract title from document\n   * Considers multiple metadata standards with priority order\n   */\n  protected extractTitle(): string {\n    // Title extraction - priority order\n    return (\n      // Dublin Core\n      this.getMetaContent('meta[name=\"DC.Title\"]') ||\n      // Citation\n      this.getMetaContent('meta[name=\"citation_title\"]') ||\n      // Open Graph\n      this.getMetaContent('meta[property=\"og:title\"]') ||\n      // Standard meta\n      this.getMetaContent('meta[name=\"title\"]') ||\n      // Fallback to document title\n      this.document.title\n    );\n  }\n  \n  /**\n   * Extract authors from document\n   * Handles multiple author formats and sources\n   */\n  protected extractAuthors(): string {\n    // Get all citation authors (some pages have multiple citation_author tags)\n    const citationAuthors: string[] = [];\n    this.document.querySelectorAll('meta[name=\"citation_author\"]').forEach(el => {\n      const content = el.getAttribute('content');\n      if (content) citationAuthors.push(content);\n    });\n    \n    // Get all DC creators\n    const dcCreators: string[] = [];\n    this.document.querySelectorAll('meta[name=\"DC.Creator.PersonalName\"]').forEach(el => {\n      const content = el.getAttribute('content');\n      if (content) dcCreators.push(content);\n    });\n    \n    // Individual author elements\n    const dcCreator = this.getMetaContent('meta[name=\"DC.Creator.PersonalName\"]');\n    const citationAuthor = this.getMetaContent('meta[name=\"citation_author\"]');\n    const ogAuthor = this.getMetaContent('meta[property=\"og:article:author\"]') ||\n                    this.getMetaContent('meta[name=\"author\"]');\n    \n    // Set authors with priority\n    if (dcCreators.length > 0) {\n      return dcCreators.join(', ');\n    } else if (citationAuthors.length > 0) {\n      return citationAuthors.join(', ');\n    } else if (dcCreator) {\n      return dcCreator;\n    } else if (citationAuthor) {\n      return citationAuthor;\n    } else if (ogAuthor) {\n      return ogAuthor;\n    }\n    \n    return '';\n  }\n  \n  /**\n   * Extract description/abstract from document\n   */\n  protected extractDescription(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Description\"]') ||\n      this.getMetaContent('meta[name=\"citation_abstract\"]') ||\n      this.getMetaContent('meta[property=\"og:description\"]') ||\n      this.getMetaContent('meta[name=\"description\"]')\n    );\n  }\n  \n  /**\n   * Extract publication date from document\n   */\n  protected extractPublishedDate(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Date.issued\"]') ||\n      this.getMetaContent('meta[name=\"citation_date\"]') ||\n      this.getMetaContent('meta[property=\"article:published_time\"]')\n    );\n  }\n  \n  /**\n   * Extract DOI (Digital Object Identifier) from document\n   */\n  protected extractDoi(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Identifier.DOI\"]') ||\n      this.getMetaContent('meta[name=\"citation_doi\"]')\n    );\n  }\n  \n  /**\n   * Extract journal name from document\n   */\n  protected extractJournalName(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Source\"]') ||\n      this.getMetaContent('meta[name=\"citation_journal_title\"]')\n    );\n  }\n  \n  /**\n   * Extract keywords/tags from document\n   */\n  protected extractTags(): string[] {\n    const keywords = this.getMetaContent('meta[name=\"keywords\"]') ||\n                    this.getMetaContent('meta[name=\"DC.Subject\"]');\n    \n    if (keywords) {\n      return keywords.split(',').map(tag => tag.trim());\n    }\n    \n    return [];\n  }\n  \n  /**\n   * Determine if the current URL is a PDF\n   */\n  public isPdf(): boolean {\n    return isPdfUrl(this.url);\n  }\n  \n  /**\n   * Get the source type (PDF or URL)\n   */\n  public getSourceType(): SourceType {\n    return this.isPdf() ? SOURCE_TYPES.PDF : SOURCE_TYPES.URL;\n  }\n  \n  /**\n   * Generate a paper ID for the current URL\n   */\n  public generatePaperId(): string {\n    return generatePaperIdFromUrl(this.url);\n  }\n}\n\n/**\n * Create a common metadata extractor for a document\n * Factory function for creating the default extractor\n */\nexport function createMetadataExtractor(document: Document): MetadataExtractor {\n  return new MetadataExtractor(document);\n}\n\n/**\n * Extract common metadata from a document\n * Convenience function for quick extraction\n */\nexport function extractCommonMetadata(document: Document): ExtractedMetadata {\n  return createMetadataExtractor(document).extract();\n}\n\n/**\n * Generate a paper ID from a URL\n * Creates a consistent hash-based identifier\n */\nexport function generatePaperIdFromUrl(url: string): string {\n  // Use a basic hash function to create an ID from the URL\n  let hash = 0;\n  for (let i = 0; i < url.length; i++) {\n    const char = url.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  \n  // Create a positive hexadecimal string\n  const positiveHash = Math.abs(hash).toString(16).toUpperCase();\n  \n  // Use the first 8 characters as the ID\n  return positiveHash.substring(0, 8);\n}\n\n/**\n * Determine if a URL is a PDF\n */\nexport function isPdfUrl(url: string): boolean {\n  return url.toLowerCase().endsWith('.pdf');\n}\n","// extension/source-integration/base-source.ts\n// Base class for source integrations with default identifier formatting\n// and metadata extraction capability\n\nimport { SourceIntegration } from './types';\nimport { PaperMetadata } from '../papers/types';\nimport { loguru } from '../utils/logger';\nimport { \n  MetadataExtractor, \n  createMetadataExtractor,\n  generatePaperIdFromUrl\n} from '../utils/metadata-extractor';\n\nconst logger = loguru.getLogger('base-source');\n\n/**\n * Base class for source integrations\n * Provides default implementations for all methods\n * Specific sources can override as needed\n */\nexport class BaseSourceIntegration implements SourceIntegration {\n  // Default properties - set for generic web pages\n  readonly id: string = 'url';\n  readonly name: string = 'Web Page';\n  readonly urlPatterns: RegExp[] = [\n    /^https?:\\/\\/(?!.*\\.pdf($|\\?|#)).*$/i  // Match HTTP/HTTPS URLs that aren't PDFs\n  ];\n  readonly contentScriptMatches: string[] = [];\n\n  /**\n   * Check if this integration can handle the given URL\n   * Default implementation checks against urlPatterns\n   */\n  canHandleUrl(url: string): boolean {\n    return this.urlPatterns.some(pattern => pattern.test(url));\n  }\n\n  /**\n   * Extract paper ID from URL\n   * Default implementation creates a hash from the URL\n   */\n  extractPaperId(url: string): string | null {\n    return generatePaperIdFromUrl(url);\n  }\n  \n  /**\n   * Create a metadata extractor for the given document\n   * Override this method to provide a custom extractor for your source\n   */\n  protected createMetadataExtractor(document: Document): MetadataExtractor {\n    return createMetadataExtractor(document);\n  }\n  \n  /**\n   * Extract metadata from a page\n   * Default implementation uses common metadata extraction\n   */\n  async extractMetadata(document: Document, paperId: string): Promise<PaperMetadata | null> {\n    try {\n      logger.debug(`Extracting metadata using base extractor for ID: ${paperId}`);\n      \n      // Create a metadata extractor for this document\n      const extractor = this.createMetadataExtractor(document);\n      \n      // Extract metadata\n      const extracted = extractor.extract();\n      const url = document.location.href;\n      \n      // Determine source type (PDF or URL)\n      const sourceType = extractor.getSourceType();\n      \n      // Create PaperMetadata object\n      return {\n        sourceId: this.id,\n        paperId,\n        url: url,\n        title: extracted.title || document.title || paperId,\n        authors: extracted.authors || '',\n        abstract: extracted.description || '',\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate: extracted.publishedDate || '',\n        tags: extracted.tags || [],\n        doi: extracted.doi,\n        journalName: extracted.journalName,\n        sourceType: sourceType // Store the source type for reference\n      };\n    } catch (error) {\n      logger.error('Error extracting metadata with base extractor', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Format a paper identifier for this source\n   * Default implementation uses the format: sourceId.paperId\n   */\n  formatPaperId(paperId: string): string {\n    return `${this.id}.${paperId}`;\n  }\n  \n  /**\n   * Parse a paper identifier specific to this source\n   * Default implementation handles source.paperId format and extracts paperId\n   */\n  parsePaperId(identifier: string): string | null {\n    const prefix = `${this.id}.`;\n    \n    if (identifier.startsWith(prefix)) {\n      return identifier.substring(prefix.length);\n    }\n    \n    // Try legacy format (sourceId:paperId)\n    const legacyPrefix = `${this.id}:`;\n    if (identifier.startsWith(legacyPrefix)) {\n      logger.debug(`Parsed legacy format identifier: ${identifier}`);\n      return identifier.substring(legacyPrefix.length);\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Format a storage object ID for this source\n   * Default implementation uses the format: type:sourceId.paperId\n   */\n  formatObjectId(type: string, paperId: string): string {\n    return `${type}:${this.formatPaperId(paperId)}`;\n  }\n}\n","// source-integration/arxiv/xml-parser.ts\n// ArXiv API XML response parser - simplified for use with metadata transformer\n\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('arxiv-xml-parser');\n\nexport interface ArXivParsedData {\n  title: string;\n  summary: string;\n  authors: string[];\n  published_date: string;\n  arxiv_tags: string[];\n  [key: string]: any; // Add index signature to satisfy Json type requirements\n}\n\n/**\n * Parse ArXiv API XML response into a structured object\n */\nexport async function parseXMLText(xmlText: string): Promise<ArXivParsedData | null> {\n  logger.debug('Parsing ArXiv XML response');\n  \n  try {\n    // Parse XML to DOM\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\n    \n    // Check for parse errors\n    const parseError = xmlDoc.querySelector('parsererror');\n    if (parseError) {\n      throw new Error('XML parsing error: ' + parseError.textContent);\n    }\n    \n    // Get entry element\n    const entry = xmlDoc.querySelector('entry');\n    if (!entry) {\n      throw new Error('No entry element found in XML');\n    }\n    \n    // Extract basic fields\n    const title = entry.querySelector('title')?.textContent?.trim() || '';\n    const summary = entry.querySelector('summary')?.textContent?.trim() || '';\n    const published = entry.querySelector('published')?.textContent?.trim() || '';\n    \n    // Extract authors\n    const authors = Array.from(entry.querySelectorAll('author name'))\n      .map(name => name.textContent?.trim() || '');\n    \n    // Extract categories/tags\n    const categories = new Set<string>();\n    \n    // Primary category\n    const primaryCategory = entry.querySelector('arxiv\\\\:primary_category, primary_category');\n    if (primaryCategory && primaryCategory.hasAttribute('term')) {\n      categories.add(primaryCategory.getAttribute('term') || '');\n    }\n    \n    // Other categories\n    const categoryElements = entry.querySelectorAll('category');\n    categoryElements.forEach(cat => {\n      if (cat.hasAttribute('term')) {\n        categories.add(cat.getAttribute('term') || '');\n      }\n    });\n    \n    const result: ArXivParsedData = {\n      title,\n      summary,\n      authors,\n      published_date: published,\n      arxiv_tags: Array.from(categories)\n    };\n    \n    logger.debug('XML parsing completed successfully');\n    return result;\n  } catch (error) {\n    logger.error('Error parsing ArXiv XML', error);\n    return null;\n  }\n}\n","// extension/source-integration/arxiv/index.ts\n// ArXiv integration with custom metadata extractor\n\nimport { BaseSourceIntegration } from '../base-source';\nimport { PaperMetadata } from '../../papers/types';\nimport { parseXMLText } from './xml-parser';\nimport { MetadataExtractor, createMetadataExtractor } from '../../utils/metadata-extractor';\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('arxiv-integration');\n\n/**\n * ArXiv-specific metadata extractor\n * Enhances the base extractor with arXiv-specific extraction\n */\nclass ArXivMetadataExtractor extends MetadataExtractor {\n  /**\n   * Extract authors with arXiv-specific handling\n   */\n  protected extractAuthors(): string {\n    // Try arXiv-specific author element first\n    const authorsElement = this.document.querySelector('.authors');\n    if (authorsElement) {\n      const authorsText = authorsElement.textContent?.replace('Authors:', '').trim();\n      if (authorsText) {\n        return authorsText;\n      }\n    }\n    \n    // Fall back to standard extraction\n    return super.extractAuthors();\n  }\n  \n  /**\n   * Extract abstract with arXiv-specific handling\n   */\n  protected extractDescription(): string {\n    // Try arXiv-specific abstract element first\n    const abstractElement = this.document.querySelector('.abstract');\n    if (abstractElement) {\n      const abstractText = abstractElement.textContent?.replace('Abstract:', '').trim();\n      if (abstractText) {\n        return abstractText;\n      }\n    }\n    \n    // Fall back to standard extraction\n    return super.extractDescription();\n  }\n  \n  /**\n   * Extract tags/categories with arXiv-specific handling\n   */\n  protected extractTags(): string[] {\n    // Try arXiv-specific categories element first\n    const categoriesElement = this.document.querySelector('.subjects');\n    if (categoriesElement) {\n      const categoriesText = categoriesElement.textContent?.replace('Subjects:', '').trim();\n      if (categoriesText) {\n        return categoriesText.split(';').map(tag => tag.trim());\n      }\n    }\n    \n    // Fall back to standard extraction\n    return super.extractTags();\n  }\n  \n  /**\n   * Extract publication date with arXiv-specific handling\n   */\n  protected extractPublishedDate(): string {\n    // Try arXiv-specific dateline element first\n    const dateElement = this.document.querySelector('.dateline');\n    if (dateElement) {\n      const dateText = dateElement.textContent?.trim();\n      if (dateText) {\n        return dateText;\n      }\n    }\n    \n    // Fall back to standard extraction\n    return super.extractPublishedDate();\n  }\n}\n\n/**\n * ArXiv integration with custom metadata extraction\n */\nexport class ArXivIntegration extends BaseSourceIntegration {\n  readonly id = 'arxiv';\n  readonly name = 'arXiv.org';\n  \n  // URL patterns for papers\n  readonly urlPatterns = [\n    /arxiv\\.org\\/(abs|pdf|html)\\/([0-9.]+)/,\n    /arxiv\\.org\\/\\w+\\/([0-9.]+)/\n  ];\n  \n  // Content script matches\n  readonly contentScriptMatches = [\n    \"*://*.arxiv.org/*\"\n  ];\n\n  /**\n   * Create a metadata extractor for arXiv pages\n   */\n  protected createMetadataExtractor(document: Document): MetadataExtractor {\n    return new ArXivMetadataExtractor(document);\n  }\n\n  /**\n   * Check if this integration can handle the given URL\n   */\n  canHandleUrl(url: string): boolean {\n    return this.urlPatterns.some(pattern => pattern.test(url));\n  }\n\n  /**\n   * Extract paper ID from URL\n   */\n  extractPaperId(url: string): string | null {\n    for (const pattern of this.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[2] || match[1]; // The capture group with the paper ID\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Extract metadata from page or fetch from API\n   * Override parent method to handle the API fallback\n   */\n  async extractMetadata(document: Document, paperId: string): Promise<PaperMetadata | null> {\n    logger.info(`Extracting metadata for arXiv ID: ${paperId}`);\n    \n    // Try to extract from page first using our custom extractor\n    const pageMetadata = await super.extractMetadata(document, paperId);\n    \n    if (pageMetadata && pageMetadata.title && pageMetadata.authors) {\n      logger.debug('Extracted metadata from page');\n      return pageMetadata;\n    }\n    \n    // If page extraction fails or is incomplete, fetch from API\n    logger.debug('Falling back to API for metadata');\n    return this.fetchFromApi(paperId);\n  }\n  \n  /**\n   * Fetch metadata from ArXiv API\n   */\n  private async fetchFromApi(arxivId: string): Promise<PaperMetadata | null> {\n    try {\n      const apiUrl = `https://export.arxiv.org/api/query?id_list=${arxivId}`;\n      logger.debug(`API URL: ${apiUrl}`);\n      \n      const response = await fetch(apiUrl);\n      \n      if (!response.ok) {\n        throw new Error(`ArXiv API error: ${response.status}`);\n      }\n      \n      const text = await response.text();\n      const parsedXml = await parseXMLText(text);\n      \n      if (!parsedXml) {\n        logger.error('Failed to parse API response');\n        return null;\n      }\n      \n      // Transform the parsed XML to standard metadata format\n      return {\n        sourceId: this.id,\n        paperId: arxivId,\n        url: `https://arxiv.org/abs/${arxivId}`,\n        title: parsedXml.title || arxivId,\n        authors: Array.isArray(parsedXml.authors) ? parsedXml.authors.join(', ') : parsedXml.authors || '',\n        abstract: parsedXml.summary || '',\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate: parsedXml.published_date || '',\n        tags: parsedXml.arxiv_tags || [],\n        sourceType: 'url'\n      };\n    } catch (error) {\n      logger.error('Error processing arXiv metadata', error);\n      return null;\n    }\n  }\n}\n\n// Export a singleton instance that can be used by both background and content scripts\nexport const arxivIntegration = new ArXivIntegration();\n","// extension/content.ts\n// Content script with heartbeat session tracking\n\nimport { LinkProcessor } from './source-integration/link-processor';\nimport { SourceIntegration, Message } from './source-integration/types';\nimport { PaperMetadata } from './papers/types';\nimport { loguru } from './utils/logger';\nimport { BaseSourceIntegration } from './source-integration/base-source';\nimport { generatePaperIdFromUrl } from './utils/metadata-extractor';\n\n// Import source plugins directly\nimport { arxivIntegration } from './source-integration/arxiv';\n//import { pdfIntegration } from './source-integration/pdf';\n\nconst logger = loguru.getLogger('content-script');\n\nlogger.info('Paper Tracker content script loaded');\n\n// Available source integrations\nconst sourceIntegrations: SourceIntegration[] = [\n  arxivIntegration,\n  //pdfIntegration,\n  // Add more sources as they become available\n];\n\n// Base source for fallback processing\nconst baseSource = new BaseSourceIntegration();\n\n// Track active popup\nlet activePopup: HTMLElement | null = null;\n\n// Heartbeat interval\nlet heartbeatInterval: number | null = null;\nconst HEARTBEAT_INTERVAL = 5000; // 5 seconds\n\n// Track tab visibility\nlet isTabVisible = true;\n\n// Create link processor\nconst linkProcessor = new LinkProcessor((sourceId, paperId, link) => {\n  // Callback when link is found\n  injectAnnotationButton(link, sourceId, paperId);\n});\n\n// Initialize sources\nfunction initializeSources() {\n  // Register each source with the link processor\n  for (const source of sourceIntegrations) {\n    logger.debug(`Initializing source: ${source.id}`);\n    \n    // Register patterns with link processor\n    source.urlPatterns.forEach(pattern => {\n      linkProcessor.registerPattern({\n        sourceId: source.id,\n        pattern,\n        extractPaperId: (url: string) => source.extractPaperId(url)\n      });\n    });\n  }\n}\n\n// Inject common styles\nfunction injectStyles() {\n  if (document.getElementById('paper-tracker-styles')) {\n    return; // Already injected\n  }\n  \n  const styles = `\n  .paper-annotator {\n    display: inline-block;\n    margin-left: 4px;\n    cursor: pointer;\n    font-size: 0.9em;\n    opacity: 0.7;\n    transition: opacity 0.2s;\n    vertical-align: baseline;\n  }\n\n  .paper-annotator:hover {\n    opacity: 1;\n  }\n\n  .paper-popup-wrapper {\n    position: fixed;\n    z-index: 10000;\n  }\n\n  .paper-popup {\n    position: relative;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    padding: 12px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    width: 300px;\n    box-sizing: border-box;\n  }\n\n  .paper-popup-header {\n    font-weight: bold;\n    margin-bottom: 8px;\n    line-height: 1.4;\n    font-size: 1em;\n  }\n\n  .paper-popup-meta {\n    color: #666;\n    font-size: 0.85em;\n    margin-bottom: 12px;\n    line-height: 1.4;\n  }\n\n  .paper-popup-buttons {\n    display: flex;\n    gap: 8px;\n    margin: 8px 0;\n  }\n\n  .paper-popup button {\n    padding: 6px 12px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background: #f5f5f5;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    font-size: 0.9em;\n  }\n\n  .paper-popup button:hover {\n    background: #e8e8e8;\n    border-color: #ccc;\n  }\n\n  .paper-popup button.active {\n    background: #e0e0e0;\n    border-color: #aaa;\n  }\n\n  .paper-popup textarea {\n    width: calc(100% - 16px);\n    min-height: 80px;\n    margin: 8px 0;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    resize: vertical;\n    font-family: inherit;\n    font-size: 0.9em;\n    line-height: 1.4;\n    box-sizing: border-box;\n  }\n\n  .paper-popup textarea:focus {\n    outline: none;\n    border-color: #aaa;\n  }\n\n  .paper-popup-actions {\n    display: flex;\n    justify-content: flex-end;\n    gap: 8px;\n    margin-top: 12px;\n  }\n\n  .paper-popup .save-button {\n    background: #2563eb;\n    color: white;\n    border-color: #2563eb;\n  }\n\n  .paper-popup .save-button:hover {\n    background: #1d4ed8;\n    border-color: #1d4ed8;\n  }\n  `;\n  \n  const styleSheet = document.createElement('style');\n  styleSheet.id = 'paper-tracker-styles';\n  styleSheet.textContent = styles;\n  document.head.appendChild(styleSheet);\n  \n  logger.debug('Injected styles');\n}\n\n// Add annotation button to link\nfunction injectAnnotationButton(link: HTMLAnchorElement, sourceId: string, paperId: string): void {\n  // Skip if already processed\n  if (link.nextSibling && \n      link.nextSibling.nodeType === Node.ELEMENT_NODE &&\n      (link.nextSibling as Element).classList.contains('paper-annotator')) {\n    return;\n  }\n  \n  // Create annotator button\n  const annotator = document.createElement('span');\n  annotator.className = 'paper-annotator';\n  annotator.textContent = '📝';\n  annotator.title = 'Add annotation';\n  \n  // Store data attributes\n  annotator.dataset.sourceId = sourceId;\n  annotator.dataset.paperId = paperId;\n  \n  // Add click handler\n  annotator.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Send message to background script to show popup\n    chrome.runtime.sendMessage({\n      type: 'showAnnotationPopup',\n      sourceId,\n      paperId,\n      position: {\n        x: e.clientX,\n        y: e.clientY\n      }\n    });\n  });\n  \n  // Add to page next to link\n  link.parentNode?.insertBefore(annotator, link.nextSibling);\n}\n\n// Get source that can handle a URL\nfunction getSourceForUrl(url: string): SourceIntegration | null {\n  for (const source of sourceIntegrations) {\n    if (source.canHandleUrl(url)) {\n      return source;\n    }\n  }\n  return null;\n}\n\n// Set up click-outside handler for popups\ndocument.addEventListener('click', (e) => {\n  if (activePopup && \n      !activePopup.contains(e.target as Node) && \n      !(e.target as Element).classList.contains('paper-annotator')) {\n    activePopup.parentElement?.remove();\n    activePopup = null;\n  }\n});\n\n// Start heartbeat for session tracking\nfunction startSessionTracking(sourceId: string, paperId: string) {\n  // Stop any existing heartbeat\n  stopHeartbeat();\n  \n  // Only start tracking if tab is visible\n  if (!isTabVisible) {\n    logger.debug(`Not starting session for ${sourceId}.${paperId} because tab is not visible`);\n    return;\n  }\n  \n  // Tell background script to start a new session\n  chrome.runtime.sendMessage({\n    type: 'startSession',\n    sourceId,\n    paperId\n  }, response => {\n    if (response?.success) {\n      logger.debug(`Started session for ${sourceId}.${paperId}`);\n    } else {\n      logger.error(`Failed to start session for ${sourceId}.${paperId}`, response?.error);\n    }\n  });\n  \n  // Start sending heartbeats\n  heartbeatInterval = window.setInterval(() => {\n    chrome.runtime.sendMessage({\n      type: 'sessionHeartbeat',\n      sourceId,\n      paperId,\n      timestamp: Date.now()\n    });\n  }, HEARTBEAT_INTERVAL);\n  \n  logger.info(`Started heartbeat for ${sourceId}:${paperId}`);\n}\n\n// Stop heartbeat\nfunction stopHeartbeat() {\n  if (heartbeatInterval !== null) {\n    clearInterval(heartbeatInterval);\n    heartbeatInterval = null;\n    logger.debug('Stopped heartbeat');\n  }\n}\n\n// Update the processCurrentPage function to handle the force parameter\nasync function processCurrentPage(force: boolean = false): Promise<PaperMetadata | null> {\n  const url = window.location.href;\n  \n  // Find a source that can handle this URL\n  let source = getSourceForUrl(url);\n  \n  // If no source was found and force parameter is set, use base source\n  if (!source && force) {\n    logger.info(`No matching source found, but force parameter set. Using base source for: ${url}`);\n    source = baseSource;\n  }\n\n  // If we still don't have a source, return null\n  if (!source) {\n    logger.debug(`No source found for URL: ${url}`);\n    return null;\n  }\n\n  // Now that we have a source, extract the paperId\n  const paperId = source.extractPaperId(url);\n  if (!paperId) {\n    logger.info(`Unable to determine a paperId for url: ${url}`);\n    return null;\n  }\n  \n  try {\n    // Use source-specific extraction\n    const metadata = await source.extractMetadata(document, paperId);\n    \n    if (metadata) {\n      // Send metadata to background script\n      chrome.runtime.sendMessage({\n        type: 'paperMetadata',\n        metadata\n      });\n      \n      logger.debug(`Sent extracted metadata to background script for ${metadata.sourceId}.${metadata.paperId}`);\n      \n      // Start session tracking if tab is visible\n      // ... could we even get here if the tab isn't already visible?\n      if (isTabVisible) {\n        startSessionTracking(metadata.sourceId, metadata.paperId);\n      }\n      \n      return metadata;\n    }\n  } catch (error) {\n    logger.error(`Error extracting metadata for ${source.id}.${paperId}`, error);\n  }\n  \n  return null;\n}\n\n// Visibility change listener\ndocument.addEventListener('visibilitychange', () => {\n  const wasVisible = isTabVisible;\n  isTabVisible = document.visibilityState === 'visible';\n  \n  const source = getSourceForUrl(window.location.href);\n  if (!source) return;\n  \n  const paperId = source.extractPaperId(window.location.href);\n  if (!paperId) return;\n  \n  if (isTabVisible && !wasVisible) {\n    // Tab has become visible again - restart session\n    logger.info(`Tab became visible again for ${source.id}:${paperId}`);\n    startSessionTracking(source.id, paperId);\n  } else if (!isTabVisible && wasVisible) {\n    // Tab has become hidden - end current session\n    logger.info(`Tab hidden for ${source.id}:${paperId}`);\n    \n    // Send end session message\n    chrome.runtime.sendMessage({\n      type: 'endSession',\n      sourceId: source.id,\n      paperId: paperId,\n      reason: 'tab_hidden'\n    });\n    \n    // Stop heartbeat\n    stopHeartbeat();\n  }\n});\n\n// Focus/blur listeners\nwindow.addEventListener('focus', () => {\n  const source = getSourceForUrl(window.location.href);\n  if (!source) return;\n  \n  const paperId = source.extractPaperId(window.location.href);\n  if (!paperId) return;\n  \n  // Tab gained focus - restart session if it wasn't already running\n  if (!heartbeatInterval) {\n    logger.info(`Tab gained focus for ${source.id}:${paperId}`);\n    startSessionTracking(source.id, paperId);\n  }\n});\n\nwindow.addEventListener('blur', () => {\n  const source = getSourceForUrl(window.location.href);\n  if (!source) return;\n  \n  const paperId = source.extractPaperId(window.location.href);\n  if (!paperId) return;\n  \n  // Tab lost focus - end current session\n  logger.info(`Tab lost focus for ${source.id}:${paperId}`);\n  \n  // Send end session message\n  chrome.runtime.sendMessage({\n    type: 'endSession',\n    sourceId: source.id,\n    paperId: paperId,\n    reason: 'tab_blur'\n  });\n  \n  // Stop heartbeat\n  stopHeartbeat();\n});\n\n// Inform background when page is unloaded\nwindow.addEventListener('beforeunload', () => {\n  const url = window.location.href;\n  const source = getSourceForUrl(url);\n  if (!source) return;\n  \n  const paperId = source.extractPaperId(url);\n  if (!paperId) return;\n  \n  // Try to send one last message before page unloads\n  chrome.runtime.sendMessage({\n    type: 'endSession',\n    sourceId: source.id,\n    paperId: paperId,\n    reason: 'page_unload'\n  });\n  \n  stopHeartbeat();\n});\n\n// Message handler for background script\nchrome.runtime.onMessage.addListener((message: any, sender, sendResponse) => {\n  logger.debug('Received message', message);\n\n  if (message.type === 'extractPaperMetadata') {\n    logger.debug('Received request to force paper metadata extraction');\n    \n    // Use processCurrentPage with force=true to enable fallback extraction\n    processCurrentPage(true)\n      .then(metadata => {\n        if (metadata) {\n          sendResponse({ success: true, metadata });\n        } else {\n          sendResponse({ success: false, error: 'Failed to extract metadata' });\n        }\n      })\n      .catch(error => {\n        logger.error('Error extracting metadata', error);\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Unknown error' \n        });\n      });\n    return true; // Will respond asynchronously\n  }\n  \n  if (message.type === 'showPopup') {\n    // Remove existing popup\n    if (activePopup) {\n      activePopup.parentElement?.remove();\n      activePopup = null;\n    }\n    \n    // Create popup wrapper\n    const wrapper = document.createElement('div');\n    wrapper.className = 'paper-popup-wrapper';\n    \n    // Position near click or element\n    if (message.position) {\n      wrapper.style.left = `${message.position.x}px`;\n      wrapper.style.top = `${message.position.y}px`;\n    }\n    \n    // Create popup\n    const popup = document.createElement('div');\n    popup.className = 'paper-popup';\n    popup.innerHTML = message.html;\n    \n    // Add to page\n    wrapper.appendChild(popup);\n    document.body.appendChild(wrapper);\n    \n    // Set up event handlers\n    if (message.handlers) {\n      for (const handler of message.handlers) {\n        const elements = popup.querySelectorAll(handler.selector);\n        elements.forEach(element => {\n          element.addEventListener(handler.event, () => {\n            chrome.runtime.sendMessage({\n              type: 'popupAction',\n              action: handler.action,\n              sourceId: message.sourceId,\n              paperId: message.paperId,\n              data: {\n                value: element.tagName === 'TEXTAREA' ? \n                  (element as HTMLTextAreaElement).value : \n                  (element as HTMLElement).getAttribute('data-vote'),\n                checked: element.tagName === 'INPUT' ? \n                  (element as HTMLInputElement).checked : undefined,\n                id: (element as HTMLElement).id\n              }\n            });\n          });\n        });\n      }\n    }\n    \n    // Save reference\n    activePopup = popup;\n    \n    sendResponse({ success: true });\n    return true;\n  }\n  \n  if (message.type === 'processPage') {\n    // Re-process the entire page\n    linkProcessor.processLinks(document);\n    processCurrentPage();\n    sendResponse({ success: true });\n    return true;\n  }\n});\n\n// Initialize\n(async function initialize() {\n  // Inject styles\n  injectStyles();\n  \n  // Initialize sources\n  initializeSources();\n  \n  // Process links\n  linkProcessor.processLinks(document);\n  \n  // Start observing for new links\n  linkProcessor.startObserving(document);\n  \n  // Set initial tab visibility\n  isTabVisible = document.visibilityState === 'visible';\n  \n  // Process current page\n  processCurrentPage();\n  \n  // Tell background script we're ready and what page we're on\n  chrome.runtime.sendMessage(\n    { \n      type: 'contentScriptReady', \n      url: window.location.href \n    },\n    (response) => {\n      if (response?.success) {\n        logger.debug('Background script acknowledged ready status');\n      }\n    }\n  );\n})();\n\n// Set up observer for URL changes (single page apps)\nlet lastUrl = location.href;\nnew MutationObserver(() => {\n  const url = location.href;\n  if (url !== lastUrl) {\n    lastUrl = url;\n    processCurrentPage();\n  }\n}).observe(document, { subtree: true, childList: true });\n"],"names":["Logger","constructor","module","this","debug","message","data","console","undefined","info","warning","warn","error","loguru","getLogger","logger","SOURCE_TYPES","MetadataExtractor","document","url","location","href","getMetaContent","selector","element","querySelector","getAttribute","extract","metadata","title","extractTitle","authors","extractAuthors","description","extractDescription","publishedDate","extractPublishedDate","doi","extractDoi","journalName","extractJournalName","tags","extractTags","citationAuthors","querySelectorAll","forEach","el","content","push","dcCreators","dcCreator","citationAuthor","ogAuthor","length","join","keywords","split","map","tag","trim","isPdf","toLowerCase","endsWith","getSourceType","generatePaperId","generatePaperIdFromUrl","hash","i","charCodeAt","Math","abs","toString","toUpperCase","substring","BaseSourceIntegration","id","name","urlPatterns","contentScriptMatches","canHandleUrl","some","pattern","test","extractPaperId","createMetadataExtractor","extractMetadata","paperId","extractor","extracted","sourceType","sourceId","abstract","timestamp","Date","toISOString","rating","formatPaperId","parsePaperId","identifier","prefix","startsWith","legacyPrefix","formatObjectId","type","ArXivMetadataExtractor","authorsElement","authorsText","textContent","replace","super","abstractElement","abstractText","categoriesElement","categoriesText","dateElement","dateText","arxivIntegration","match","pageMetadata","fetchFromApi","arxivId","apiUrl","response","fetch","ok","Error","status","text","parsedXml","async","xmlText","xmlDoc","DOMParser","parseFromString","parseError","entry","summary","published","Array","from","categories","Set","primaryCategory","hasAttribute","add","cat","result","published_date","arxiv_tags","parseXMLText","isArray","sourceIntegrations","baseSource","activePopup","heartbeatInterval","isTabVisible","linkProcessor","onLinkFound","patterns","observer","processedLinks","registerPattern","processLinks","link","linkId","getLinkId","has","startObserving","disconnect","MutationObserver","mutations","newLinks","mutation","addedNodes","node","nodeType","Node","ELEMENT_NODE","tagName","observe","body","childList","subtree","path","getElementPath","current","siblings","parentElement","children","index","indexOf","unshift","stopObserving","nextSibling","classList","contains","annotator","createElement","className","dataset","addEventListener","e","preventDefault","stopPropagation","chrome","runtime","sendMessage","position","x","clientX","y","clientY","parentNode","insertBefore","injectAnnotationButton","getSourceForUrl","source","startSessionTracking","stopHeartbeat","success","window","setInterval","now","clearInterval","processCurrentPage","force","target","remove","wasVisible","visibilityState","reason","onMessage","addListener","sender","sendResponse","then","catch","wrapper","style","left","top","popup","innerHTML","html","appendChild","handlers","handler","event","action","value","checked","getElementById","styleSheet","head","injectStyles","initializeSources","lastUrl"],"mappings":"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"}