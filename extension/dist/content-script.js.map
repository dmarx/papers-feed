{"version":3,"file":"content-script.js","sources":["../../utils/logger.ts","../../source-integration/link-processor.ts","../../source-integration/arxiv/xml-parser.ts","../../utils/metadata-transformer.ts","../../source-integration/arxiv/index.ts","../../content.ts"],"sourcesContent":["// utils/logger.ts\n// Logging utility wrapping loguru\n\n/**\n * Logger class for consistent logging throughout the extension\n */\nexport class Logger {\n  constructor(private module: string) {}\n  \n  /**\n   * Log debug message\n   */\n  debug(message: string, data?: any): void {\n    console.debug(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log info message\n   */\n  info(message: string, data?: any): void {\n    console.info(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log warning message\n   */\n  warning(message: string, data?: any): void {\n    console.warn(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log error message\n   */\n  error(message: string, data?: any): void {\n    console.error(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\n/**\n * Loguru mock for browser extension use\n */\nclass LoguruMock {\n  /**\n   * Get logger for a module\n   */\n  getLogger(module: string): Logger {\n    return new Logger(module);\n  }\n}\n\n// Export singleton instance\nexport const loguru = new LoguruMock();\n","// extension/source-integration/link-processor.ts\n// Generic link detection and processing module\n\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('link-processor');\n\ninterface LinkPattern {\n  // Source integration ID\n  sourceId: string;\n  \n  // Regular expression to match URLs\n  pattern: RegExp;\n  \n  // Function to extract paper ID from URL\n  extractPaperId: (url: string) => string | null;\n}\n\nexport class LinkProcessor {\n  private patterns: LinkPattern[] = [];\n  private observer: MutationObserver | null = null;\n  private processedLinks = new Set<string>();\n  private onLinkFound: (sourceId: string, paperId: string, link: HTMLAnchorElement) => void;\n  \n  constructor(onLinkFound: (sourceId: string, paperId: string, link: HTMLAnchorElement) => void) {\n    this.onLinkFound = onLinkFound;\n    logger.debug('Link processor initialized');\n  }\n  \n  /**\n   * Register a new link pattern\n   */\n  registerPattern(pattern: LinkPattern): void {\n    this.patterns.push(pattern);\n    logger.debug(`Registered pattern for ${pattern.sourceId}`);\n  }\n  \n  /**\n   * Process all links in the document\n   */\n  processLinks(document: Document): void {\n    // Process all links in the document\n    const links = document.querySelectorAll<HTMLAnchorElement>('a[href]');\n    \n    links.forEach(link => {\n      // Use a unique identifier for this link\n      const linkId = this.getLinkId(link);\n      \n      // Skip if already processed\n      if (this.processedLinks.has(linkId)) {\n        return;\n      }\n      \n      this.processedLinks.add(linkId);\n      \n      // Check each pattern\n      for (const pattern of this.patterns) {\n        if (pattern.pattern.test(link.href)) {\n          const paperId = pattern.extractPaperId(link.href);\n          \n          if (paperId) {\n            // Call the callback\n            this.onLinkFound(pattern.sourceId, paperId, link);\n            break; // Stop after first match\n          }\n        }\n      }\n    });\n  }\n  \n  /**\n   * Start observing for DOM changes\n   */\n  startObserving(document: Document): void {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n    \n    this.observer = new MutationObserver((mutations) => {\n      let newLinks = false;\n      \n      mutations.forEach(mutation => {\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            // If this is an anchor tag, check it\n            if ((node as Element).tagName === 'A') {\n              newLinks = true;\n            }\n            \n            // Check for any anchor tags within this element\n            const links = (node as Element).querySelectorAll('a[href]');\n            if (links.length > 0) {\n              newLinks = true;\n            }\n          }\n        });\n      });\n      \n      if (newLinks) {\n        this.processLinks(document);\n      }\n    });\n    \n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n    \n    logger.debug('Started observing for DOM changes');\n  }\n  \n  /**\n   * Create a unique ID for a link\n   */\n  private getLinkId(link: HTMLAnchorElement): string {\n    // Use href and position in document to create a unique ID\n    const path = this.getElementPath(link);\n    return `${link.href}|${path}`;\n  }\n  \n  /**\n   * Get element path in DOM for identification\n   */\n  private getElementPath(element: Element): string {\n    const path: string[] = [];\n    let current: Element | null = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.id) {\n        selector += `#${current.id}`;\n      } else {\n        const siblings = Array.from(current.parentElement?.children || []);\n        const index = siblings.indexOf(current) + 1;\n        if (siblings.length > 1) {\n          selector += `:nth-child(${index})`;\n        }\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n  \n  /**\n   * Stop observing DOM changes\n   */\n  stopObserving(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n      logger.debug('Stopped observing DOM changes');\n    }\n  }\n}\n","// source-integration/arxiv/xml-parser.ts\n// ArXiv API XML response parser - simplified for use with metadata transformer\n\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('arxiv-xml-parser');\n\nexport interface ArXivParsedData {\n  title: string;\n  summary: string;\n  authors: string[];\n  published_date: string;\n  arxiv_tags: string[];\n  [key: string]: any; // Add index signature to satisfy Json type requirements\n}\n\n/**\n * Parse ArXiv API XML response into a structured object\n */\nexport async function parseXMLText(xmlText: string): Promise<ArXivParsedData | null> {\n  logger.debug('Parsing ArXiv XML response');\n  \n  try {\n    // Parse XML to DOM\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\n    \n    // Check for parse errors\n    const parseError = xmlDoc.querySelector('parsererror');\n    if (parseError) {\n      throw new Error('XML parsing error: ' + parseError.textContent);\n    }\n    \n    // Get entry element\n    const entry = xmlDoc.querySelector('entry');\n    if (!entry) {\n      throw new Error('No entry element found in XML');\n    }\n    \n    // Extract basic fields\n    const title = entry.querySelector('title')?.textContent?.trim() || '';\n    const summary = entry.querySelector('summary')?.textContent?.trim() || '';\n    const published = entry.querySelector('published')?.textContent?.trim() || '';\n    \n    // Extract authors\n    const authors = Array.from(entry.querySelectorAll('author name'))\n      .map(name => name.textContent?.trim() || '');\n    \n    // Extract categories/tags\n    const categories = new Set<string>();\n    \n    // Primary category\n    const primaryCategory = entry.querySelector('arxiv\\\\:primary_category, primary_category');\n    if (primaryCategory && primaryCategory.hasAttribute('term')) {\n      categories.add(primaryCategory.getAttribute('term') || '');\n    }\n    \n    // Other categories\n    const categoryElements = entry.querySelectorAll('category');\n    categoryElements.forEach(cat => {\n      if (cat.hasAttribute('term')) {\n        categories.add(cat.getAttribute('term') || '');\n      }\n    });\n    \n    const result: ArXivParsedData = {\n      title,\n      summary,\n      authors,\n      published_date: published,\n      arxiv_tags: Array.from(categories)\n    };\n    \n    logger.debug('XML parsing completed successfully');\n    return result;\n  } catch (error) {\n    logger.error('Error parsing ArXiv XML', error);\n    return null;\n  }\n}\n","// extension/utils/metadata-transformer.ts\n// Generic metadata transformation utilities\n\nimport { PaperMetadata } from '../papers/types';\nimport { loguru } from './logger';\n\nconst logger = loguru.getLogger('metadata-transformer');\n\n/**\n * Interface for source-specific metadata mapping\n */\nexport interface MetadataMapping {\n  // Maps source-specific fields to standard metadata\n  titleField: string | string[];\n  authorsField: string | string[];\n  abstractField: string | string[];\n  dateField: string | string[];\n  tagsField: string | string[];\n  \n  // Optional custom extraction functions\n  extractAuthors?: (data: any) => string;\n  extractTags?: (data: any) => string[];\n  extractDate?: (data: any) => string;\n}\n\n/**\n * Transform source-specific API response to standard metadata\n */\nexport function transformMetadata(\n  sourceId: string,\n  paperId: string,\n  apiData: any,\n  mapping: MetadataMapping,\n  sourceUrl: string\n): PaperMetadata {\n  // Extract fields using provided mapping\n  const getField = (data: any, fieldPath: string | string[]): any => {\n    if (Array.isArray(fieldPath)) {\n      // Try multiple possible field paths\n      for (const path of fieldPath) {\n        const value = getField(data, path);\n        if (value !== undefined && value !== null && value !== '') {\n          return value;\n        }\n      }\n      return '';\n    }\n    \n    // Handle nested paths like \"document.title\"\n    const parts = fieldPath.split('.');\n    let value = data;\n    \n    for (const part of parts) {\n      if (value === undefined || value === null) return '';\n      value = value[part];\n    }\n    \n    return value !== undefined && value !== null ? value : '';\n  };\n  \n  // Extract title\n  const title = getField(apiData, mapping.titleField);\n  \n  // Extract authors - either use custom function or default extraction\n  const authors = mapping.extractAuthors \n    ? mapping.extractAuthors(apiData)\n    : Array.isArray(getField(apiData, mapping.authorsField))\n      ? getField(apiData, mapping.authorsField).join(', ')\n      : getField(apiData, mapping.authorsField);\n  \n  // Extract abstract\n  const abstract = getField(apiData, mapping.abstractField);\n  \n  // Extract published date\n  const publishedDate = mapping.extractDate\n    ? mapping.extractDate(apiData)\n    : getField(apiData, mapping.dateField);\n  \n  // Extract tags\n  const tags = mapping.extractTags\n    ? mapping.extractTags(apiData)\n    : Array.isArray(getField(apiData, mapping.tagsField))\n      ? getField(apiData, mapping.tagsField)\n      : [];\n  \n  const metadata: PaperMetadata = {\n    sourceId,\n    paperId,\n    url: sourceUrl,\n    title,\n    authors,\n    abstract,\n    timestamp: new Date().toISOString(),\n    rating: 'novote',\n    publishedDate,\n    tags\n  };\n  \n  logger.debug('Transformed metadata', { sourceId, paperId });\n  return metadata;\n}\n","// source-integration/arxiv/index.ts\n// ArXiv integration using metadata transformer\n\nimport { SourceIntegration } from '../types';\nimport { PaperMetadata } from '../../papers/types';\nimport { parseXMLText } from './xml-parser';\nimport { transformMetadata, MetadataMapping } from '../../utils/metadata-transformer';\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('arxiv-integration');\n\nexport class ArXivIntegration implements SourceIntegration {\n  readonly id = 'arxiv';\n  readonly name = 'arXiv.org';\n  \n  // URL patterns for papers\n  readonly urlPatterns = [\n    /arxiv\\.org\\/(abs|pdf|html)\\/([0-9.]+)/,\n    /arxiv\\.org\\/\\w+\\/([0-9.]+)/\n  ];\n  \n  // Content script matches\n  readonly contentScriptMatches = [\n    \"*://*.arxiv.org/*\"\n  ];\n  \n  // Metadata mapping for ArXiv\n  private readonly METADATA_MAPPING: MetadataMapping = {\n    titleField: 'title',\n    authorsField: 'authors',\n    abstractField: 'summary',\n    dateField: 'published_date',\n    tagsField: 'arxiv_tags',\n    \n    // Custom author extraction (since authors is an array)\n    extractAuthors: (data) => {\n      if (Array.isArray(data.authors)) {\n        return data.authors.join(', ');\n      }\n      return data.authors || '';\n    }\n  };\n\n  /**\n   * Check if this integration can handle the given URL\n   */\n  canHandleUrl(url: string): boolean {\n    return this.urlPatterns.some(pattern => pattern.test(url));\n  }\n\n  /**\n   * Extract paper ID from URL\n   */\n  extractPaperId(url: string): string | null {\n    for (const pattern of this.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[2] || match[1]; // The capture group with the paper ID\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Extract metadata from page or fetch from API\n   */\n  async extractMetadata(document: Document, paperId: string): Promise<PaperMetadata | null> {\n    logger.info(`Extracting metadata for arXiv ID: ${paperId}`);\n    \n    // Try to extract from page first\n    const pageMetadata = this.extractFromPage(document, paperId);\n    if (pageMetadata) {\n      logger.debug('Extracted metadata from page');\n      return pageMetadata;\n    }\n    \n    // If page extraction fails, fetch from API\n    logger.debug('Falling back to API for metadata');\n    return this.fetchFromApi(paperId);\n  }\n  \n  /**\n   * Extract metadata from ArXiv page\n   */\n  private extractFromPage(document: Document, paperId: string): PaperMetadata | null {\n    try {\n      // Extract title\n      const titleElement = document.querySelector('.title');\n      if (!titleElement) return null;\n      \n      const title = titleElement.textContent?.replace('Title:', '').trim() || '';\n      \n      // Extract authors\n      const authorsElement = document.querySelector('.authors');\n      const authors = authorsElement?.textContent?.replace('Authors:', '').trim() || '';\n      \n      // Extract abstract\n      const abstractElement = document.querySelector('.abstract');\n      const abstract = abstractElement?.textContent?.replace('Abstract:', '').trim() || '';\n      \n      // Extract categories\n      const categoriesElement = document.querySelector('.subjects');\n      const categoriesText = categoriesElement?.textContent?.replace('Subjects:', '').trim() || '';\n      const tags = categoriesText.split(';').map(tag => tag.trim());\n      \n      // Extract publication date\n      const dateElement = document.querySelector('.dateline');\n      const publishedDate = dateElement?.textContent?.trim() || '';\n      \n      // Create metadata object\n      return {\n        sourceId: this.id,\n        paperId,\n        url: window.location.href,\n        title,\n        authors,\n        abstract,\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate,\n        tags\n      };\n    } catch (error) {\n      logger.error('Error extracting from page:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Fetch metadata from ArXiv API\n   */\n  private async fetchFromApi(arxivId: string): Promise<PaperMetadata | null> {\n    try {\n      const apiUrl = `https://export.arxiv.org/api/query?id_list=${arxivId}`;\n      logger.debug(`API URL: ${apiUrl}`);\n      \n      const response = await fetch(apiUrl);\n      \n      if (!response.ok) {\n        throw new Error(`ArXiv API error: ${response.status}`);\n      }\n      \n      const text = await response.text();\n      const parsedXml = await parseXMLText(text);\n      \n      if (!parsedXml) {\n        logger.error('Failed to parse API response');\n        return null;\n      }\n      \n      // Use the metadata transformer to convert the parsed XML to standard format\n      const paperData = transformMetadata(\n        this.id,\n        arxivId,\n        parsedXml,\n        this.METADATA_MAPPING,\n        `https://arxiv.org/abs/${arxivId}`\n      );\n      \n      logger.debug('Paper metadata processed', paperData);\n      return paperData;\n    } catch (error) {\n      logger.error('Error processing arXiv metadata', error);\n      return null;\n    }\n  }\n}\n\n// Export a singleton instance that can be used by both background and content scripts\nexport const arxivIntegration = new ArXivIntegration();\n","// extension/content.ts\n// Content script with direct source plugin imports\n\nimport { LinkProcessor } from './source-integration/link-processor';\nimport { SourceIntegration, Message } from './source-integration/types';\nimport { PaperMetadata } from './papers/types';\nimport { loguru } from './utils/logger';\n\n// Import source plugins directly\nimport { arxivIntegration } from './source-integration/arxiv';\n\nconst logger = loguru.getLogger('content-script');\n\nlogger.info('Paper Tracker content script loaded');\n\n// Available source integrations\nconst sourceIntegrations: SourceIntegration[] = [\n  arxivIntegration,\n  // Add more sources as they become available\n];\n\n// Track active popup\nlet activePopup: HTMLElement | null = null;\n\n// Create link processor\nconst linkProcessor = new LinkProcessor((sourceId, paperId, link) => {\n  // Callback when link is found\n  injectAnnotationButton(link, sourceId, paperId);\n});\n\n// Initialize sources\nfunction initializeSources() {\n  // Register each source with the link processor\n  for (const source of sourceIntegrations) {\n    logger.debug(`Initializing source: ${source.id}`);\n    \n    // Register patterns with link processor\n    source.urlPatterns.forEach(pattern => {\n      linkProcessor.registerPattern({\n        sourceId: source.id,\n        pattern,\n        extractPaperId: (url: string) => source.extractPaperId(url)\n      });\n    });\n  }\n}\n\n// Inject common styles\nfunction injectStyles() {\n  if (document.getElementById('paper-tracker-styles')) {\n    return; // Already injected\n  }\n  \n  const styles = `\n  .paper-annotator {\n    display: inline-block;\n    margin-left: 4px;\n    cursor: pointer;\n    font-size: 0.9em;\n    opacity: 0.7;\n    transition: opacity 0.2s;\n    vertical-align: baseline;\n  }\n\n  .paper-annotator:hover {\n    opacity: 1;\n  }\n\n  .paper-popup-wrapper {\n    position: fixed;\n    z-index: 10000;\n  }\n\n  .paper-popup {\n    position: relative;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    padding: 12px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    width: 300px;\n    box-sizing: border-box;\n  }\n\n  .paper-popup-header {\n    font-weight: bold;\n    margin-bottom: 8px;\n    line-height: 1.4;\n    font-size: 1em;\n  }\n\n  .paper-popup-meta {\n    color: #666;\n    font-size: 0.85em;\n    margin-bottom: 12px;\n    line-height: 1.4;\n  }\n\n  .paper-popup-buttons {\n    display: flex;\n    gap: 8px;\n    margin: 8px 0;\n  }\n\n  .paper-popup button {\n    padding: 6px 12px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background: #f5f5f5;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    font-size: 0.9em;\n  }\n\n  .paper-popup button:hover {\n    background: #e8e8e8;\n    border-color: #ccc;\n  }\n\n  .paper-popup button.active {\n    background: #e0e0e0;\n    border-color: #aaa;\n  }\n\n  .paper-popup textarea {\n    width: calc(100% - 16px);\n    min-height: 80px;\n    margin: 8px 0;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    resize: vertical;\n    font-family: inherit;\n    font-size: 0.9em;\n    line-height: 1.4;\n    box-sizing: border-box;\n  }\n\n  .paper-popup textarea:focus {\n    outline: none;\n    border-color: #aaa;\n  }\n\n  .paper-popup-actions {\n    display: flex;\n    justify-content: flex-end;\n    gap: 8px;\n    margin-top: 12px;\n  }\n\n  .paper-popup .save-button {\n    background: #2563eb;\n    color: white;\n    border-color: #2563eb;\n  }\n\n  .paper-popup .save-button:hover {\n    background: #1d4ed8;\n    border-color: #1d4ed8;\n  }\n  `;\n  \n  const styleSheet = document.createElement('style');\n  styleSheet.id = 'paper-tracker-styles';\n  styleSheet.textContent = styles;\n  document.head.appendChild(styleSheet);\n  \n  logger.debug('Injected styles');\n}\n\n// Add annotation button to link\nfunction injectAnnotationButton(link: HTMLAnchorElement, sourceId: string, paperId: string): void {\n  // Skip if already processed\n  if (link.nextSibling && \n      link.nextSibling.nodeType === Node.ELEMENT_NODE &&\n      (link.nextSibling as Element).classList.contains('paper-annotator')) {\n    return;\n  }\n  \n  // Create annotator button\n  const annotator = document.createElement('span');\n  annotator.className = 'paper-annotator';\n  annotator.textContent = '📝';\n  annotator.title = 'Add annotation';\n  \n  // Store data attributes\n  annotator.dataset.sourceId = sourceId;\n  annotator.dataset.paperId = paperId;\n  \n  // Add click handler\n  annotator.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Send message to background script to show popup\n    chrome.runtime.sendMessage({\n      type: 'showAnnotationPopup',\n      sourceId,\n      paperId,\n      position: {\n        x: e.clientX,\n        y: e.clientY\n      }\n    });\n  });\n  \n  // Add to page next to link\n  link.parentNode?.insertBefore(annotator, link.nextSibling);\n}\n\n// Get source that can handle a URL\nfunction getSourceForUrl(url: string): SourceIntegration | null {\n  for (const source of sourceIntegrations) {\n    if (source.canHandleUrl(url)) {\n      return source;\n    }\n  }\n  return null;\n}\n\n// Extract paper ID from URL\nfunction extractPaperId(url: string): { sourceId: string, paperId: string } | null {\n  for (const source of sourceIntegrations) {\n    if (source.canHandleUrl(url)) {\n      const paperId = source.extractPaperId(url);\n      if (paperId) {\n        return { sourceId: source.id, paperId };\n      }\n    }\n  }\n  return null;\n}\n\n// Set up click-outside handler for popups\ndocument.addEventListener('click', (e) => {\n  if (activePopup && \n      !activePopup.contains(e.target as Node) && \n      !(e.target as Element).classList.contains('paper-annotator')) {\n    activePopup.parentElement?.remove();\n    activePopup = null;\n  }\n});\n\n// Process current page if it's a paper\nasync function processCurrentPage() {\n  const url = window.location.href;\n  const paperInfo = extractPaperId(url);\n  \n  if (paperInfo) {\n    logger.info(`Detected paper: ${paperInfo.sourceId}:${paperInfo.paperId}`);\n    \n    const { sourceId, paperId } = paperInfo;\n    const source = sourceIntegrations.find(s => s.id === sourceId);\n    \n    if (source) {\n      try {\n        const metadata = await source.extractMetadata(document, paperId);\n        \n        if (metadata) {\n          // Send metadata to background script\n          chrome.runtime.sendMessage({\n            type: 'paperMetadata',\n            metadata\n          });\n          \n          logger.debug(`Sent metadata to background script for ${sourceId}:${paperId}`);\n        }\n      } catch (error) {\n        logger.error(`Error extracting metadata for ${sourceId}:${paperId}`, error);\n      }\n    }\n  }\n}\n\n// Message handler for background script\nchrome.runtime.onMessage.addListener((message: any, sender, sendResponse) => {\n  logger.debug('Received message', message);\n  \n  if (message.type === 'showPopup') {\n    // Remove existing popup\n    if (activePopup) {\n      activePopup.parentElement?.remove();\n      activePopup = null;\n    }\n    \n    // Create popup wrapper\n    const wrapper = document.createElement('div');\n    wrapper.className = 'paper-popup-wrapper';\n    \n    // Position near click or element\n    if (message.position) {\n      wrapper.style.left = `${message.position.x}px`;\n      wrapper.style.top = `${message.position.y}px`;\n    }\n    \n    // Create popup\n    const popup = document.createElement('div');\n    popup.className = 'paper-popup';\n    popup.innerHTML = message.html;\n    \n    // Add to page\n    wrapper.appendChild(popup);\n    document.body.appendChild(wrapper);\n    \n    // Set up event handlers\n    if (message.handlers) {\n      for (const handler of message.handlers) {\n        const elements = popup.querySelectorAll(handler.selector);\n        elements.forEach(element => {\n          element.addEventListener(handler.event, () => {\n            chrome.runtime.sendMessage({\n              type: 'popupAction',\n              action: handler.action,\n              sourceId: message.sourceId,\n              paperId: message.paperId,\n              data: {\n                value: element.tagName === 'TEXTAREA' ? \n                  (element as HTMLTextAreaElement).value : \n                  (element as HTMLElement).getAttribute('data-vote'),\n                checked: element.tagName === 'INPUT' ? \n                  (element as HTMLInputElement).checked : undefined,\n                id: (element as HTMLElement).id\n              }\n            });\n          });\n        });\n      }\n    }\n    \n    // Save reference\n    activePopup = popup;\n    \n    sendResponse({ success: true });\n    return true;\n  }\n  \n  if (message.type === 'processPage') {\n    // Re-process the entire page\n    linkProcessor.processLinks(document);\n    processCurrentPage();\n    sendResponse({ success: true });\n    return true;\n  }\n});\n\n// Initialize\n(async function initialize() {\n  // Inject styles\n  injectStyles();\n  \n  // Initialize sources\n  initializeSources();\n  \n  // Process links\n  linkProcessor.processLinks(document);\n  \n  // Start observing for new links\n  linkProcessor.startObserving(document);\n  \n  // Process current page\n  processCurrentPage();\n  \n  // Tell background script we're ready and what page we're on\n  chrome.runtime.sendMessage(\n    { \n      type: 'contentScriptReady', \n      url: window.location.href \n    },\n    (response) => {\n      if (response?.success) {\n        logger.debug('Background script acknowledged ready status');\n      }\n    }\n  );\n})();\n\n// Set up observer for URL changes (single page apps)\nlet lastUrl = location.href;\nnew MutationObserver(() => {\n  const url = location.href;\n  if (url !== lastUrl) {\n    lastUrl = url;\n    processCurrentPage();\n  }\n}).observe(document, { subtree: true, childList: true });\n"],"names":["Logger","constructor","module","this","debug","message","data","console","undefined","info","warning","warn","error","loguru","getLogger","logger","arxivIntegration","id","name","urlPatterns","contentScriptMatches","METADATA_MAPPING","titleField","authorsField","abstractField","dateField","tagsField","extractAuthors","Array","isArray","authors","join","canHandleUrl","url","some","pattern","test","extractPaperId","match","extractMetadata","document","paperId","pageMetadata","extractFromPage","fetchFromApi","titleElement","querySelector","title","textContent","replace","trim","authorsElement","abstractElement","abstract","categoriesElement","tags","split","map","tag","dateElement","publishedDate","sourceId","window","location","href","timestamp","Date","toISOString","rating","arxivId","apiUrl","response","fetch","ok","Error","status","text","parsedXml","async","xmlText","xmlDoc","DOMParser","parseFromString","parseError","entry","summary","published","from","querySelectorAll","categories","Set","primaryCategory","hasAttribute","add","getAttribute","forEach","cat","result","published_date","arxiv_tags","parseXMLText","paperData","apiData","mapping","sourceUrl","getField","fieldPath","path","value","parts","part","extractDate","extractTags","metadata","transformMetadata","sourceIntegrations","activePopup","linkProcessor","onLinkFound","patterns","observer","processedLinks","registerPattern","push","processLinks","link","linkId","getLinkId","has","startObserving","disconnect","MutationObserver","mutations","newLinks","mutation","addedNodes","node","nodeType","Node","ELEMENT_NODE","tagName","length","observe","body","childList","subtree","getElementPath","element","current","selector","toLowerCase","siblings","parentElement","children","index","indexOf","unshift","stopObserving","nextSibling","classList","contains","annotator","createElement","className","dataset","addEventListener","e","preventDefault","stopPropagation","chrome","runtime","sendMessage","type","position","x","clientX","y","clientY","parentNode","insertBefore","injectAnnotationButton","processCurrentPage","paperInfo","source","find","s","target","remove","onMessage","addListener","sender","sendResponse","wrapper","style","left","top","popup","innerHTML","html","appendChild","handlers","handler","event","action","checked","success","getElementById","styleSheet","head","injectStyles","initializeSources","lastUrl"],"mappings":"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"}