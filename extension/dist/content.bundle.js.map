{"version":3,"file":"content.bundle.js","sources":["../source-integration/link-processor.ts","../content.ts"],"sourcesContent":["// extension/source-integration/link-processor.ts\n// Generic link detection and processing module\n\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('link-processor');\n\ninterface LinkPattern {\n  // Source integration ID\n  sourceId: string;\n  \n  // Regular expression to match URLs\n  pattern: RegExp;\n  \n  // Function to extract paper ID from URL\n  extractPaperId: (url: string) => string | null;\n}\n\nexport class LinkProcessor {\n  private patterns: LinkPattern[] = [];\n  private observer: MutationObserver | null = null;\n  private processedLinks = new Set<string>();\n  private onLinkFound: (sourceId: string, paperId: string, link: HTMLAnchorElement) => void;\n  \n  constructor(onLinkFound: (sourceId: string, paperId: string, link: HTMLAnchorElement) => void) {\n    this.onLinkFound = onLinkFound;\n    logger.debug('Link processor initialized');\n  }\n  \n  /**\n   * Register a new link pattern\n   */\n  registerPattern(pattern: LinkPattern): void {\n    this.patterns.push(pattern);\n    logger.debug(`Registered pattern for ${pattern.sourceId}`);\n  }\n  \n  /**\n   * Process all links in the document\n   */\n  processLinks(document: Document): void {\n    // Process all links in the document\n    const links = document.querySelectorAll<HTMLAnchorElement>('a[href]');\n    \n    links.forEach(link => {\n      // Use a unique identifier for this link\n      const linkId = this.getLinkId(link);\n      \n      // Skip if already processed\n      if (this.processedLinks.has(linkId)) {\n        return;\n      }\n      \n      this.processedLinks.add(linkId);\n      \n      // Check each pattern\n      for (const pattern of this.patterns) {\n        if (pattern.pattern.test(link.href)) {\n          const paperId = pattern.extractPaperId(link.href);\n          \n          if (paperId) {\n            // Call the callback\n            this.onLinkFound(pattern.sourceId, paperId, link);\n            break; // Stop after first match\n          }\n        }\n      }\n    });\n  }\n  \n  /**\n   * Start observing for DOM changes\n   */\n  startObserving(document: Document): void {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n    \n    this.observer = new MutationObserver((mutations) => {\n      let newLinks = false;\n      \n      mutations.forEach(mutation => {\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            // If this is an anchor tag, check it\n            if ((node as Element).tagName === 'A') {\n              newLinks = true;\n            }\n            \n            // Check for any anchor tags within this element\n            const links = (node as Element).querySelectorAll('a[href]');\n            if (links.length > 0) {\n              newLinks = true;\n            }\n          }\n        });\n      });\n      \n      if (newLinks) {\n        this.processLinks(document);\n      }\n    });\n    \n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n    \n    logger.debug('Started observing for DOM changes');\n  }\n  \n  /**\n   * Create a unique ID for a link\n   */\n  private getLinkId(link: HTMLAnchorElement): string {\n    // Use href and position in document to create a unique ID\n    const path = this.getElementPath(link);\n    return `${link.href}|${path}`;\n  }\n  \n  /**\n   * Get element path in DOM for identification\n   */\n  private getElementPath(element: Element): string {\n    const path: string[] = [];\n    let current: Element | null = element;\n    \n    while (current && current !== document.body) {\n      let selector = current.tagName.toLowerCase();\n      \n      if (current.id) {\n        selector += `#${current.id}`;\n      } else {\n        const siblings = Array.from(current.parentElement?.children || []);\n        const index = siblings.indexOf(current) + 1;\n        if (siblings.length > 1) {\n          selector += `:nth-child(${index})`;\n        }\n      }\n      \n      path.unshift(selector);\n      current = current.parentElement;\n    }\n    \n    return path.join(' > ');\n  }\n  \n  /**\n   * Stop observing DOM changes\n   */\n  stopObserving(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n      logger.debug('Stopped observing DOM changes');\n    }\n  }\n}\n","// extension/content.ts\n// Content script with direct source plugin imports\n\nimport { LinkProcessor } from './source-integration/link-processor';\nimport { SourceIntegration, Message } from './source-integration/types';\nimport { PaperMetadata } from './papers/types';\nimport { loguru } from './utils/logger';\n\n// Import source plugins directly\nimport { arxivIntegration } from './source-integration/arxiv';\n\nconst logger = loguru.getLogger('content-script');\n\nlogger.info('Paper Tracker content script loaded');\n\n// Available source integrations\nconst sourceIntegrations: SourceIntegration[] = [\n  arxivIntegration,\n  // Add more sources as they become available\n];\n\n// Track active popup\nlet activePopup: HTMLElement | null = null;\n\n// Create link processor\nconst linkProcessor = new LinkProcessor((sourceId, paperId, link) => {\n  // Callback when link is found\n  injectAnnotationButton(link, sourceId, paperId);\n});\n\n// Initialize sources\nfunction initializeSources() {\n  // Register each source with the link processor\n  for (const source of sourceIntegrations) {\n    logger.debug(`Initializing source: ${source.id}`);\n    \n    // Register patterns with link processor\n    source.urlPatterns.forEach(pattern => {\n      linkProcessor.registerPattern({\n        sourceId: source.id,\n        pattern,\n        extractPaperId: (url: string) => source.extractPaperId(url)\n      });\n    });\n  }\n}\n\n// Inject common styles\nfunction injectStyles() {\n  if (document.getElementById('paper-tracker-styles')) {\n    return; // Already injected\n  }\n  \n  const styles = `\n  .paper-annotator {\n    display: inline-block;\n    margin-left: 4px;\n    cursor: pointer;\n    font-size: 0.9em;\n    opacity: 0.7;\n    transition: opacity 0.2s;\n    vertical-align: baseline;\n  }\n\n  .paper-annotator:hover {\n    opacity: 1;\n  }\n\n  .paper-popup-wrapper {\n    position: fixed;\n    z-index: 10000;\n  }\n\n  .paper-popup {\n    position: relative;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    padding: 12px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    width: 300px;\n    box-sizing: border-box;\n  }\n\n  .paper-popup-header {\n    font-weight: bold;\n    margin-bottom: 8px;\n    line-height: 1.4;\n    font-size: 1em;\n  }\n\n  .paper-popup-meta {\n    color: #666;\n    font-size: 0.85em;\n    margin-bottom: 12px;\n    line-height: 1.4;\n  }\n\n  .paper-popup-buttons {\n    display: flex;\n    gap: 8px;\n    margin: 8px 0;\n  }\n\n  .paper-popup button {\n    padding: 6px 12px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background: #f5f5f5;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    font-size: 0.9em;\n  }\n\n  .paper-popup button:hover {\n    background: #e8e8e8;\n    border-color: #ccc;\n  }\n\n  .paper-popup button.active {\n    background: #e0e0e0;\n    border-color: #aaa;\n  }\n\n  .paper-popup textarea {\n    width: calc(100% - 16px);\n    min-height: 80px;\n    margin: 8px 0;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    resize: vertical;\n    font-family: inherit;\n    font-size: 0.9em;\n    line-height: 1.4;\n    box-sizing: border-box;\n  }\n\n  .paper-popup textarea:focus {\n    outline: none;\n    border-color: #aaa;\n  }\n\n  .paper-popup-actions {\n    display: flex;\n    justify-content: flex-end;\n    gap: 8px;\n    margin-top: 12px;\n  }\n\n  .paper-popup .save-button {\n    background: #2563eb;\n    color: white;\n    border-color: #2563eb;\n  }\n\n  .paper-popup .save-button:hover {\n    background: #1d4ed8;\n    border-color: #1d4ed8;\n  }\n  `;\n  \n  const styleSheet = document.createElement('style');\n  styleSheet.id = 'paper-tracker-styles';\n  styleSheet.textContent = styles;\n  document.head.appendChild(styleSheet);\n  \n  logger.debug('Injected styles');\n}\n\n// Add annotation button to link\nfunction injectAnnotationButton(link: HTMLAnchorElement, sourceId: string, paperId: string): void {\n  // Skip if already processed\n  if (link.nextSibling && \n      link.nextSibling.nodeType === Node.ELEMENT_NODE &&\n      (link.nextSibling as Element).classList.contains('paper-annotator')) {\n    return;\n  }\n  \n  // Create annotator button\n  const annotator = document.createElement('span');\n  annotator.className = 'paper-annotator';\n  annotator.textContent = '📝';\n  annotator.title = 'Add annotation';\n  \n  // Store data attributes\n  annotator.dataset.sourceId = sourceId;\n  annotator.dataset.paperId = paperId;\n  \n  // Add click handler\n  annotator.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Send message to background script to show popup\n    chrome.runtime.sendMessage({\n      type: 'showAnnotationPopup',\n      sourceId,\n      paperId,\n      position: {\n        x: e.clientX,\n        y: e.clientY\n      }\n    });\n  });\n  \n  // Add to page next to link\n  link.parentNode?.insertBefore(annotator, link.nextSibling);\n}\n\n// Get source that can handle a URL\nfunction getSourceForUrl(url: string): SourceIntegration | null {\n  for (const source of sourceIntegrations) {\n    if (source.canHandleUrl(url)) {\n      return source;\n    }\n  }\n  return null;\n}\n\n// Extract paper ID from URL\nfunction extractPaperId(url: string): { sourceId: string, paperId: string } | null {\n  for (const source of sourceIntegrations) {\n    if (source.canHandleUrl(url)) {\n      const paperId = source.extractPaperId(url);\n      if (paperId) {\n        return { sourceId: source.id, paperId };\n      }\n    }\n  }\n  return null;\n}\n\n// Set up click-outside handler for popups\ndocument.addEventListener('click', (e) => {\n  if (activePopup && \n      !activePopup.contains(e.target as Node) && \n      !(e.target as Element).classList.contains('paper-annotator')) {\n    activePopup.parentElement?.remove();\n    activePopup = null;\n  }\n});\n\n// Process current page if it's a paper\nasync function processCurrentPage() {\n  const url = window.location.href;\n  const paperInfo = extractPaperId(url);\n  \n  if (paperInfo) {\n    logger.info(`Detected paper: ${paperInfo.sourceId}:${paperInfo.paperId}`);\n    \n    const { sourceId, paperId } = paperInfo;\n    const source = sourceIntegrations.find(s => s.id === sourceId);\n    \n    if (source) {\n      try {\n        const metadata = await source.extractMetadata(document, paperId);\n        \n        if (metadata) {\n          // Send metadata to background script\n          chrome.runtime.sendMessage({\n            type: 'paperMetadata',\n            metadata\n          });\n          \n          logger.debug(`Sent metadata to background script for ${sourceId}:${paperId}`);\n        }\n      } catch (error) {\n        logger.error(`Error extracting metadata for ${sourceId}:${paperId}`, error);\n      }\n    }\n  }\n}\n\n// Message handler for background script\nchrome.runtime.onMessage.addListener((message: any, sender, sendResponse) => {\n  logger.debug('Received message', message);\n  \n  if (message.type === 'showPopup') {\n    // Remove existing popup\n    if (activePopup) {\n      activePopup.parentElement?.remove();\n      activePopup = null;\n    }\n    \n    // Create popup wrapper\n    const wrapper = document.createElement('div');\n    wrapper.className = 'paper-popup-wrapper';\n    \n    // Position near click or element\n    if (message.position) {\n      wrapper.style.left = `${message.position.x}px`;\n      wrapper.style.top = `${message.position.y}px`;\n    }\n    \n    // Create popup\n    const popup = document.createElement('div');\n    popup.className = 'paper-popup';\n    popup.innerHTML = message.html;\n    \n    // Add to page\n    wrapper.appendChild(popup);\n    document.body.appendChild(wrapper);\n    \n    // Set up event handlers\n    if (message.handlers) {\n      for (const handler of message.handlers) {\n        const elements = popup.querySelectorAll(handler.selector);\n        elements.forEach(element => {\n          element.addEventListener(handler.event, () => {\n            chrome.runtime.sendMessage({\n              type: 'popupAction',\n              action: handler.action,\n              sourceId: message.sourceId,\n              paperId: message.paperId,\n              data: {\n                value: element.tagName === 'TEXTAREA' ? \n                  (element as HTMLTextAreaElement).value : \n                  (element as HTMLElement).getAttribute('data-vote'),\n                checked: element.tagName === 'INPUT' ? \n                  (element as HTMLInputElement).checked : undefined,\n                id: (element as HTMLElement).id\n              }\n            });\n          });\n        });\n      }\n    }\n    \n    // Save reference\n    activePopup = popup;\n    \n    sendResponse({ success: true });\n    return true;\n  }\n  \n  if (message.type === 'processPage') {\n    // Re-process the entire page\n    linkProcessor.processLinks(document);\n    processCurrentPage();\n    sendResponse({ success: true });\n    return true;\n  }\n});\n\n// Initialize\n(async function initialize() {\n  // Inject styles\n  injectStyles();\n  \n  // Initialize sources\n  initializeSources();\n  \n  // Process links\n  linkProcessor.processLinks(document);\n  \n  // Start observing for new links\n  linkProcessor.startObserving(document);\n  \n  // Process current page\n  processCurrentPage();\n  \n  // Tell background script we're ready and what page we're on\n  chrome.runtime.sendMessage(\n    { \n      type: 'contentScriptReady', \n      url: window.location.href \n    },\n    (response) => {\n      if (response?.success) {\n        logger.debug('Background script acknowledged ready status');\n      }\n    }\n  );\n})();\n\n// Set up observer for URL changes (single page apps)\nlet lastUrl = location.href;\nnew MutationObserver(() => {\n  const url = location.href;\n  if (url !== lastUrl) {\n    lastUrl = url;\n    processCurrentPage();\n  }\n}).observe(document, { subtree: true, childList: true });\n"],"names":["logger","document"],"mappings":"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"}