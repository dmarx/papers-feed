{"version":3,"file":"content.bundle.js","sources":["../content/message_handlers.ts","../content/paper_overlay.ts","../content/metadata_fetcher.ts","../content/annotator.ts","../content/paper_detector.ts","../content/index.ts"],"sourcesContent":["// extension/content/message_handlers.ts\n// Handle messages between content script and background\n\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('ContentMessageHandlers');\n\n/**\n * Initialize message handlers for content script\n */\nexport function initializeMessageHandlers(): void {\n  logger.info('Initializing content script message handlers');\n  \n  // Listen for messages from the background script\n  chrome.runtime.onMessage.addListener(handleMessage);\n  \n  // Listen for messages from the page script\n  window.addEventListener('message', handleWindowMessage);\n}\n\n/**\n * Handle messages from the background script\n * @param {any} message Message data\n * @param {chrome.runtime.MessageSender} sender Message sender\n * @param {Function} sendResponse Response callback\n * @returns {boolean} Whether to use sendResponse asynchronously\n */\nfunction handleMessage(\n  message: any, \n  sender: chrome.runtime.MessageSender, \n  sendResponse: (response?: any) => void\n): boolean {\n  logger.info('Content script received message:', message);\n\n  // Handle different message types\n  switch (message.type) {\n    case 'extractPageMetadata':\n      // Execute the extractor code on the current page\n      executeExtractor(message.extractorCode, window.location.href)\n        .then(metadata => {\n          sendResponse({ \n            success: true, \n            metadata \n          });\n        })\n        .catch(error => {\n          logger.error('Error executing extractor:', error);\n          sendResponse({ \n            success: false, \n            error: String(error) \n          });\n        });\n      break;\n\n    case 'getPluginForUrl':\n      // We don't need to do anything here, just report success\n      // This is handled by the background script\n      sendResponse({ success: true });\n      break;\n      \n    default:\n      // Unhandled message type\n      logger.info('Unhandled message type:', message.type);\n      sendResponse({ \n        success: false, \n        error: `Unhandled message type: ${message.type}` \n      });\n  }\n\n  return true; // Keep channel open for async response\n}\n\n/**\n * Handle messages from the page script\n * @param {MessageEvent} event Window message event\n */\nfunction handleWindowMessage(event: MessageEvent): void {\n  // Ensure message is from the same origin\n  if (event.source !== window) {\n    return;\n  }\n\n  const message = event.data;\n  \n  // Check if it's a message for our extension\n  if (typeof message !== 'object' || message === null || message.target !== 'paper_tracker_extension') {\n    return;\n  }\n\n  logger.info('Content script received window message:', message);\n\n  // Handle different action types\n  switch (message.action) {\n    case 'extractMetadata':\n      // Request the extractor from the background script\n      chrome.runtime.sendMessage({\n        type: 'getExtractorForUrl',\n        url: window.location.href\n      }, async (response) => {\n        if (response && response.success && response.extractorCode) {\n          try {\n            // Execute the extractor code\n            const metadata = await executeExtractor(response.extractorCode, window.location.href);\n            \n            // Send result back to the page\n            window.postMessage({\n              source: 'paper_tracker_extension',\n              response: 'extractMetadata',\n              success: true,\n              metadata\n            }, '*');\n          } catch (error) {\n            window.postMessage({\n              source: 'paper_tracker_extension',\n              response: 'extractMetadata',\n              success: false,\n              error: String(error)\n            }, '*');\n          }\n        } else {\n          window.postMessage({\n            source: 'paper_tracker_extension',\n            response: 'extractMetadata',\n            success: false,\n            error: response?.error || 'No extractor available'\n          }, '*');\n        }\n      });\n      break;\n\n    default:\n      logger.info('Unhandled window message action:', message.action);\n  }\n}\n\n/**\n * Execute extractor code in the content script context\n * @param {string} extractorCode Code to execute\n * @param {string} url Page URL\n * @returns {Promise<any>} Extracted metadata\n */\nasync function executeExtractor(extractorCode: string, url: string): Promise<any> {\n  try {\n    // Create a function from the extractor code string\n    const extractorFn = new Function('document', 'url', `\n      return (async function(document, url) {\n        ${extractorCode}\n      })(document, url);\n    `);\n    \n    // Execute the extractor function\n    const metadata = await extractorFn(document, url);\n    \n    if (metadata) {\n      logger.info(`Extracted metadata: ${metadata.title || 'Untitled'}`);\n      return metadata;\n    } else {\n      logger.warning('Extractor returned no metadata');\n      return null;\n    }\n  } catch (error) {\n    logger.error(`Error executing extractor: ${error}`);\n    throw error;\n  }\n}\n\n/**\n * Extract metadata from the current page\n * @returns {Promise<any>} Extracted metadata\n */\nexport async function extractCurrentPageMetadata(): Promise<any> {\n  return new Promise((resolve, reject) => {\n    chrome.runtime.sendMessage({\n      type: 'getExtractorForUrl',\n      url: window.location.href\n    }, async response => {\n      if (!response || !response.success || !response.extractorCode) {\n        return resolve(null);\n      }\n      \n      try {\n        const metadata = await executeExtractor(response.extractorCode, window.location.href);\n        resolve(metadata);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  });\n}\n\n/**\n * Report extracted metadata to the background script\n * @param {any} metadata Extracted metadata\n * @returns {Promise<boolean>} Success status\n */\nexport async function reportExtractedMetadata(metadata: any): Promise<boolean> {\n  return new Promise((resolve) => {\n    chrome.runtime.sendMessage({\n      type: 'metadataExtracted',\n      data: metadata\n    }, response => {\n      resolve(response && response.success);\n    });\n  });\n}\n","// extension/content/paper_overlay.ts\n// UI overlay for annotating papers\n\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('PaperOverlay');\n\n/**\n * Set up paper UI overlay \n */\nexport function setupPaperUIOverlay(): void {\n  logger.info('Setting up paper UI overlay');\n  \n  // Set up annotation for paper links\n  setupLinkAnnotation();\n  \n  // Set up floating action button for current page if it's a paper\n  checkCurrentPageForPaper();\n}\n\n/**\n * Set up annotation for paper links\n */\nfunction setupLinkAnnotation(): void {\n  // Process existing links\n  processExistingLinks();\n  \n  // Set up a MutationObserver to detect new links\n  const observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      // Process added nodes\n      mutation.addedNodes.forEach((node) => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          // Check if node is a link\n          if ((node as Element).tagName === 'A' && (node as HTMLAnchorElement).href) {\n            processLink(node as HTMLAnchorElement);\n          }\n          \n          // Check for links within the node\n          (node as Element).querySelectorAll('a[href]').forEach((link) => {\n            processLink(link as HTMLAnchorElement);\n          });\n        }\n      });\n    });\n  });\n  \n  // Start observing the document\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n}\n\n/**\n * Process existing links in the document\n */\nfunction processExistingLinks(): void {\n  document.querySelectorAll('a[href]').forEach((link) => {\n    processLink(link as HTMLAnchorElement);\n  });\n}\n\n/**\n * Process a link to see if it's a paper link\n * @param link Link element to process\n */\nfunction processLink(link: HTMLAnchorElement): void {\n  // Skip if already processed\n  if (link.classList.contains('paper-processed')) {\n    return;\n  }\n  \n  link.classList.add('paper-processed');\n  \n  // Use isPaperUrl from the paperTracker API\n  window.paperTracker.isPaperUrl(link.href)\n    .then((isPaper: boolean) => {\n      if (isPaper) {\n        // Add paper indicator icon\n        addPaperIndicator(link);\n      }\n    })\n    .catch((error: Error) => {\n      logger.error(`Error checking if URL is paper: ${error}`);\n    });\n}\n\n/**\n * Add paper indicator icon to a link\n * @param link Link element to annotate\n */\nfunction addPaperIndicator(link: HTMLAnchorElement): void {\n  // Create indicator element\n  const indicator = document.createElement('span');\n  indicator.className = 'paper-indicator';\n  indicator.title = 'Academic paper - Click to track';\n  \n  // Add click handler\n  indicator.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Track the paper\n    window.paperTracker.trackPaper(link.href);\n    \n    // Show feedback\n    showTrackingFeedback(indicator);\n  });\n  \n  // Insert after the link\n  link.parentNode?.insertBefore(indicator, link.nextSibling);\n}\n\n/**\n * Show feedback when a paper is tracked\n * @param element Element to show feedback on\n */\nfunction showTrackingFeedback(element: HTMLElement): void {\n  // Add success class for animation\n  element.classList.add('tracked');\n  \n  // Create tooltip\n  const tooltip = document.createElement('div');\n  tooltip.className = 'paper-tooltip';\n  tooltip.textContent = 'Paper tracked!';\n  \n  // Position tooltip\n  const rect = element.getBoundingClientRect();\n  tooltip.style.top = `${rect.top - 30}px`;\n  tooltip.style.left = `${rect.left}px`;\n  \n  // Add to document\n  document.body.appendChild(tooltip);\n  \n  // Remove after animation\n  setTimeout(() => {\n    tooltip.remove();\n    element.classList.remove('tracked');\n  }, 2000);\n}\n\n/**\n * Check if the current page is a paper and add UI if needed\n */\nfunction checkCurrentPageForPaper(): void {\n  // Use extractMetadata from the paperTracker API\n  window.paperTracker.extractMetadata()\n    .then((metadata: any) => {\n      if (metadata) {\n        logger.info('Current page is a paper. Adding overlay UI');\n        addPageOverlay(metadata);\n      }\n    })\n    .catch((error: Error) => {\n      logger.error(`Error checking if current page is paper: ${error}`);\n    });\n}\n\n/**\n * Add overlay UI to the current page\n * @param metadata Paper metadata\n */\nfunction addPageOverlay(metadata: any): void {\n  // Create a floating action button\n  const fab = document.createElement('div');\n  fab.className = 'paper-fab';\n  fab.title = 'Paper actions';\n  \n  // Add icon\n  const icon = document.createElement('span');\n  icon.className = 'paper-fab-icon';\n  icon.textContent = '📝';\n  fab.appendChild(icon);\n  \n  // Add click handler\n  fab.addEventListener('click', () => {\n    // Toggle popup\n    if (document.querySelector('.paper-action-popup')) {\n      removeActionPopup();\n    } else {\n      showActionPopup(fab, metadata);\n    }\n  });\n  \n  // Add to document\n  document.body.appendChild(fab);\n}\n\n/**\n * Show action popup with paper information\n * @param trigger Trigger element\n * @param metadata Paper metadata\n */\nfunction showActionPopup(trigger: HTMLElement, metadata: any): void {\n  // Create popup\n  const popup = document.createElement('div');\n  popup.className = 'paper-action-popup';\n  \n  // Add content\n  popup.innerHTML = `\n    <div class=\"paper-popup-header\">\n      <div class=\"paper-popup-title\">${metadata.title || 'Untitled Paper'}</div>\n      <div class=\"paper-popup-source\">${getSourceLabel(metadata.source)}</div>\n    </div>\n    <div class=\"paper-popup-authors\">${metadata.authors || ''}</div>\n    ${metadata.abstract ? `<div class=\"paper-popup-abstract\">${metadata.abstract}</div>` : ''}\n    <div class=\"paper-popup-actions\">\n      <button class=\"paper-action-button\" data-action=\"rate-up\">👍 Interesting</button>\n      <button class=\"paper-action-button\" data-action=\"rate-down\">👎 Not interesting</button>\n    </div>\n    <textarea class=\"paper-notes\" placeholder=\"Add notes...\"></textarea>\n    <button class=\"paper-save-button\">Save</button>\n  `;\n  \n  // Position popup\n  const rect = trigger.getBoundingClientRect();\n  popup.style.bottom = `${window.innerHeight - rect.top + 10}px`;\n  popup.style.right = `${window.innerWidth - rect.right + 10}px`;\n  \n  // Add to document\n  document.body.appendChild(popup);\n  \n  // Add event listeners\n  popup.querySelector('.paper-save-button')?.addEventListener('click', () => {\n    const notes = (popup.querySelector('.paper-notes') as HTMLTextAreaElement).value;\n    if (notes) {\n      saveNotes(metadata, notes);\n    }\n    \n    // Close popup\n    removeActionPopup();\n  });\n  \n  // Add rating buttons handlers\n  popup.querySelectorAll('.paper-action-button').forEach(button => {\n    button.addEventListener('click', () => {\n      const action = (button as HTMLElement).dataset.action;\n      if (action === 'rate-up') {\n        rateCurrentPaper('thumbsup');\n      } else if (action === 'rate-down') {\n        rateCurrentPaper('thumbsdown');\n      }\n      \n      // Mark button as active\n      popup.querySelectorAll('.paper-action-button').forEach(b => \n        b.classList.remove('active'));\n      button.classList.add('active');\n    });\n  });\n  \n  // Close on outside click\n  document.addEventListener('click', outsideClickHandler);\n}\n\n/**\n * Remove action popup\n */\nfunction removeActionPopup(): void {\n  document.querySelector('.paper-action-popup')?.remove();\n  document.removeEventListener('click', outsideClickHandler);\n}\n\n/**\n * Handle clicks outside the popup\n */\nfunction outsideClickHandler(e: MouseEvent): void {\n  const popup = document.querySelector('.paper-action-popup');\n  const fab = document.querySelector('.paper-fab');\n  \n  if (popup && fab && !popup.contains(e.target as Node) && !fab.contains(e.target as Node)) {\n    removeActionPopup();\n  }\n}\n\n/**\n * Save notes for the current paper\n * @param metadata Paper metadata\n * @param notes Notes to save\n */\nfunction saveNotes(metadata: any, notes: string): void {\n  chrome.runtime.sendMessage({\n    type: 'updateAnnotation',\n    annotationType: 'notes',\n    data: {\n      paperId: metadata.primary_id,\n      source: metadata.source,\n      notes,\n      title: metadata.title\n    }\n  }, response => {\n    if (response && response.success) {\n      showSaveSuccess();\n    }\n  });\n}\n\n/**\n * Rate the current paper\n * @param rating Rating value\n */\nfunction rateCurrentPaper(rating: string): void {\n  chrome.runtime.sendMessage({\n    type: 'updateRating',\n    rating\n  }, response => {\n    if (response && response.success) {\n      showSaveSuccess();\n    }\n  });\n}\n\n/**\n * Show save success message\n */\nfunction showSaveSuccess(): void {\n  // Create toast\n  const toast = document.createElement('div');\n  toast.className = 'paper-toast';\n  toast.textContent = 'Saved successfully!';\n  \n  // Add to document\n  document.body.appendChild(toast);\n  \n  // Remove after animation\n  setTimeout(() => {\n    toast.remove();\n  }, 3000);\n}\n\n/**\n * Get a human-readable label for a source\n * @param source Paper source type\n * @returns Human-readable label\n */\nfunction getSourceLabel(source: string): string {\n  const labels: Record<string, string> = {\n    'arxiv': 'arXiv',\n    'semanticscholar': 'Semantic Scholar',\n    'doi': 'DOI',\n    'acm': 'ACM Digital Library',\n    'openreview': 'OpenReview'\n  };\n  \n  return labels[source] || source.charAt(0).toUpperCase() + source.slice(1);\n}\n","// content/metadata_fetcher.ts - Fetch paper metadata from services\n\n/**\n * Paper metadata interface\n */\nexport interface PaperMetadata {\n  title?: string;\n  authors?: string;\n  abstract?: string;\n  url?: string;\n  source?: string;\n  id?: string;\n  primary_id?: string;\n  [key: string]: any;\n}\n\n/**\n * Cache for paper metadata to avoid repeated API calls\n */\nconst metadataCache = new Map<string, PaperMetadata>();\n\n/**\n * Fetch paper metadata from APIs or background service\n * @param {string} source Paper source type\n * @param {string} id Paper ID\n * @returns {Promise<PaperMetadata>} Paper metadata\n */\nexport async function fetchPaperMetadata(source: string, id: string): Promise<PaperMetadata> {\n  // Create cache key\n  const cacheKey = `${source}:${id}`;\n  \n  // Check cache first\n  if (metadataCache.has(cacheKey)) {\n    return metadataCache.get(cacheKey)!;\n  }\n  \n  try {\n    // Try to get metadata from the extension's background script first\n    const backgroundMetadata = await getMetadataFromBackground(source, id);\n    \n    if (backgroundMetadata) {\n      // Cache the result\n      metadataCache.set(cacheKey, backgroundMetadata);\n      return backgroundMetadata;\n    }\n\n    // Fall back to directly fetching from APIs\n    let metadata: PaperMetadata;\n    \n    switch (source) {\n      case 'arxiv':\n        metadata = await fetchArxivMetadata(id);\n        break;\n      case 'semanticscholar':\n        metadata = await fetchSemanticScholarMetadata(id);\n        break;\n      case 'openreview':\n        metadata = await fetchOpenReviewMetadata(id);\n        break;\n      default:\n        // For other sources, use minimal data\n        metadata = {\n          title: `${source.toUpperCase()} Paper: ${id}`,\n          id: id,\n          source: source\n        };\n    }\n    \n    // Cache and return the result\n    metadataCache.set(cacheKey, metadata);\n    return metadata;\n  } catch (error) {\n    console.error(`Error fetching metadata for ${source}:${id}:`, error);\n    \n    // Return minimal metadata on error\n    return {\n      title: `${source.toUpperCase()} Paper: ${id}`,\n      id: id,\n      source: source\n    };\n  }\n}\n\n/**\n * Get metadata from background script\n * @param {string} source Paper source\n * @param {string} id Paper ID\n * @returns {Promise<PaperMetadata|null>} Paper metadata or null\n */\nasync function getMetadataFromBackground(source: string, id: string): Promise<PaperMetadata | null> {\n  return new Promise(resolve => {\n    chrome.runtime.sendMessage({\n      type: 'getPaperMetadata',\n      source: source,\n      id: id\n    }, (response) => {\n      // Check if we got valid metadata\n      if (response && response.title) {\n        resolve(response);\n      } else {\n        resolve(null);\n      }\n    });\n  });\n}\n\n/**\n * Fetch arXiv metadata from the arXiv API\n * @param {string} id arXiv paper ID\n * @returns {Promise<PaperMetadata>} Paper metadata\n */\nasync function fetchArxivMetadata(id: string): Promise<PaperMetadata> {\n  try {\n    const apiUrl = `https://export.arxiv.org/api/query?id_list=${id}`;\n    const response = await fetch(apiUrl);\n    \n    if (!response.ok) {\n      throw new Error(`arXiv API error: ${response.status}`);\n    }\n    \n    const text = await response.text();\n    \n    // Extract data using regex since we're in content script\n    // (DOMParser is available but a little more complex to handle)\n    const titleMatch = text.match(/<title>(.*?)<\\/title>/);\n    const authorsMatch = text.match(/<author>(.*?)<\\/author>/g);\n    const summaryMatch = text.match(/<summary>(.*?)<\\/summary>/s);\n    \n    const title = titleMatch ? titleMatch[1].trim() : `arXiv Paper: ${id}`;\n    \n    // Process authors\n    let authors = '';\n    if (authorsMatch) {\n      const authorNames = authorsMatch.map(authorTag => {\n        const nameMatch = authorTag.match(/<name>(.*?)<\\/name>/);\n        return nameMatch ? nameMatch[1].trim() : '';\n      }).filter(Boolean);\n      \n      authors = authorNames.join(', ');\n    }\n    \n    const abstract = summaryMatch ? summaryMatch[1].trim() : '';\n    \n    return {\n      title,\n      authors,\n      abstract,\n      id,\n      source: 'arxiv',\n      url: `https://arxiv.org/abs/${id}`\n    };\n  } catch (error) {\n    console.error('Error fetching arXiv metadata:', error);\n    return {\n      title: `arXiv Paper: ${id}`,\n      id,\n      source: 'arxiv',\n      url: `https://arxiv.org/abs/${id}`\n    };\n  }\n}\n\n/**\n * Fetch Semantic Scholar metadata\n * @param {string} id Semantic Scholar paper ID\n * @returns {Promise<PaperMetadata>} Paper metadata\n */\nasync function fetchSemanticScholarMetadata(id: string): Promise<PaperMetadata> {\n  try {\n    const apiUrl = `https://api.semanticscholar.org/v1/paper/${id}`;\n    const response = await fetch(apiUrl);\n    \n    if (!response.ok) {\n      throw new Error(`Semantic Scholar API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Extract authors as a string\n    const authors = data.authors\n      ? data.authors.map((author: { name: string }) => author.name).join(', ')\n      : '';\n    \n    return {\n      title: data.title || `Semantic Scholar Paper: ${id}`,\n      authors,\n      abstract: data.abstract || '',\n      id,\n      source: 'semanticscholar',\n      url: `https://www.semanticscholar.org/paper/${id}`,\n      year: data.year,\n      citationCount: data.citationCount\n    };\n  } catch (error) {\n    console.error('Error fetching Semantic Scholar metadata:', error);\n    return {\n      title: `Semantic Scholar Paper: ${id}`,\n      id,\n      source: 'semanticscholar',\n      url: `https://www.semanticscholar.org/paper/${id}`\n    };\n  }\n}\n\n/**\n * Fetch OpenReview metadata\n * @param {string} id OpenReview paper ID\n * @returns {Promise<PaperMetadata>} Paper metadata\n */\nasync function fetchOpenReviewMetadata(id: string): Promise<PaperMetadata> {\n  try {\n    const apiUrl = `https://api.openreview.net/notes?id=${id}`;\n    const response = await fetch(apiUrl);\n    \n    if (!response.ok) {\n      throw new Error(`OpenReview API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Check if we have valid data\n    if (data.notes && data.notes.length > 0) {\n      const note = data.notes[0];\n      const content = note.content || {};\n      \n      // Handle different content structures\n      const getContentValue = (field: string): any => {\n        if (!content[field]) return '';\n        return typeof content[field] === 'object' && 'value' in content[field]\n          ? content[field].value\n          : content[field];\n      };\n      \n      // Get title\n      const title = getContentValue('title') || `OpenReview Paper: ${id}`;\n      \n      // Handle authors (could be in different formats)\n      let authors = '';\n      const authorsData = getContentValue('authors');\n      if (Array.isArray(authorsData)) {\n        authors = authorsData.join(', ');\n      } else if (typeof authorsData === 'string') {\n        authors = authorsData;\n      }\n      \n      // Get abstract\n      const abstract = getContentValue('abstract') || '';\n      \n      return {\n        title,\n        authors,\n        abstract,\n        id,\n        source: 'openreview',\n        url: `https://openreview.net/forum?id=${id}`,\n        venue: getContentValue('venue') || note.venue,\n        forum_id: note.forum\n      };\n    }\n    \n    // If no valid data found\n    return {\n      title: `OpenReview Paper: ${id}`,\n      id,\n      source: 'openreview',\n      url: `https://openreview.net/forum?id=${id}`\n    };\n  } catch (error) {\n    console.error('Error fetching OpenReview metadata:', error);\n    return {\n      title: `OpenReview Paper: ${id}`,\n      id,\n      source: 'openreview',\n      url: `https://openreview.net/forum?id=${id}`\n    };\n  }\n}\n","// content/annotator.ts - Paper annotation UI components and functionality\n\nimport { fetchPaperMetadata } from './metadata_fetcher';\nimport { getSourceLabel, formatPrimaryId } from './paper_detector';\n\n/**\n * Paper metadata from API\n */\ninterface PaperMetadata {\n  title?: string;\n  authors?: string;\n  abstract?: string;\n  [key: string]: any;\n}\n\n/**\n * Create a wrapper element for the popup\n * @returns {HTMLElement} Popup wrapper element\n */\nexport function createPopupWrapper(): HTMLElement {\n  const wrapper = document.createElement('div');\n  wrapper.className = 'paper-popup-container';\n  wrapper.style.position = 'relative';\n  return wrapper;\n}\n\n/**\n * Create popup element for paper annotation\n * @param {string} source Paper source\n * @param {string} id Paper ID\n * @param {string} initialTitle Optional initial title\n * @returns {Promise<HTMLElement>} Popup element\n */\nexport async function createPopup(\n  source: string, \n  id: string, \n  initialTitle = ''\n): Promise<HTMLElement> {\n  console.log(`Creating popup for ${source}:${id}`);\n  \n  // Calculate the standardized primary ID\n  const primary_id = formatPrimaryId(source, id);\n  \n  // Fetch metadata\n  const metadata = await fetchPaperMetadata(source, id);\n  console.log('Fetched metadata:', metadata);\n\n  // Create the popup element\n  const popup = document.createElement('div');\n  popup.className = 'paper-popup';\n  \n  // Add enhanced styles\n  Object.assign(popup.style, {\n    position: 'absolute',\n    zIndex: '10000',\n    background: 'white',\n    border: '1px solid #ccc',\n    borderRadius: '4px',\n    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',\n    padding: '12px',\n    width: '300px',\n    maxWidth: '90vw',\n    fontSize: '14px',\n    fontFamily: 'system-ui, sans-serif'\n  });\n  \n  // Create popup content\n  popup.innerHTML = `\n    <div class=\"paper-popup-source source-${source}\" style=\"\n      display: inline-block;\n      font-size: 11px;\n      border-radius: 4px;\n      padding: 2px 6px;\n      margin-bottom: 10px;\n      color: white;\n      font-weight: 500;\n      background-color: ${getSourceColor(source)};\n    \">${getSourceLabel(source)}</div>\n    <div class=\"paper-popup-header\" style=\"\n      font-weight: bold;\n      margin-bottom: 8px;\n      font-size: 14px;\n      line-height: 1.4;\n    \">${metadata?.title || initialTitle || id}</div>\n    <div class=\"paper-popup-meta\" style=\"\n      font-size: 12px;\n      color: #666;\n      margin-bottom: 12px;\n      line-height: 1.4;\n    \">${metadata?.authors || ''}</div>\n    <div class=\"paper-popup-buttons\" style=\"\n      display: flex;\n      gap: 10px;\n      margin-bottom: 10px;\n    \">\n      <button class=\"vote-button\" data-vote=\"thumbsup\" style=\"\n        flex: 1;\n        padding: 8px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: #f5f5f5;\n        cursor: pointer;\n      \">👍 Interesting</button>\n      <button class=\"vote-button\" data-vote=\"thumbsdown\" style=\"\n        flex: 1;\n        padding: 8px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: #f5f5f5;\n        cursor: pointer;\n      \">👎 Not Relevant</button>\n    </div>\n    <textarea placeholder=\"Add notes...\" style=\"\n      width: 100%;\n      min-height: 80px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      box-sizing: border-box;\n      font-family: inherit;\n      font-size: 13px;\n      margin-bottom: 10px;\n      resize: vertical;\n    \"></textarea>\n    <div class=\"paper-popup-actions\" style=\"\n      display: flex;\n      justify-content: flex-end;\n    \">\n      <button class=\"save-button\" style=\"\n        padding: 8px 16px;\n        border: none;\n        border-radius: 4px;\n        background: #0366d6;\n        color: white;\n        cursor: pointer;\n        font-weight: 500;\n      \">Save</button>\n    </div>\n  `;\n\n  // Add event listeners for voting\n  popup.querySelectorAll('.vote-button').forEach(button => {\n    button.addEventListener('click', () => {\n      popup.querySelectorAll('.vote-button').forEach(b => {\n        (b as HTMLElement).style.background = '#f5f5f5';\n        (b as HTMLElement).style.borderColor = '#ddd';\n        b.classList.remove('active');\n      });\n      \n      button.classList.add('active');\n      (button as HTMLElement).style.background = '#e0f7fa';\n      (button as HTMLElement).style.borderColor = '#4dd0e1';\n    });\n  });\n\n  // Add event listener for save button\n  const saveButton = popup.querySelector('.save-button');\n  \n  if (saveButton) {\n    saveButton.addEventListener('click', () => {\n      const vote = popup.querySelector('.vote-button.active')?.getAttribute('data-vote');\n      const notes = (popup.querySelector('textarea') as HTMLTextAreaElement).value;\n      \n      // Format data for the background script with primary_id\n      if (vote || notes) {\n        chrome.runtime.sendMessage({\n          type: 'updateAnnotation',\n          annotationType: notes ? 'notes' : 'vote',\n          data: {\n            paperId: primary_id, // Use the formatted primary ID\n            source: source,\n            vote,\n            notes,\n            title: metadata?.title,\n            authors: metadata?.authors,\n            abstract: metadata?.abstract,\n            timestamp: new Date().toISOString()\n          }\n        }, (response) => {\n          console.log('Annotation saved:', response);\n          \n          // Add success feedback\n          const feedbackEl = document.createElement('div');\n          feedbackEl.textContent = 'Saved successfully!';\n          feedbackEl.style.color = '#4CAF50';\n          feedbackEl.style.padding = '8px';\n          feedbackEl.style.textAlign = 'center';\n          feedbackEl.style.fontWeight = 'bold';\n          \n          const actionsContainer = popup.querySelector('.paper-popup-actions');\n          if (actionsContainer) {\n            actionsContainer.parentElement!.insertBefore(feedbackEl, actionsContainer);\n          }\n          \n          // Remove the popup after a delay\n          setTimeout(() => {\n            popup.parentElement?.remove();\n          }, 1500);\n        });\n      }\n    });\n  }\n\n  // Store source info on the popup element - use simple property access\n  // Use Object.defineProperties to attach properties\n  Object.defineProperties(popup, {\n    paperSource: {\n      value: source,\n      writable: true,\n      enumerable: true\n    },\n    paperId: {\n      value: id,\n      writable: true,\n      enumerable: true\n    },\n    primary_id: {\n      value: primary_id,\n      writable: true,\n      enumerable: true\n    }\n  });\n  \n  return popup;\n}\n\n/**\n * Get color for source branding\n * @param {string} source Source type\n * @returns {string} CSS color\n */\nfunction getSourceColor(source: string): string {\n  const colors: Record<string, string> = {\n    'arxiv': '#B31B1B',\n    'semanticscholar': '#2e7d32',\n    'doi': '#0277bd',\n    'acm': '#0277bd',\n    'openreview': '#6d4c41'\n  };\n  \n  return colors[source] || '#666666';\n}\n\n/**\n * Initialize annotator module\n */\nexport function initializeAnnotator(): void {\n  console.log('Initializing paper annotator module');\n  \n  // CSS is now imported in index.ts via import './styles.css'\n  // which is more maintainable than injecting it here\n  \n  // Initialize any event listeners or other setup needed\n  document.addEventListener('click', (e) => {\n    // Close popups when clicking outside them\n    if (\n      e.target && \n      !(e.target as HTMLElement).closest('.paper-popup') && \n      !(e.target as HTMLElement).closest('.paper-annotator')\n    ) {\n      // Get all popup containers and remove them\n      document.querySelectorAll('.paper-popup-container').forEach(container => {\n        if (container.contains(document.activeElement)) {\n          // Don't remove if it contains the active element (like a focused textarea)\n          return;\n        }\n        container.remove();\n      });\n    }\n  });\n}\n","// extension/content/paper_detector.ts - Paper link detection and processing\n\nimport { fetchPaperMetadata } from './metadata_fetcher';\nimport { createPopup, createPopupWrapper } from './annotator';\nimport { SourceInfo } from '../types/common'; // Import from common types\n\n// Reference to active popup\nlet activePopup: HTMLElement | null = null;\n\n/**\n * Format a primary ID properly using a consistent approach\n * @param {string} source Source type (e.g., 'arxiv', 'doi')\n * @param {string} id Original ID from the source\n * @returns {string} Formatted primary ID\n */\nexport function formatPrimaryId(source: string, id: string): string {\n  // Sanitize the ID by replacing problematic characters\n  const safeId = id\n    .replace(/\\//g, '_')\n    .replace(/:/g, '.')\n    .replace(/\\s/g, '_')\n    .replace(/\\\\/g, '_');\n  \n  return `${source}.${safeId}`;\n}\n\n/**\n * Get a human-readable label for a source\n * @param {string} source Source type identifier\n * @returns {string} Human-readable label\n */\nexport function getSourceLabel(source: string): string {\n  const labels: Record<string, string> = {\n    'arxiv': 'arXiv',\n    'semanticscholar': 'Semantic Scholar',\n    'doi': 'DOI',\n    'acm': 'ACM Digital Library',\n    'openreview': 'OpenReview'\n  };\n  \n  return labels[source] || source.charAt(0).toUpperCase() + source.slice(1);\n}\n\n/**\n * Paper sources configuration\n */\nconst PAPER_SOURCES = [\n  {\n    type: 'arxiv',\n    urlPatterns: [\n      /arxiv\\.org\\/abs\\/([0-9.]+)(v[0-9]+)?/,\n      /arxiv\\.org\\/pdf\\/([0-9.]+)(v[0-9]+)?\\.pdf/\n    ],\n    getIdFromMatch: (match: RegExpMatchArray) => match[1] + (match[2] || '')\n  },\n  {\n    type: 'semanticscholar',\n    urlPatterns: [\n      /semanticscholar\\.org\\/paper\\/([a-f0-9]+)/,\n      /s2-research\\.org\\/papers\\/([a-f0-9]+)/\n    ],\n    getIdFromMatch: (match: RegExpMatchArray) => match[1]\n  },\n  {\n    type: 'doi',\n    urlPatterns: [\n      /doi\\.org\\/(10\\.[0-9.]+\\/[^\\s&\\/?#]+[^\\s&\\/?#.:])/\n    ],\n    getIdFromMatch: (match: RegExpMatchArray) => match[1]\n  },\n  {\n    type: 'acm',\n    urlPatterns: [\n      /dl\\.acm\\.org\\/doi\\/(10\\.[0-9.]+\\/[^\\s&\\/?#]+[^\\s&\\/?#.:])/\n    ],\n    getIdFromMatch: (match: RegExpMatchArray) => match[1]\n  },\n  {\n    type: 'openreview',\n    urlPatterns: [\n      /openreview\\.net\\/forum\\?id=([a-zA-Z0-9_\\-]+)/,\n      /openreview\\.net\\/pdf\\?id=([a-zA-Z0-9_\\-]+)/\n    ],\n    getIdFromMatch: (match: RegExpMatchArray) => match[1]\n  }\n];\n\n/**\n * Detect paper source and ID from URL\n * @param {string} url URL to check for paper identifiers\n * @returns {SourceInfo|null} Source information or null if not a paper URL\n */\nexport function detectPaperSource(url: string): SourceInfo | null {\n  // Check each source type\n  for (const source of PAPER_SOURCES) {\n    for (let i = 0; i < source.urlPatterns.length; i++) {\n      const match = url.match(source.urlPatterns[i]);\n      if (match) {\n        const id = source.getIdFromMatch(match);\n        const primary_id = formatPrimaryId(source.type, id);\n        return {\n          type: source.type,\n          id: id,\n          primary_id: primary_id, // Include primary_id to match common.ts SourceInfo\n          url: url\n        };\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Process paper link and add annotation functionality\n * @param {HTMLAnchorElement} link Link element to process\n */\nexport async function processPaperLink(link: HTMLAnchorElement): Promise<void> {\n  // Skip if already processed\n  if (link.classList.contains('paper-processed')) return;\n  link.classList.add('paper-processed');\n\n  // Detect paper source from URL\n  const sourceInfo = detectPaperSource(link.href);\n  if (!sourceInfo) return;\n  \n  const { type: source, id } = sourceInfo;\n\n  // Create annotator button with source-specific class\n  const annotator = document.createElement('span');\n  annotator.className = `paper-annotator annotator-${source}`;\n  annotator.title = `Add ${getSourceLabel(source)} annotation`;\n  \n  // Update the click handler\n  annotator.addEventListener('click', async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  \n    // Remove existing popup if any\n    if (activePopup) {\n      activePopup.parentElement?.remove(); // Remove the wrapper\n      if (\n        // Access properties directly - they're properly defined \n        // on the HTMLElement with Object.defineProperties\n        activePopup.hasOwnProperty('paperSource') && \n        activePopup.hasOwnProperty('paperId') &&\n        (activePopup as any).paperSource === source && \n        (activePopup as any).paperId === id\n      ) {\n        activePopup = null;\n        return;\n      }\n    }\n  \n    // Create popup\n    const popup = await createPopup(source, id);\n    \n    // Create wrapper and add popup to it\n    const wrapper = createPopupWrapper();\n    wrapper.appendChild(popup);\n    \n    // Position popup relative to annotator\n    const annotatorRect = annotator.getBoundingClientRect();\n    const available_width = window.innerWidth - annotatorRect.left;\n    \n    if (available_width < 320) { // if not enough space on right\n      popup.style.right = '0';  // align to right edge\n      popup.style.left = 'auto';\n    } else {\n      popup.style.left = '0';\n    }\n    popup.style.top = `${annotatorRect.height + 5}px`;\n    \n    // Add to page and store reference\n    annotator.parentNode!.insertBefore(wrapper, annotator.nextSibling);\n    activePopup = popup;\n  });\n  \n  // Add to page\n  link.parentNode!.insertBefore(annotator, link.nextSibling);\n}\n\n/**\n * Track a paper via the background script\n * @param {string} url Paper URL to track\n */\nexport function trackPaper(url: string): void {\n  const sourceInfo = detectPaperSource(url);\n  if (!sourceInfo) {\n    console.log('Not a recognized paper URL:', url);\n    return;\n  }\n  \n  // Get the page title if possible\n  const title = document.title || `${sourceInfo.type.toUpperCase()} Paper: ${sourceInfo.id}`;\n  \n  // Send message to background script with proper data format\n  chrome.runtime.sendMessage({\n    type: 'trackPaper',\n    source: sourceInfo.type,\n    id: sourceInfo.id,\n    url: url,\n    title: title\n  }, (response) => {\n    console.log('Paper tracking result:', response);\n  });\n}\n\n/**\n * Setup automatic link detection on page\n */\nexport function setupLinkDetection(): void {\n  // Process existing links\n  document.querySelectorAll('a[href]').forEach(link => {\n    processPaperLink(link as HTMLAnchorElement);\n  });\n  \n  // Set up a MutationObserver to detect new links\n  const observer = new MutationObserver(mutations => {\n    mutations.forEach(mutation => {\n      // Process added nodes\n      mutation.addedNodes.forEach(node => {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          // Check if node is a link\n          if ((node as Element).tagName === 'A' && (node as HTMLAnchorElement).href) {\n            processPaperLink(node as HTMLAnchorElement);\n          }\n          \n          // Check for links within the node\n          (node as Element).querySelectorAll('a[href]').forEach(link => {\n            processPaperLink(link as HTMLAnchorElement);\n          });\n        }\n      });\n    });\n  });\n  \n  // Start observing the document\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n}\n","// extension/content/index.ts\n// Main entry point for content script using the plugin system\n\nimport { loguru } from '../utils/logger';\nimport { initializeMessageHandlers, extractCurrentPageMetadata, reportExtractedMetadata } from './message_handlers';\nimport { setupPaperUIOverlay } from './paper_overlay';\nimport { detectPaperSource, processPaperLink } from './paper_detector';\nimport { fetchPaperMetadata } from './metadata_fetcher';\nimport './styles.css';\n\nconst logger = loguru.getLogger('ContentScript');\n\n/**\n * Initialize the content script\n */\nfunction initialize(): void {\n  logger.info('Academic Paper Tracker content script initialized');\n  \n  // Initialize message handlers\n  initializeMessageHandlers();\n  \n  // Set up paper UI overlay (annotations, etc.)\n  setupPaperUIOverlay();\n  \n  // Analyze the current page\n  analyzeCurrentPage();\n  \n  // Expose global functions for API access\n  exposeGlobalFunctions();\n}\n\n/**\n * Analyze the current page for paper metadata\n */\nasync function analyzeCurrentPage(): Promise<void> {\n  try {\n    logger.info(`Analyzing current page: ${window.location.href}`);\n    \n    // Try to extract metadata from the current page\n    const metadata = await extractCurrentPageMetadata();\n    \n    if (metadata) {\n      logger.info(`Extracted metadata: ${metadata.title || 'Untitled'}`);\n      \n      // Report extracted metadata to background script\n      const success = await reportExtractedMetadata(metadata);\n      \n      if (success) {\n        logger.info('Successfully processed paper metadata');\n      } else {\n        logger.warning('Failed to process paper metadata');\n      }\n    } else {\n      logger.info('Current page is not a recognized paper or metadata extraction failed');\n    }\n  } catch (error) {\n    logger.error(`Error analyzing current page: ${error}`);\n  }\n}\n\n/**\n * Expose critical functions to window for API access\n */\nfunction exposeGlobalFunctions(): void {\n  const paperTracker = {\n    // Import functions directly from their modules\n    detectPaperSource,\n    fetchPaperMetadata,\n    processPaperLink,\n    \n    // Extract metadata from the current page\n    extractMetadata: async () => {\n      try {\n        const metadata = await extractCurrentPageMetadata();\n        return metadata;\n      } catch (error) {\n        logger.error(`Error extracting metadata: ${error}`);\n        return null;\n      }\n    },\n    \n    // Track a paper URL\n    trackPaper: (url: string) => {\n      chrome.runtime.sendMessage({\n        type: 'trackPaper',\n        url: url\n      }, response => {\n        if (response && response.success) {\n          logger.info(`Paper tracked: ${response.paperData?.title || url}`);\n        } else {\n          logger.warning(`Failed to track paper: ${response?.error || 'Unknown error'}`);\n        }\n      });\n    },\n    \n    // Check if a URL is a supported paper source\n    isPaperUrl: async (url: string): Promise<boolean> => {\n      return new Promise(resolve => {\n        chrome.runtime.sendMessage({\n          type: 'detectPaperSource',\n          url: url\n        }, response => {\n          resolve(response && response.success && response.detected);\n        });\n      });\n    }\n  };\n  \n  // Expose the API\n  window.paperTracker = paperTracker;\n  \n  // Legacy support for direct trackPaper function\n  window.trackPaper = paperTracker.trackPaper;\n}\n\n// Run initialization when DOM is fully loaded\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initialize);\n} else {\n  // DOM is already loaded, initialize immediately\n  initialize();\n}\n"],"names":["logger","getSourceLabel"],"mappings":"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"}