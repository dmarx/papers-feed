{"version":3,"file":"arxiv_plugin-Br5PaNkc.js","sources":["../../papers/plugins/sources/arxiv_plugin.ts"],"sourcesContent":["// extension/papers/plugins/sources/arxiv_plugin.ts\n\nimport { SourcePlugin } from '../source_plugin';\nimport { UnifiedPaperData } from '../../types';\nimport { loguru } from '../../../utils/logger';\n\nconst logger = loguru.getLogger('ArXivPlugin');\n\nexport const arxivPlugin: SourcePlugin = {\n  id: 'arxiv',\n  name: 'arXiv',\n  description: 'Support for arXiv papers',\n  version: '1.0.0',\n  \n  urlPatterns: [\n    /arxiv\\.org\\/abs\\/([0-9.]+)(v[0-9]+)?/,\n    /arxiv\\.org\\/pdf\\/([0-9.]+)(v[0-9]+)?\\.pdf/,\n    /arxiv\\.org\\/[a-z]+\\/([0-9.]+)(v[0-9]+)?/\n  ],\n  \n  extractId(url: string): string | null {\n    for (const pattern of this.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        // Include version if available\n        return match[1] + (match[2] || '');\n      }\n    }\n    return null;\n  },\n  \n  async extractMetadata(document: Document, url: string): Promise<Partial<UnifiedPaperData>> {\n    logger.info(`Extracting metadata from ${url}`);\n    \n    try {\n      // Extract from page metadata\n      const getMetaContent = (selector: string): string | undefined => {\n        const element = document.querySelector(selector);\n        return element && 'content' in element ? \n          (element as HTMLMetaElement).content : undefined;\n      };\n      \n      // Try to extract title and authors\n      let title = document.querySelector('.title')?.textContent?.trim();\n      if (title?.startsWith('Title:')) {\n        title = title.substring(6).trim();\n      }\n      \n      // Extract authors\n      let authors = '';\n      const authorElements = document.querySelectorAll('.authors a');\n      if (authorElements.length > 0) {\n        authors = Array.from(authorElements)\n          .map(el => el.textContent?.trim())\n          .filter(Boolean)\n          .join(', ');\n      }\n      \n      // Extract abstract\n      let abstract = document.querySelector('.abstract')?.textContent?.trim();\n      if (abstract?.startsWith('Abstract:')) {\n        abstract = abstract.substring(9).trim();\n      }\n      \n      // Extract categories\n      const categories: string[] = [];\n      const categoryElements = document.querySelectorAll('.subjects .tag');\n      categoryElements.forEach(el => {\n        const text = el.textContent?.trim();\n        if (text) categories.push(text);\n      });\n      \n      return {\n        title: title || '',\n        authors: authors || '',\n        abstract: abstract || '',\n        arxiv_tags: categories\n      };\n    } catch (error) {\n      logger.error('Error extracting metadata from arXiv page', error);\n      return {};\n    }\n  },\n  \n  hasApi: true,\n  \n  async fetchApiData(id: string): Promise<Partial<UnifiedPaperData>> {\n    logger.info(`Fetching API data for arXiv:${id}`);\n    \n    try {\n      const apiUrl = `https://export.arxiv.org/api/query?id_list=${id}`;\n      const response = await fetch(apiUrl);\n      \n      if (!response.ok) {\n        throw new Error(`API error: ${response.status}`);\n      }\n      \n      const text = await response.text();\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(text, \"text/xml\");\n      \n      // Parse XML\n      const entry = xmlDoc.querySelector('entry');\n      if (!entry) {\n        throw new Error('No entry found in API response');\n      }\n      \n      const title = entry.querySelector('title')?.textContent?.trim() || '';\n      \n      // Extract authors\n      const authorNodes = entry.querySelectorAll('author name');\n      const authors = Array.from(authorNodes)\n        .map(node => node.textContent?.trim())\n        .filter(Boolean)\n        .join(', ');\n      \n      // Extract summary/abstract\n      const abstract = entry.querySelector('summary')?.textContent?.trim() || '';\n      \n      // Extract categories\n      const categoryNodes = entry.querySelectorAll('category');\n      const categories = Array.from(categoryNodes)\n        .map(node => node.getAttribute('term'))\n        .filter(Boolean) as string[];\n      \n      // Extract published date\n      const published = entry.querySelector('published')?.textContent?.trim() || '';\n      \n      return {\n        title,\n        authors,\n        abstract,\n        arxiv_tags: categories,\n        published_date: published\n      };\n    } catch (error) {\n      logger.error('Error fetching arXiv API data', error);\n      return {};\n    }\n  },\n  \n  color: '#B31B1B',\n  icon: 'üìù',\n  \n  formatId(id: string): string {\n    return `arxiv.${id}`;\n  }\n};\n\n// Register the plugin\nimport { pluginRegistry } from '../registry';\npluginRegistry.register(arxivPlugin);\n"],"names":[],"mappings":"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"}