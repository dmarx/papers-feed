{"version":3,"file":"session-CR7DXVu2.js","sources":["../../config/session.ts"],"sourcesContent":["// config/session.ts\n// Session configuration management\n\nimport { RawSessionConfig, SessionConfig } from './types';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('session-config');\n\n// Default configuration values\nexport const DEFAULT_CONFIG: RawSessionConfig = {\n    idleThresholdMinutes: 5,\n    minSessionDurationSeconds: 30,\n    requireContinuousActivity: true,  // If true, resets timer on idle\n    logPartialSessions: false,        // If true, logs sessions even if under minimum duration\n    activityUpdateIntervalSeconds: 1  // How often to update active time\n};\n\n/**\n * Load session configuration from storage\n */\nexport async function loadSessionConfig(): Promise<RawSessionConfig> {\n    try {\n        const items = await chrome.storage.sync.get('sessionConfig');\n        const config = { ...DEFAULT_CONFIG, ...items.sessionConfig };\n        logger.debug('Loaded session config', config);\n        return config;\n    } catch (error) {\n        logger.error('Error loading session config', error);\n        return DEFAULT_CONFIG;\n    }\n}\n\n/**\n * Save session configuration to storage\n */\nexport async function saveSessionConfig(config: RawSessionConfig): Promise<void> {\n    try {\n        // Ensure values are the correct type\n        const sanitizedConfig: RawSessionConfig = {\n            idleThresholdMinutes: Number(config.idleThresholdMinutes),\n            minSessionDurationSeconds: Number(config.minSessionDurationSeconds),\n            requireContinuousActivity: Boolean(config.requireContinuousActivity),\n            logPartialSessions: Boolean(config.logPartialSessions),\n            activityUpdateIntervalSeconds: Number(config.activityUpdateIntervalSeconds)\n        };\n        \n        await chrome.storage.sync.set({ sessionConfig: sanitizedConfig });\n        logger.debug('Saved session config', sanitizedConfig);\n    } catch (error) {\n        logger.error('Error saving session config', error);\n        throw error;\n    }\n}\n\n/**\n * Convert configuration to milliseconds for internal use\n */\nexport function getConfigurationInMs(config: RawSessionConfig): SessionConfig {\n    return {\n        idleThreshold: config.idleThresholdMinutes * 60 * 1000,\n        minSessionDuration: config.minSessionDurationSeconds * 1000,\n        activityUpdateInterval: config.activityUpdateIntervalSeconds * 1000,\n        requireContinuousActivity: config.requireContinuousActivity,\n        logPartialSessions: config.logPartialSessions\n    };\n}\n"],"names":[],"mappings":";;AAMA,MAAM,MAAA,GAAS,MAAO,CAAA,SAAA,CAAU,gBAAgB,CAAA;AAGzC,MAAM,cAAmC,GAAA;AAAA,EAC5C,oBAAsB,EAAA,CAAA;AAAA,EACtB,yBAA2B,EAAA,EAAA;AAAA,EAC3B,yBAA2B,EAAA,IAAA;AAAA;AAAA,EAC3B,kBAAoB,EAAA,KAAA;AAAA;AAAA,EACpB,6BAA+B,EAAA;AAAA;AACnC;AAKA,eAAsB,iBAA+C,GAAA;AACjE,EAAI,IAAA;AACA,IAAA,MAAM,QAAQ,MAAM,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,IAAI,eAAe,CAAA;AAC3D,IAAA,MAAM,SAAS,EAAE,GAAG,cAAgB,EAAA,GAAG,MAAM,aAAc,EAAA;AAC3D,IAAO,MAAA,CAAA,KAAA,CAAM,yBAAyB,MAAM,CAAA;AAC5C,IAAO,OAAA,MAAA;AAAA,WACF,KAAO,EAAA;AACZ,IAAO,MAAA,CAAA,KAAA,CAAM,gCAAgC,KAAK,CAAA;AAClD,IAAO,OAAA,cAAA;AAAA;AAEf;AAKA,eAAsB,kBAAkB,MAAyC,EAAA;AAC7E,EAAI,IAAA;AAEA,IAAA,MAAM,eAAoC,GAAA;AAAA,MACtC,oBAAA,EAAsB,MAAO,CAAA,MAAA,CAAO,oBAAoB,CAAA;AAAA,MACxD,yBAAA,EAA2B,MAAO,CAAA,MAAA,CAAO,yBAAyB,CAAA;AAAA,MAClE,yBAAA,EAA2B,OAAQ,CAAA,MAAA,CAAO,yBAAyB,CAAA;AAAA,MACnE,kBAAA,EAAoB,OAAQ,CAAA,MAAA,CAAO,kBAAkB,CAAA;AAAA,MACrD,6BAAA,EAA+B,MAAO,CAAA,MAAA,CAAO,6BAA6B;AAAA,KAC9E;AAEA,IAAA,MAAM,OAAO,OAAQ,CAAA,IAAA,CAAK,IAAI,EAAE,aAAA,EAAe,iBAAiB,CAAA;AAChE,IAAO,MAAA,CAAA,KAAA,CAAM,wBAAwB,eAAe,CAAA;AAAA,WAC/C,KAAO,EAAA;AACZ,IAAO,MAAA,CAAA,KAAA,CAAM,+BAA+B,KAAK,CAAA;AACjD,IAAM,MAAA,KAAA;AAAA;AAEd;AAKO,SAAS,qBAAqB,MAAyC,EAAA;AAC1E,EAAO,OAAA;AAAA,IACH,aAAA,EAAe,MAAO,CAAA,oBAAA,GAAuB,EAAK,GAAA,GAAA;AAAA,IAClD,kBAAA,EAAoB,OAAO,yBAA4B,GAAA,GAAA;AAAA,IACvD,sBAAA,EAAwB,OAAO,6BAAgC,GAAA,GAAA;AAAA,IAC/D,2BAA2B,MAAO,CAAA,yBAAA;AAAA,IAClC,oBAAoB,MAAO,CAAA;AAAA,GAC/B;AACJ;;;;"}