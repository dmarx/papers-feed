{"version":3,"file":"session-CpmC_lj6.js","sources":["../../config/session.ts"],"sourcesContent":["// extension/config/session.ts\n\n// Define the configuration interface\nexport interface SessionConfig {\n    idleThresholdMinutes: number;\n    minSessionDurationSeconds: number;\n    requireContinuousActivity: boolean;\n    logPartialSessions: boolean;\n    activityUpdateIntervalSeconds: number;\n}\n\nexport interface SessionConfigMs {\n    idleThreshold: number;\n    minSessionDuration: number;\n    activityUpdateInterval: number;\n    requireContinuousActivity: boolean;\n    logPartialSessions: boolean;\n}\n\n// Default configuration values\nexport const DEFAULT_CONFIG: SessionConfig = {\n    idleThresholdMinutes: 5,\n    minSessionDurationSeconds: 30,\n    // Adding more granular control\n    requireContinuousActivity: true,  // If true, resets timer on idle\n    logPartialSessions: false,        // If true, logs sessions even if under minimum duration\n    activityUpdateIntervalSeconds: 1  // How often to update active time\n};\n\n// Load session configuration from storage\nexport async function loadSessionConfig(): Promise<SessionConfig> {\n    const items = await chrome.storage.sync.get('sessionConfig');\n    return { ...DEFAULT_CONFIG, ...items.sessionConfig };\n}\n\n// Save session configuration to storage\nexport async function saveSessionConfig(config: Partial<SessionConfig>): Promise<void> {\n    await chrome.storage.sync.set({\n        sessionConfig: {\n            idleThresholdMinutes: Number(config.idleThresholdMinutes),\n            minSessionDurationSeconds: Number(config.minSessionDurationSeconds),\n            requireContinuousActivity: Boolean(config.requireContinuousActivity),\n            logPartialSessions: Boolean(config.logPartialSessions),\n            activityUpdateIntervalSeconds: Number(config.activityUpdateIntervalSeconds)\n        }\n    });\n}\n\n// Convert configuration to milliseconds for internal use\nexport function getConfigurationInMs(config: SessionConfig): SessionConfigMs {\n    return {\n        idleThreshold: config.idleThresholdMinutes * 60 * 1000,\n        minSessionDuration: config.minSessionDurationSeconds * 1000,\n        activityUpdateInterval: config.activityUpdateIntervalSeconds * 1000,\n        requireContinuousActivity: config.requireContinuousActivity,\n        logPartialSessions: config.logPartialSessions\n    };\n}\n"],"names":[],"mappings":"AAoBO,MAAM,cAAgC,GAAA;AAAA,EACzC,oBAAsB,EAAA,CAAA;AAAA,EACtB,yBAA2B,EAAA,EAAA;AAAA;AAAA,EAE3B,yBAA2B,EAAA,IAAA;AAAA;AAAA,EAC3B,kBAAoB,EAAA,KAAA;AAAA;AAAA,EACpB,6BAA+B,EAAA;AAAA;AACnC;AAGA,eAAsB,iBAA4C,GAAA;AAC9D,EAAA,MAAM,QAAQ,MAAM,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,IAAI,eAAe,CAAA;AAC3D,EAAA,OAAO,EAAE,GAAG,cAAgB,EAAA,GAAG,MAAM,aAAc,EAAA;AACvD;AAGA,eAAsB,kBAAkB,MAA+C,EAAA;AACnF,EAAM,MAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,GAAI,CAAA;AAAA,IAC1B,aAAe,EAAA;AAAA,MACX,oBAAA,EAAsB,MAAO,CAAA,MAAA,CAAO,oBAAoB,CAAA;AAAA,MACxD,yBAAA,EAA2B,MAAO,CAAA,MAAA,CAAO,yBAAyB,CAAA;AAAA,MAClE,yBAAA,EAA2B,OAAQ,CAAA,MAAA,CAAO,yBAAyB,CAAA;AAAA,MACnE,kBAAA,EAAoB,OAAQ,CAAA,MAAA,CAAO,kBAAkB,CAAA;AAAA,MACrD,6BAAA,EAA+B,MAAO,CAAA,MAAA,CAAO,6BAA6B;AAAA;AAC9E,GACH,CAAA;AACL;AAGO,SAAS,qBAAqB,MAAwC,EAAA;AACzE,EAAO,OAAA;AAAA,IACH,aAAA,EAAe,MAAO,CAAA,oBAAA,GAAuB,EAAK,GAAA,GAAA;AAAA,IAClD,kBAAA,EAAoB,OAAO,yBAA4B,GAAA,GAAA;AAAA,IACvD,sBAAA,EAAwB,OAAO,6BAAgC,GAAA,GAAA;AAAA,IAC/D,2BAA2B,MAAO,CAAA,yBAAA;AAAA,IAClC,oBAAoB,MAAO,CAAA;AAAA,GAC/B;AACJ;;;;"}