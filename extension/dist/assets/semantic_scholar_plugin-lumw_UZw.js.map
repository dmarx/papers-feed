{"version":3,"file":"semantic_scholar_plugin-lumw_UZw.js","sources":["../../papers/plugins/sources/semantic_scholar_plugin.ts"],"sourcesContent":["// extension/papers/plugins/sources/semantic_scholar_plugin.ts\n\nimport { SourcePlugin } from '../source_plugin';\nimport { UnifiedPaperData } from '../../types';\nimport { loguru } from '../../../utils/logger';\n\nconst logger = loguru.getLogger('SemanticScholarPlugin');\n\nexport const semanticScholarPlugin: SourcePlugin = {\n  id: 'semanticscholar',\n  name: 'Semantic Scholar',\n  description: 'Support for Semantic Scholar papers',\n  version: '1.0.0',\n  \n  urlPatterns: [\n    /semanticscholar\\.org\\/paper\\/([a-f0-9]+)/,\n    /s2-research\\.org\\/papers\\/([a-f0-9]+)/\n  ],\n  \n  extractId(url: string): string | null {\n    for (const pattern of this.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[1];\n      }\n    }\n    return null;\n  },\n  \n  async extractMetadata(document: Document, url: string): Promise<Partial<UnifiedPaperData>> {\n    logger.info(`Extracting metadata from ${url}`);\n    \n    try {\n      const getMetaContent = (selector: string): string | undefined => {\n        const element = document.querySelector(selector);\n        return element && 'content' in element ? \n          (element as HTMLMetaElement).content : undefined;\n      };\n      \n      // Extract from meta tags\n      const title = getMetaContent('meta[name=\"citation_title\"]') || \n                   getMetaContent('meta[property=\"og:title\"]') ||\n                   document.title;\n      \n      // Try to get authors - S2 has specific author elements\n      let authors = '';\n      const authorElements = document.querySelectorAll('[data-test-id=\"author-list\"] a');\n      if (authorElements.length > 0) {\n        authors = Array.from(authorElements)\n          .map(el => el.textContent?.trim())\n          .filter(Boolean)\n          .join(', ');\n      } else {\n        authors = getMetaContent('meta[name=\"citation_author\"]') || '';\n      }\n      \n      // Get abstract\n      let abstract = getMetaContent('meta[name=\"description\"]') || \n                    getMetaContent('meta[property=\"og:description\"]');\n      \n      if (!abstract) {\n        const abstractEl = document.querySelector('[data-test-id=\"abstract-text\"]') ||\n                          document.querySelector('.abstract');\n        abstract = abstractEl?.textContent?.trim();\n      }\n      \n      // Extract citation count if available\n      let citations: number | undefined;\n      const citationEl = document.querySelector('[data-test-id=\"citation-count\"]');\n      if (citationEl) {\n        const citText = citationEl.textContent;\n        if (citText) {\n          const match = citText.match(/(\\d+)/);\n          if (match) {\n            citations = parseInt(match[1], 10);\n          }\n        }\n      }\n      \n      // Extract DOI if available\n      const doi = getMetaContent('meta[name=\"citation_doi\"]');\n      const published_date = getMetaContent('meta[name=\"citation_publication_date\"]');\n      \n      return {\n        title: title || '',\n        authors: authors || '',\n        abstract: abstract || '',\n        source_specific_metadata: {\n          citations,\n          published_date: published_date || ''\n        },\n        identifiers: doi ? { doi } : undefined\n      };\n    } catch (error) {\n      logger.error('Error extracting metadata from Semantic Scholar page', error);\n      return {};\n    }\n  },\n  \n  hasApi: true,\n  \n  async fetchApiData(id: string): Promise<Partial<UnifiedPaperData>> {\n    logger.info(`Fetching API data for S2:${id}`);\n    \n    try {\n      const apiUrl = `https://api.semanticscholar.org/v1/paper/${id}`;\n      // Use self.fetch for service worker environment\n      const response = await self.fetch(apiUrl);\n      \n      if (!response.ok) {\n        throw new Error(`API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Extract fields from API response\n      const authors = data.authors ? \n        data.authors.map((author: any) => author.name).join(', ') : '';\n      \n      // Create the paper data object\n      const paperData: Partial<UnifiedPaperData> = {\n        title: data.title || '',\n        authors,\n        abstract: data.abstract || '',\n        source_specific_metadata: {\n          citations: data.citations,\n          published_date: data.year ? `${data.year}` : undefined,\n        },\n        identifiers: {}\n      };\n      \n      // Add identifiers\n      if (data.doi) {\n        paperData.identifiers!.doi = data.doi;\n      }\n      \n      if (data.arxivId) {\n        paperData.identifiers!.arxiv = data.arxivId;\n      }\n      \n      return paperData;\n    } catch (error) {\n      logger.error('Error fetching Semantic Scholar API data', error);\n      return {};\n    }\n  },\n  \n  color: '#2e7d32',\n  icon: 'ðŸ“Š',\n  \n  formatId(id: string): string {\n    return `s2.${id}`;\n  }\n};\n\n// Register the plugin\nimport { pluginRegistry } from '../registry';\npluginRegistry.register(semanticScholarPlugin);\n"],"names":[],"mappings":";;AAMA,MAAM,MAAA,GAAS,MAAO,CAAA,SAAA,CAAU,uBAAuB,CAAA;AAEhD,MAAM,qBAAsC,GAAA;AAAA,EACjD,EAAI,EAAA,iBAAA;AAAA,EACJ,IAAM,EAAA,kBAAA;AAAA,EACN,WAAa,EAAA,qCAAA;AAAA,EACb,OAAS,EAAA,OAAA;AAAA,EAET,WAAa,EAAA;AAAA,IACX,0CAAA;AAAA,IACA;AAAA,GACF;AAAA,EAEA,UAAU,GAA4B,EAAA;AACpC,IAAW,KAAA,MAAA,OAAA,IAAW,KAAK,WAAa,EAAA;AACtC,MAAM,MAAA,KAAA,GAAQ,GAAI,CAAA,KAAA,CAAM,OAAO,CAAA;AAC/B,MAAA,IAAI,KAAO,EAAA;AACT,QAAA,OAAO,MAAM,CAAC,CAAA;AAAA;AAChB;AAEF,IAAO,OAAA,IAAA;AAAA,GACT;AAAA,EAEA,MAAM,eAAgB,CAAA,QAAA,EAAoB,GAAiD,EAAA;AACzF,IAAO,MAAA,CAAA,IAAA,CAAK,CAA4B,yBAAA,EAAA,GAAG,CAAE,CAAA,CAAA;AAE7C,IAAI,IAAA;AACF,MAAM,MAAA,cAAA,GAAiB,CAAC,QAAyC,KAAA;AAC/D,QAAM,MAAA,OAAA,GAAU,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA;AAC/C,QAAA,OAAO,OAAW,IAAA,SAAA,IAAa,OAC5B,GAAA,OAAA,CAA4B,OAAU,GAAA,KAAA,CAAA;AAAA,OAC3C;AAGA,MAAA,MAAM,QAAQ,cAAe,CAAA,6BAA6B,KAC7C,cAAe,CAAA,2BAA2B,KAC1C,QAAS,CAAA,KAAA;AAGtB,MAAA,IAAI,OAAU,GAAA,EAAA;AACd,MAAM,MAAA,cAAA,GAAiB,QAAS,CAAA,gBAAA,CAAiB,gCAAgC,CAAA;AACjF,MAAI,IAAA,cAAA,CAAe,SAAS,CAAG,EAAA;AAC7B,QAAA,OAAA,GAAU,KAAM,CAAA,IAAA,CAAK,cAAc,CAAA,CAChC,IAAI,CAAM,EAAA,KAAA,EAAA,CAAG,WAAa,EAAA,IAAA,EAAM,CAChC,CAAA,MAAA,CAAO,OAAO,CAAA,CACd,KAAK,IAAI,CAAA;AAAA,OACP,MAAA;AACL,QAAU,OAAA,GAAA,cAAA,CAAe,8BAA8B,CAAK,IAAA,EAAA;AAAA;AAI9D,MAAA,IAAI,QAAW,GAAA,cAAA,CAAe,0BAA0B,CAAA,IAC1C,eAAe,iCAAiC,CAAA;AAE9D,MAAA,IAAI,CAAC,QAAU,EAAA;AACb,QAAA,MAAM,aAAa,QAAS,CAAA,aAAA,CAAc,gCAAgC,CACxD,IAAA,QAAA,CAAS,cAAc,WAAW,CAAA;AACpD,QAAW,QAAA,GAAA,UAAA,EAAY,aAAa,IAAK,EAAA;AAAA;AAI3C,MAAI,IAAA,SAAA;AACJ,MAAM,MAAA,UAAA,GAAa,QAAS,CAAA,aAAA,CAAc,iCAAiC,CAAA;AAC3E,MAAA,IAAI,UAAY,EAAA;AACd,QAAA,MAAM,UAAU,UAAW,CAAA,WAAA;AAC3B,QAAA,IAAI,OAAS,EAAA;AACX,UAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,KAAA,CAAM,OAAO,CAAA;AACnC,UAAA,IAAI,KAAO,EAAA;AACT,YAAA,SAAA,GAAY,QAAS,CAAA,KAAA,CAAM,CAAC,CAAA,EAAG,EAAE,CAAA;AAAA;AACnC;AACF;AAIF,MAAM,MAAA,GAAA,GAAM,eAAe,2BAA2B,CAAA;AACtD,MAAM,MAAA,cAAA,GAAiB,eAAe,wCAAwC,CAAA;AAE9E,MAAO,OAAA;AAAA,QACL,OAAO,KAAS,IAAA,EAAA;AAAA,QAChB,SAAS,OAAW,IAAA,EAAA;AAAA,QACpB,UAAU,QAAY,IAAA,EAAA;AAAA,QACtB,wBAA0B,EAAA;AAAA,UACxB,SAAA;AAAA,UACA,gBAAgB,cAAkB,IAAA;AAAA,SACpC;AAAA,QACA,WAAa,EAAA,GAAA,GAAM,EAAE,GAAA,EAAQ,GAAA,KAAA;AAAA,OAC/B;AAAA,aACO,KAAO,EAAA;AACd,MAAO,MAAA,CAAA,KAAA,CAAM,wDAAwD,KAAK,CAAA;AAC1E,MAAA,OAAO,EAAC;AAAA;AACV,GACF;AAAA,EAEA,MAAQ,EAAA,IAAA;AAAA,EAER,MAAM,aAAa,EAAgD,EAAA;AACjE,IAAO,MAAA,CAAA,IAAA,CAAK,CAA4B,yBAAA,EAAA,EAAE,CAAE,CAAA,CAAA;AAE5C,IAAI,IAAA;AACF,MAAM,MAAA,MAAA,GAAS,4CAA4C,EAAE,CAAA,CAAA;AAE7D,MAAA,MAAM,QAAW,GAAA,MAAM,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAExC,MAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AAChB,QAAA,MAAM,IAAI,KAAA,CAAM,CAAc,WAAA,EAAA,QAAA,CAAS,MAAM,CAAE,CAAA,CAAA;AAAA;AAGjD,MAAM,MAAA,IAAA,GAAO,MAAM,QAAA,CAAS,IAAK,EAAA;AAGjC,MAAA,MAAM,OAAU,GAAA,IAAA,CAAK,OACnB,GAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAC,MAAA,KAAgB,MAAO,CAAA,IAAI,CAAE,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,EAAA;AAG9D,MAAA,MAAM,SAAuC,GAAA;AAAA,QAC3C,KAAA,EAAO,KAAK,KAAS,IAAA,EAAA;AAAA,QACrB,OAAA;AAAA,QACA,QAAA,EAAU,KAAK,QAAY,IAAA,EAAA;AAAA,QAC3B,wBAA0B,EAAA;AAAA,UACxB,WAAW,IAAK,CAAA,SAAA;AAAA,UAChB,gBAAgB,IAAK,CAAA,IAAA,GAAO,CAAG,EAAA,IAAA,CAAK,IAAI,CAAK,CAAA,GAAA,KAAA;AAAA,SAC/C;AAAA,QACA,aAAa;AAAC,OAChB;AAGA,MAAA,IAAI,KAAK,GAAK,EAAA;AACZ,QAAU,SAAA,CAAA,WAAA,CAAa,MAAM,IAAK,CAAA,GAAA;AAAA;AAGpC,MAAA,IAAI,KAAK,OAAS,EAAA;AAChB,QAAU,SAAA,CAAA,WAAA,CAAa,QAAQ,IAAK,CAAA,OAAA;AAAA;AAGtC,MAAO,OAAA,SAAA;AAAA,aACA,KAAO,EAAA;AACd,MAAO,MAAA,CAAA,KAAA,CAAM,4CAA4C,KAAK,CAAA;AAC9D,MAAA,OAAO,EAAC;AAAA;AACV,GACF;AAAA,EAEA,KAAO,EAAA,SAAA;AAAA,EACP,IAAM,EAAA,IAAA;AAAA,EAEN,SAAS,EAAoB,EAAA;AAC3B,IAAA,OAAO,MAAM,EAAE,CAAA,CAAA;AAAA;AAEnB;AAIA,cAAA,CAAe,SAAS,qBAAqB,CAAA;;;;"}