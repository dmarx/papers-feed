{"version":3,"file":"arxiv_plugin-BHmSzkUq.js","sources":["../../utils/worker_safe_parser.ts","../../papers/plugins/sources/arxiv_plugin.ts"],"sourcesContent":["// extension/utils/worker_safe_parser.ts\n\n/**\n * Simple XML parser that works in service worker environment\n */\nexport function parseXML(xmlText: string) {\n  return {\n    getTagContent(tag: string, content?: string): string {\n      const searchText = content || xmlText;\n      const regex = new RegExp(`<${tag}[^>]*>(.*?)</${tag}>`, 's');\n      const match = searchText.match(regex);\n      return match ? match[1].trim() : '';\n    },\n    \n    getAll(tag: string): string[] {\n      const result: string[] = [];\n      const regex = new RegExp(`<${tag}[^>]*>(.*?)</${tag}>`, 'gs');\n      let match;\n      while ((match = regex.exec(xmlText)) !== null) {\n        result.push(match[1].trim());\n      }\n      return result;\n    },\n    \n    getAttribute(tag: string, attr: string): string[] {\n      const result: string[] = [];\n      const regex = new RegExp(`<${tag}[^>]*${attr}=\"([^\"]+)\"`, 'g');\n      let match;\n      while ((match = regex.exec(xmlText)) !== null) {\n        result.push(match[1]);\n      }\n      return result;\n    },\n    \n    getEntry(text?: string): string {\n      const searchText = text || xmlText;\n      const entryRegex = /<entry>([\\s\\S]*?)<\\/entry>/;\n      const entryMatch = searchText.match(entryRegex);\n      return entryMatch ? entryMatch[1] : '';\n    },\n    \n    getAuthor(text?: string): string[] {\n      const searchText = text || xmlText;\n      const authors = [];\n      const regex = /<author>[^]*?<name>([^]*?)<\\/name>[^]*?<\\/author>/g;\n      let match;\n      while (match = regex.exec(searchText)) {\n        authors.push(match[1].trim());\n      }\n      return authors;\n    },\n    \n    getCategories(text?: string): string[] {\n      const searchText = text || xmlText;\n      const categories = new Set();\n      \n      const primaryMatch = searchText.match(/<arxiv:primary_category[^>]*term=\"([^\"]+)\"/);\n      if (primaryMatch) {\n        categories.add(primaryMatch[1]);\n      }\n      \n      const categoryRegex = /<category[^>]*term=\"([^\"]+)\"/g;\n      let match;\n      while (match = categoryRegex.exec(searchText)) {\n        categories.add(match[1]);\n      }\n      \n      return Array.from(categories) as string[];\n    },\n    \n    getPublishedDate(text?: string): string {\n      const searchText = text || xmlText;\n      const match = searchText.match(/<published>([^<]+)<\\/published>/);\n      return match ? match[1].trim() : '';\n    }\n  };\n}\n","// extension/papers/plugins/sources/arxiv_plugin.ts\n\nimport { SourcePlugin } from '../source_plugin';\nimport { UnifiedPaperData } from '../../types';\nimport { loguru } from '../../../utils/logger';\nimport { parseXML } from '../../../utils/worker_safe_parser';\n\nconst logger = loguru.getLogger('ArXivPlugin');\n\nexport const arxivPlugin: SourcePlugin = {\n  id: 'arxiv',\n  name: 'arXiv',\n  description: 'Support for arXiv papers',\n  version: '1.0.0',\n  \n  urlPatterns: [\n    /arxiv\\.org\\/abs\\/([0-9.]+)(v[0-9]+)?/,\n    /arxiv\\.org\\/pdf\\/([0-9.]+)(v[0-9]+)?\\.pdf/,\n    /arxiv\\.org\\/[a-z]+\\/([0-9.]+)(v[0-9]+)?/\n  ],\n  \n  extractId(url: string): string | null {\n    for (const pattern of this.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        // Include version if available\n        return match[1] + (match[2] || '');\n      }\n    }\n    return null;\n  },\n  \n  async extractMetadata(document: Document, url: string): Promise<Partial<UnifiedPaperData>> {\n    logger.info(`Extracting metadata from ${url}`);\n    \n    try {\n      // Extract from page metadata\n      const getMetaContent = (selector: string): string | undefined => {\n        const element = document.querySelector(selector);\n        return element && 'content' in element ? \n          (element as HTMLMetaElement).content : undefined;\n      };\n      \n      // Try to extract title and authors\n      let title = document.querySelector('.title')?.textContent?.trim();\n      if (title?.startsWith('Title:')) {\n        title = title.substring(6).trim();\n      }\n      \n      // Extract authors\n      let authors = '';\n      const authorElements = document.querySelectorAll('.authors a');\n      if (authorElements.length > 0) {\n        authors = Array.from(authorElements)\n          .map(el => el.textContent?.trim())\n          .filter(Boolean)\n          .join(', ');\n      }\n      \n      // Extract abstract\n      let abstract = document.querySelector('.abstract')?.textContent?.trim();\n      if (abstract?.startsWith('Abstract:')) {\n        abstract = abstract.substring(9).trim();\n      }\n      \n      // Extract categories\n      const categories: string[] = [];\n      const categoryElements = document.querySelectorAll('.subjects .tag');\n      categoryElements.forEach(el => {\n        const text = el.textContent?.trim();\n        if (text) categories.push(text);\n      });\n      \n      return {\n        title: title || '',\n        authors: authors || '',\n        abstract: abstract || '',\n        source_specific_metadata: {\n          arxiv_tags: categories,\n          published_date: '' // Will be filled by API if available\n        }\n      };\n    } catch (error) {\n      logger.error('Error extracting metadata from arXiv page', error);\n      return {};\n    }\n  },\n  \n  hasApi: true,\n  \n  async fetchApiData(id: string): Promise<Partial<UnifiedPaperData>> {\n    logger.info(`Fetching API data for arXiv:${id}`);\n    \n    try {\n      const apiUrl = `https://export.arxiv.org/api/query?id_list=${id}`;\n      \n      // Use self.fetch (available in service worker) instead of window.fetch\n      const response = await self.fetch(apiUrl);\n      \n      if (!response.ok) {\n        throw new Error(`API error: ${response.status}`);\n      }\n      \n      const text = await response.text();\n      \n      // Use the worker-safe XML parser\n      const parser = parseXML(text);\n      \n      // Extract entry data\n      const entryContent = parser.getEntry();\n      \n      // Extract title\n      const title = parser.getTagContent('title');\n      \n      // Extract authors using the author parser\n      const authorsList = parser.getAuthor();\n      const authors = authorsList.join(', ');\n      \n      // Extract summary\n      const abstract = parser.getTagContent('summary');\n      \n      // Extract categories using the categories parser\n      const categories = parser.getCategories();\n      \n      // Extract published date\n      const published = parser.getPublishedDate();\n      \n      return {\n        title,\n        authors,\n        abstract,\n        source_specific_metadata: {\n          arxiv_tags: categories,\n          published_date: published\n        }\n      };\n    } catch (error) {\n      logger.error('Error fetching arXiv API data', error);\n      return {};\n    }\n  },\n  \n  color: '#B31B1B',\n  icon: 'üìù',\n  \n  formatId(id: string): string {\n    return `arxiv.${id}`;\n  }\n};\n\n// Register the plugin\nimport { pluginRegistry } from '../registry';\npluginRegistry.register(arxivPlugin);\n"],"names":[],"mappings":"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"}