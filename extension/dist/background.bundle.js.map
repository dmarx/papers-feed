{"version":3,"file":"background.bundle.js","sources":["../node_modules/gh-store-client/dist/index.mjs","../papers/types.ts","../papers/source_utils.ts","../utils/logger.ts","../papers/manager.ts","../config/session.js","../papers/detector.ts","../papers/plugins/registry.ts","../papers/process_paper_url.ts","../background_multi_source.js","../papers/plugins/loader.ts","../background.js"],"sourcesContent":["var d=class{constructor(e={}){this.cache=new Map,this.maxSize=e.maxSize??1e3,this.ttl=e.ttl??1e3*60*60,this.accessOrder=[]}get(e){let s=this.cache.get(e);if(s){if(Date.now()-s.lastAccessed>this.ttl){this.cache.delete(e),this.removeFromAccessOrder(e);return}return s.lastAccessed=Date.now(),this.updateAccessOrder(e),s.issueNumber}}set(e,s,t){if(this.cache.size>=this.maxSize&&!this.cache.has(e)){let r=this.accessOrder[this.accessOrder.length-1];r&&(this.cache.delete(r),this.removeFromAccessOrder(r))}this.cache.set(e,{issueNumber:s,lastAccessed:Date.now(),createdAt:t.createdAt,updatedAt:t.updatedAt}),this.updateAccessOrder(e)}remove(e){this.cache.delete(e),this.removeFromAccessOrder(e)}clear(){this.cache.clear(),this.accessOrder=[]}getStats(){return{size:this.cache.size,maxSize:this.maxSize,ttl:this.ttl}}shouldRefresh(e,s){let t=this.cache.get(e);return t?s>t.updatedAt:!0}updateAccessOrder(e){this.removeFromAccessOrder(e),this.accessOrder.unshift(e)}removeFromAccessOrder(e){let s=this.accessOrder.indexOf(e);s>-1&&this.accessOrder.splice(s,1)}};var l=\"0.3.2\";var f=class{constructor(e,s,t={}){this.token=e,this.repo=s,this.config={baseLabel:t.baseLabel??\"stored-object\",uidPrefix:t.uidPrefix??\"UID:\",reactions:{processed:t.reactions?.processed??\"+1\",initialState:t.reactions?.initialState??\"rocket\"}},this.cache=new d(t.cache)}async fetchFromGitHub(e,s={}){let t=new URL(`https://api.github.com/repos/${this.repo}${e}`);s.params&&(Object.entries(s.params).forEach(([i,a])=>{t.searchParams.append(i,a)}),delete s.params);let r=await fetch(t.toString(),{...s,headers:{Authorization:`token ${this.token}`,Accept:\"application/vnd.github.v3+json\",...s.headers}});if(!r.ok)throw new Error(`GitHub API error: ${r.status}`);return r.json()}createCommentPayload(e,s){let t={_data:e,_meta:{client_version:l,timestamp:new Date().toISOString(),update_mode:\"append\"}};return s&&(t.type=s),t}async getObject(e){let s=this.cache.get(e),t;if(s)try{t=await this.fetchFromGitHub(`/issues/${s}`),this._verifyIssueLabels(t,e)||(this.cache.remove(e),t=void 0)}catch{this.cache.remove(e)}if(!t){let c=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"closed\"}});if(!c||c.length===0)throw new Error(`No object found with ID: ${e}`);t=c[0]}if(!t?.body)throw new Error(`Invalid issue data received for ID: ${e}`);let r=JSON.parse(t.body),i=new Date(t.created_at),a=new Date(t.updated_at);return this.cache.set(e,t.number,{createdAt:i,updatedAt:a}),{meta:{objectId:e,label:`${this.config.uidPrefix}${e}`,createdAt:i,updatedAt:a,version:await this._getVersion(t.number)},data:r}}async createObject(e,s){let t=`${this.config.uidPrefix}${e}`,r=await this.fetchFromGitHub(\"/issues\",{method:\"POST\",body:JSON.stringify({title:`Stored Object: ${e}`,body:JSON.stringify(s,null,2),labels:[this.config.baseLabel,t]})});this.cache.set(e,r.number,{createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at)});let i=this.createCommentPayload(s,\"initial_state\"),a=await this.fetchFromGitHub(`/issues/${r.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(i,null,2)})});return await this.fetchFromGitHub(`/issues/comments/${a.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.processed})}),await this.fetchFromGitHub(`/issues/comments/${a.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.initialState})}),await this.fetchFromGitHub(`/issues/${r.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"closed\"})}),{meta:{objectId:e,label:t,createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at),version:1},data:s}}_verifyIssueLabels(e,s){let t=new Set([this.config.baseLabel,`${this.config.uidPrefix}${s}`]);return e.labels.some(r=>t.has(r.name))}async updateObject(e,s){let t=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!t||t.length===0)throw new Error(`No object found with ID: ${e}`);let r=t[0],i=this.createCommentPayload(s);return await this.fetchFromGitHub(`/issues/${r.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(i,null,2)})}),await this.fetchFromGitHub(`/issues/${r.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"open\"})}),this.getObject(e)}async listAll(){let e=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\"}}),s={};for(let t of e)if(!t.labels.some(r=>r.name===\"archived\"))try{let r=this._getObjectIdFromLabels(t),i=JSON.parse(t.body),a={objectId:r,label:r,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at),version:await this._getVersion(t.number)};s[r]={meta:a,data:i}}catch{continue}return s}async listUpdatedSince(e){let s=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\",since:e.toISOString()}}),t={};for(let r of s)if(!r.labels.some(i=>i.name===\"archived\"))try{let i=this._getObjectIdFromLabels(r),a=JSON.parse(r.body),n=new Date(r.updated_at);if(n>e){let c={objectId:i,label:i,createdAt:new Date(r.created_at),updatedAt:n,version:await this._getVersion(r.number)};t[i]={meta:c,data:a}}}catch{continue}return t}async getObjectHistory(e){let s=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!s||s.length===0)throw new Error(`No object found with ID: ${e}`);let t=s[0],r=await this.fetchFromGitHub(`/issues/${t.number}/comments`),i=[];for(let a of r)try{let n=JSON.parse(a.body),c=\"update\",m,b={client_version:\"legacy\",timestamp:a.created_at,update_mode:\"append\"};typeof n==\"object\"?\"_data\"in n?(c=n.type||\"update\",m=n._data,b=n._meta||b):\"type\"in n&&n.type===\"initial_state\"?(c=\"initial_state\",m=n.data):m=n:m=n,i.push({timestamp:a.created_at,type:c,data:m,commentId:a.id})}catch{continue}return i}async _getVersion(e){return(await this.fetchFromGitHub(`/issues/${e}/comments`)).length+1}_getObjectIdFromLabels(e){for(let s of e.labels)if(s.name!==this.config.baseLabel&&s.name.startsWith(this.config.uidPrefix))return s.name.slice(this.config.uidPrefix.length);throw new Error(`No UID label found with prefix ${this.config.uidPrefix}`)}};var u={baseLabel:\"stored-object\",uidPrefix:\"UID:\",reactions:{processed:\"+1\",initialState:\"rocket\"},retries:{maxAttempts:3,backoffFactor:2},rateLimit:{maxRequestsPerHour:1e3}};function _(o){return{...u,...o,reactions:{...u.reactions,...o.reactions},retries:{...u.retries,...o.retries},rateLimit:{...u.rateLimit,...o.rateLimit}}}function v(o){return/^gh[ps]_[a-zA-Z0-9]{36}$/.test(o)}function P(o){return/^[\\w-]+\\/[\\w-]+$/.test(o)}var h=class extends Error{constructor(e){super(e),this.name=\"ConfigError\"}},g=class extends h{constructor(e=\"Invalid GitHub token format\"){super(e),this.name=\"TokenError\"}},p=class extends h{constructor(e=\"Invalid repository format. Use owner/repo\"){super(e),this.name=\"RepoError\"}};export{h as ConfigError,u as DEFAULT_CONFIG,f as GitHubStoreClient,p as RepoError,g as TokenError,_ as mergeConfig,P as validateRepo,v as validateToken};\n//# sourceMappingURL=index.mjs.map","// extension/papers/types.ts\nimport type { Json } from 'gh-store-client';\n\n/**\n * Paper metadata with multi-source support\n */\nexport type PaperMetadata = {\n  // Multi-source fields (required)\n  primary_id: string;  // {source}.{id} format\n  source: string;      // Source type (arxiv, doi, semanticscholar, etc.)\n  sourceId: string;    // Original ID from the source\n  \n  // Legacy fields (deprecated - for backward compatibility only)\n  arxivId?: string;\n  arxiv_tags?: string[];\n  \n  // Common fields\n  url: string;\n  title: string;\n  authors: string;\n  abstract: string;\n  timestamp: string;\n  published_date: string;\n  rating: string;\n  \n  // Source-specific identifiers\n  identifiers?: {\n    original: string;\n    url: string;\n    // Fix for TS2411: Using string index signature\n    [key: string]: string;\n  };\n}\n\n/**\n * Reading session data\n */\nexport type ReadingSessionData = {\n  session_id: string;\n  duration_seconds: number;\n  idle_seconds: number;\n  start_time: string;\n  end_time: string;\n  total_elapsed_seconds: number;\n}\n\n/**\n * Interaction record\n */\nexport type Interaction = {\n  type: string;\n  timestamp: string;\n  data: Json;\n}\n\n/**\n * Interaction log\n */\nexport type InteractionLog = {\n  paper_id: string;\n  legacy_id?: string; // For backward compatibility\n  interactions: Interaction[];\n}\n\n/**\n * Type guard for reading session data\n */\nexport const isReadingSession = (data: unknown): data is ReadingSessionData => {\n  const session = data as ReadingSessionData;\n  return (\n    typeof session === 'object' &&\n    session !== null &&\n    typeof session.session_id === 'string' &&\n    typeof session.duration_seconds === 'number' &&\n    typeof session.idle_seconds === 'number' &&\n    typeof session.start_time === 'string' &&\n    typeof session.end_time === 'string' &&\n    typeof session.total_elapsed_seconds === 'number'\n  );\n};\n\n/**\n * Type guard for interaction log\n */\nexport const isInteractionLog = (data: unknown): data is InteractionLog => {\n  const log = data as InteractionLog;\n  return (\n    typeof log === 'object' &&\n    log !== null &&\n    typeof log.paper_id === 'string' &&\n    Array.isArray(log.interactions)\n  );\n};\n\n/**\n * Paper source information\n */\nexport type SourceInfo = {\n  type: string;\n  id: string;\n  primary_id: string;\n  url: string;\n}\n\n/**\n * Reading session with unified multi-source support\n */\nexport class EnhancedReadingSession {\n  // Required fields\n  paperId: string;\n  paperData: Record<string, any>;\n  sessionId: string;\n  startTime: Date;\n  activeTime: number;\n  idleTime: number;\n  lastActiveTime: Date;\n  isTracking: boolean;\n  config: any;\n  endTime: Date | null;\n  finalizedData: ReadingSessionData | null;\n  \n  constructor(paperData: Record<string, any>, config: any) {\n    if (!paperData.primary_id) {\n      throw new Error('Paper data must include primary_id');\n    }\n    \n    this.paperId = paperData.primary_id;\n    this.paperData = paperData;\n    this.sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    this.startTime = new Date();\n    this.activeTime = 0;\n    this.idleTime = 0;\n    this.lastActiveTime = new Date();\n    this.isTracking = true;\n    this.config = config;\n    this.endTime = null;\n    this.finalizedData = null;\n  }\n  \n  update() {\n    if (this.isTracking && !this.finalizedData) {\n      const now = new Date();\n      const timeSinceLastActive = now.getTime() - this.lastActiveTime.getTime();\n      \n      if (timeSinceLastActive < this.config.idleThreshold) {\n        this.activeTime += timeSinceLastActive;\n      } else {\n        this.idleTime += timeSinceLastActive;\n      }\n      \n      this.lastActiveTime = now;\n    }\n  }\n  \n  finalize() {\n    if (this.finalizedData) {\n      return this.finalizedData;\n    }\n \n    this.update();\n    this.isTracking = false;\n    this.endTime = new Date();\n    const totalElapsed = this.endTime.getTime() - this.startTime.getTime();\n \n    if (this.activeTime >= this.config.minSessionDuration) {\n      this.finalizedData = {\n        session_id: this.sessionId,\n        duration_seconds: Math.round(this.activeTime / 1000),\n        idle_seconds: Math.round(this.idleTime / 1000),\n        start_time: this.startTime.toISOString(),\n        end_time: this.endTime.toISOString(),\n        total_elapsed_seconds: Math.round(totalElapsed / 1000)\n      };\n      return this.finalizedData;\n    }\n    return null;\n  }\n  \n  end() {\n    return this.finalize();\n  }\n  \n  getMetadata() {\n    return {\n      sourceType: this.paperData.source,\n      paperId: this.paperId,\n      title: this.paperData.title,\n      sessionId: this.sessionId,\n      startTime: this.startTime.toISOString(),\n      activeSeconds: Math.round(this.activeTime / 1000),\n      idleSeconds: Math.round(this.idleTime / 1000)\n    };\n  }\n}\n\n// The legacy MultiSourceReadingSession is removed as it's replaced by EnhancedReadingSession\n\n/**\n * Unified paper data structure\n */\nexport interface UnifiedPaperData {\n  // Core fields required for all sources\n  primary_id: string;  // Standardized ID format: {source}.{id}\n  source: string;      // Source identifier (arxiv, doi, semanticscholar, etc.)\n  sourceId: string;    // Original ID from the source\n  url: string;         // Paper URL\n  title: string;       // Paper title\n  authors: string;     // Author list as string\n  abstract: string;    // Paper abstract\n  timestamp: string;   // When the paper was first tracked\n  rating: string;      // User rating (thumbsup, thumbsdown, novote)\n  \n  // Cross-reference identifiers\n  // Fix for TS2411: Using string index signature\n  identifiers?: {\n    [key: string]: string;     // Other identifier types\n  };\n  \n  // Source-specific metadata\n  // Fix for TS2411: Using string index signature\n  source_specific_metadata?: {\n    [key: string]: any;\n  };\n}\n","// extension/papers/source_utils.ts\n// Utilities for supporting multiple paper sources with new format only\n\nimport { SourceInfo } from './types';\n\n// Source type definitions\ninterface SourceTypeDefinition {\n  prefix: string;\n  url_patterns: RegExp[];\n  id_extractors: ((match: RegExpMatchArray) => string)[];\n  id_format?: RegExp;\n}\n\nconst SOURCE_TYPES: Record<string, SourceTypeDefinition> = {\n  'arxiv': {\n    prefix: 'arxiv',\n    url_patterns: [\n      /arxiv\\.org\\/(abs|pdf|html)\\/([0-9.]+)/,\n      /arxiv\\.org\\/abs\\/([0-9.]+)(v[0-9]+)?/\n    ],\n    id_extractors: [\n      (match) => match[2],\n      (match) => match[1] + (match[2] || '')\n    ],\n    id_format: /[0-9]{4}\\.[0-9]{4,5}(v[0-9]+)?/\n  },\n  'semanticscholar': {\n    prefix: 's2',\n    url_patterns: [\n      /semanticscholar\\.org\\/paper\\/([a-f0-9]+)/,\n      /s2-research\\.org\\/papers\\/([a-f0-9]+)/\n    ],\n    id_extractors: [\n      (match) => match[1],\n      (match) => match[1]\n    ],\n    id_format: /[a-f0-9]{40}/\n  },\n  'doi': {\n    prefix: 'doi',\n    url_patterns: [\n      /doi\\.org\\/(10\\.[0-9.]+\\/[a-zA-Z0-9._\\-/:()\\[\\]]+)/\n    ],\n    id_extractors: [\n      (match) => match[1]\n    ],\n    id_format: /10\\.[0-9.]+\\/[a-zA-Z0-9._\\-/:()\\[\\]]+/\n  },\n  'acm': {\n    prefix: 'doi',  // ACM uses DOIs\n    url_patterns: [\n      /dl\\.acm\\.org\\/doi\\/(10\\.[0-9.]+\\/[a-zA-Z0-9._\\-/:()\\[\\]]+)/\n    ],\n    id_extractors: [\n      (match) => match[1]\n    ],\n    id_format: /10\\.[0-9.]+\\/[a-zA-Z0-9._\\-/:()\\[\\]]+/\n  },\n  'openreview': {\n    prefix: 'openreview',\n    url_patterns: [\n      /openreview\\.net\\/forum\\?id=([a-zA-Z0-9_\\-]+)/,\n      // Add support for PDF links on OpenReview\n      /openreview\\.net\\/pdf\\?id=([a-zA-Z0-9_\\-]+)/\n    ],\n    id_extractors: [\n      (match) => match[1],\n      (match) => match[1]\n    ],\n    id_format: /[a-zA-Z0-9_\\-]+/\n  }\n};\n\n/**\n * Format a source-specific ID into a universal primary ID format\n * \n * @param {string} source - Source type (e.g. 'arxiv', 'doi')\n * @param {string} id - Original source-specific identifier\n * @returns {string} Formatted primary ID\n */\nexport function formatPrimaryId(source: string, id: string): string {\n  // Use source-specific prefixes\n  const sourcePrefix = SOURCE_TYPES[source]?.prefix || 'generic';\n  \n  // Sanitize the ID by replacing problematic characters\n  const safeId = id\n    .replace(/\\//g, '_')\n    .replace(/:/g, '.')\n    .replace(/\\s/g, '_')\n    .replace(/\\\\/g, '_');\n  \n  return `${sourcePrefix}.${safeId}`;\n}\n\n/**\n * Parse a primary ID into its source type and original source ID\n * \n * @param {string} prefixedId - The primary ID in the format \"{source_prefix}.{id}\"\n * @returns {Object} Object with source type and source ID\n */\nexport function parseId(prefixedId: string): { type: string; id: string } {\n  // Split at the first dot\n  const [prefix, ...idParts] = prefixedId.split('.');\n  const id = idParts.join('.'); // Rejoin in case ID contains periods\n  \n  // Map prefix to source type\n  const prefixToSource: Record<string, string> = {\n    'arxiv': 'arxiv',\n    's2': 'semanticscholar',\n    'doi': 'doi',\n    'openreview': 'openreview'\n  };\n  \n  return {\n    type: prefixToSource[prefix] || 'generic',\n    id: prefix === 'doi' ? id.replace(/_/g, '/') : id\n  };\n}\n\n/**\n * @deprecated Use primary_id directly\n * Legacy function maintained only for migration support\n */\nexport function getLegacyId(primaryId: string): string {\n  console.warn('getLegacyId is deprecated. Use primary_id directly.');\n  // If there's no prefix, assume it's already a legacy ID\n  if (!primaryId.includes('.')) {\n    return primaryId;\n  }\n  \n  const { type, id } = parseId(primaryId);\n  \n  // For arXiv, return just the ID (backward compatible)\n  if (type === 'arxiv') {\n    return id;\n  }\n  \n  // For other sources, use the full prefixed ID to avoid collisions with arXiv IDs\n  return primaryId;\n}\n\n/**\n * Detect paper source and ID from URL\n * \n * @param {string} url - URL to detect source from\n * @returns {SourceInfo|null} Source information or null if not detected\n */\nexport function detectSourceFromUrl(url: string): SourceInfo | null {\n  // Check each source type\n  for (const [sourceType, definition] of Object.entries(SOURCE_TYPES)) {\n    for (let i = 0; i < definition.url_patterns.length; i++) {\n      const match = url.match(definition.url_patterns[i]);\n      if (match) {\n        const id = definition.id_extractors[i](match);\n        return {\n          type: sourceType,\n          id: id,\n          primary_id: formatPrimaryId(sourceType, id),\n          url: url\n        };\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Checks if a string is in the required prefixed format\n * \n * @param {string} id - ID to check\n * @returns {boolean} True if the ID is in the correct format\n */\nexport function isNewFormat(id: string): boolean {\n  // Check if it has a valid prefix\n  const validPrefixes = Object.values(SOURCE_TYPES).map(def => `${def.prefix}.`);\n  validPrefixes.push('generic.'); // Add generic prefix\n  \n  return validPrefixes.some(prefix => id.startsWith(prefix));\n}\n\n/**\n * Gets a display label for a source type\n * \n * @param {string} sourceType - Source type\n * @returns {string} Human-readable label\n */\nexport function getSourceLabel(sourceType: string): string {\n  const labels: Record<string, string> = {\n    'arxiv': 'arXiv',\n    'semanticscholar': 'Semantic Scholar',\n    'doi': 'DOI',\n    'acm': 'ACM Digital Library',\n    'openreview': 'OpenReview'\n  };\n  \n  return labels[sourceType] || sourceType.charAt(0).toUpperCase() + sourceType.slice(1);\n}\n\n/**\n * Validate if an ID matches the expected format for its source\n * \n * @param {string} sourceType - Source type\n * @param {string} id - Source ID\n * @returns {boolean} Whether the ID is valid\n */\nexport function validateSourceId(sourceType: string, id: string): boolean {\n  const definition = SOURCE_TYPES[sourceType];\n  if (!definition || !definition.id_format) {\n    return true; // If no format is defined, assume valid\n  }\n  \n  return definition.id_format.test(id);\n}\n\n/**\n * Get canonical URL for a paper\n * \n * @param {string} sourceType - Source type\n * @param {string} id - Source ID\n * @returns {string} Canonical URL\n */\nexport function getCanonicalUrl(sourceType: string, id: string): string {\n  switch (sourceType) {\n    case 'arxiv':\n      return `https://arxiv.org/abs/${id}`;\n    case 'semanticscholar':\n      return `https://www.semanticscholar.org/paper/${id}`;\n    case 'doi':\n      return `https://doi.org/${id}`;\n    case 'acm':\n      return `https://dl.acm.org/doi/${id}`;\n    case 'openreview':\n      return `https://openreview.net/forum?id=${id}`;\n    default:\n      return id.startsWith('10.') ? `https://doi.org/${id}` : \"\";\n  }\n}\n","// extension/utils/logger.ts\n\n/**\n * Simple logger utility inspired by loguru\n */\nclass Logger {\n  private name: string;\n  \n  constructor(name: string) {\n    this.name = name;\n  }\n  \n  info(message: string, ...args: any[]): void {\n    console.log(`[INFO] ${this.name}: ${message}`, ...args);\n  }\n  \n  warning(message: string, ...args: any[]): void {\n    console.warn(`[WARNING] ${this.name}: ${message}`, ...args);\n  }\n  \n  error(message: string, ...args: any[]): void {\n    console.error(`[ERROR] ${this.name}: ${message}`, ...args);\n  }\n  \n  debug(message: string, ...args: any[]): void {\n    console.debug(`[DEBUG] ${this.name}: ${message}`, ...args);\n  }\n}\n\nexport const loguru = {\n  getLogger: (name: string) => new Logger(name)\n};\n","// extension/papers/manager.ts\nimport { GitHubStoreClient } from 'gh-store-client';\nimport type { Json } from 'gh-store-client';\nimport { \n  type PaperMetadata, \n  type InteractionLog, \n  type Interaction,\n  type ReadingSessionData,\n  isInteractionLog\n} from './types';\nimport { formatPrimaryId, isNewFormat, parseId } from './source_utils';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('PaperManager');\n\n/**\n * Checks if data is an interaction log\n * @param data - Data to check\n * @returns Whether data is an interaction log\n */\nconst isInteractionLogJs = (data: any): boolean => {\n  return typeof data === \"object\" && \n         data !== null && \n         typeof data.paper_id === \"string\" && \n         Array.isArray(data.interactions);\n};\n\nexport class PaperManager {\n  private client: GitHubStoreClient;\n  // Add creation locks for concurrency control\n  private creationLocks = new Map<string, Promise<any>>();\n  \n  constructor(client: GitHubStoreClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get or create a paper record\n   */\n  async getOrCreatePaper(paperData: any): Promise<any> {\n    // Ensure paperData has a primary_id\n    if (!paperData.primary_id) {\n      if (paperData.source && paperData.sourceId) {\n        paperData.primary_id = formatPrimaryId(paperData.source, paperData.sourceId);\n      } else if (paperData.arxivId) {\n        // Legacy handling - convert to new format\n        paperData.source = 'arxiv';\n        paperData.sourceId = paperData.arxivId;\n        paperData.primary_id = formatPrimaryId('arxiv', paperData.arxivId);\n        logger.warning(`Legacy arxivId format detected. Converted to primary_id: ${paperData.primary_id}`);\n      } else {\n        throw new Error(\"Invalid paper data: missing primary_id and cannot generate it\");\n      }\n    }\n    \n    const objectId = `paper:${paperData.primary_id}`;\n    logger.info(`Getting or creating paper: ${objectId}`);\n    \n    try {\n      // Try to get the paper\n      const obj = await this.client.getObject(objectId);\n      const data = obj.data as Record<string, any>;\n      \n      logger.info(`Found existing paper: ${objectId}`);\n      \n      // Ensure existing data has primary_id\n      if (!data.primary_id) {\n        // This should only happen for legacy papers\n        const enhancedData = {\n          ...data,\n          source: paperData.source || 'arxiv',\n          sourceId: paperData.sourceId || data.arxivId,\n          primary_id: paperData.primary_id\n        };\n        \n        // Update the object with enhanced data\n        logger.info(`Updating legacy paper with new format fields: ${objectId}`);\n        await this.client.updateObject(objectId, enhancedData);\n        return enhancedData;\n      }\n      \n      return data;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"No object found\")) {\n        // Create new paper with appropriate fields\n        const defaultPaperData: Record<string, any> = {\n          primary_id: paperData.primary_id,\n          source: paperData.source,\n          sourceId: paperData.sourceId,\n          url: paperData.url || '',\n          title: paperData.title || paperData.sourceId,\n          authors: paperData.authors || '',\n          abstract: paperData.abstract || '',\n          timestamp: new Date().toISOString(),\n          rating: 'novote'\n        };\n        \n        // For arXiv, maintain backward compatibility fields\n        if (paperData.source === 'arxiv') {\n          defaultPaperData.arxivId = paperData.sourceId;\n          defaultPaperData.arxiv_tags = paperData.arxiv_tags || [];\n          defaultPaperData.published_date = paperData.published_date || '';\n        } else {\n          // For other sources, add source-specific identifiers\n          defaultPaperData.identifiers = {\n            original: paperData.sourceId,\n            url: paperData.url\n          };\n          \n          // Add cross-references if available\n          if (paperData.arxivId) {\n            defaultPaperData.identifiers.arxiv = paperData.arxivId;\n          }\n          if (paperData.doi) {\n            defaultPaperData.identifiers.doi = paperData.doi;\n          }\n          if (paperData.s2Id) {\n            defaultPaperData.identifiers.s2 = paperData.s2Id;\n          }\n        }\n        \n        logger.info(`Creating new paper object: ${objectId}`);\n        try {\n          await this.client.createObject(objectId, defaultPaperData);\n          logger.info(`Successfully created paper: ${objectId}`);\n          return defaultPaperData;\n        } catch (createError) {\n          logger.error(`Error creating paper object: ${createError}`);\n          throw createError;\n        }\n      }\n      logger.error(`Error in getOrCreatePaper: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get or create an interaction log\n   */\n  private async getOrCreateInteractionLog(paperId: string): Promise<InteractionLog> {\n    // Ensure paperId is in the new format\n    if (!isNewFormat(paperId)) {\n      logger.warning(`Legacy format paperId detected: ${paperId}. This is deprecated.`);\n      paperId = formatPrimaryId('arxiv', paperId);\n    }\n    \n    const objectId = `interactions:${paperId}`;\n    \n    // Check if we're already creating this log\n    if (this.creationLocks.has(objectId)) {\n      logger.info(`Waiting for existing creation of interaction log: ${objectId}`);\n      return this.creationLocks.get(objectId) as Promise<InteractionLog>;\n    }\n    \n    // Create a new promise for this operation\n    const creationPromise = (async () => {\n      try {\n        const obj = await this.client.getObject(objectId);\n        const data = obj.data as unknown;\n        \n        // Use TypeScript type guard if available, otherwise JS version\n        if (typeof isInteractionLog === 'function' ? \n            isInteractionLog(data) : \n            isInteractionLogJs(data)) {\n          return data as InteractionLog;\n        }\n        \n        throw new Error('Invalid interaction log format');\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('No object found')) {\n          // Create new log\n          const newLog: InteractionLog = {\n            paper_id: paperId,\n            interactions: []\n          };\n          \n          // Check for legacy arxiv ID format\n          const { type, id } = parseId(paperId);\n          if (type === 'arxiv') {\n            newLog.legacy_id = id;\n          }\n          \n          logger.info(`Creating new interaction log: ${objectId}`);\n          await this.client.createObject(objectId, newLog);\n          return newLog;\n        }\n        throw error;\n      } finally {\n        // Release the lock after a delay\n        setTimeout(() => {\n          this.creationLocks.delete(objectId);\n        }, 500);\n      }\n    })();\n    \n    // Store the promise\n    this.creationLocks.set(objectId, creationPromise);\n    \n    return creationPromise;\n  }\n\n  /**\n   * Log a reading session for a paper\n   */\n  async logReadingSession(\n    paperId: string,\n    session: ReadingSessionData,\n    paperData?: any\n  ): Promise<void> {\n    // Ensure paperId is in the new format\n    if (!isNewFormat(paperId)) {\n      logger.warning(`Legacy format paperId detected: ${paperId}. Converting to new format.`);\n      paperId = formatPrimaryId('arxiv', paperId);\n      \n      // If paperData provided but without primary_id, add it\n      if (paperData && !paperData.primary_id) {\n        paperData = {\n          ...paperData,\n          source: 'arxiv',\n          sourceId: paperData.arxivId || paperId.split('.')[1],\n          primary_id: paperId\n        };\n      }\n    }\n\n    // Ensure paper exists with proper data\n    if (paperData) {\n      await this.getOrCreatePaper(paperData);\n    }\n\n    // Log the session as interaction\n    await this.addInteraction(paperId, {\n      type: \"reading_session\",\n      timestamp: new Date().toISOString(),\n      data: session\n    });\n  }\n\n  /**\n   * Log an annotation for a paper\n   */\n  async logAnnotation(\n    paperId: string,\n    key: string,\n    value: Json,\n    paperData?: any\n  ): Promise<void> {\n    // Ensure paperId is in the new format\n    if (!isNewFormat(paperId)) {\n      logger.warning(`Legacy format paperId detected: ${paperId}. Converting to new format.`);\n      paperId = formatPrimaryId('arxiv', paperId);\n      \n      // If paperData provided but without primary_id, add it\n      if (paperData && !paperData.primary_id) {\n        paperData = {\n          ...paperData,\n          source: 'arxiv',\n          sourceId: paperData.arxivId || paperId.split('.')[1],\n          primary_id: paperId\n        };\n      }\n    }\n\n    // Ensure paper exists with proper data\n    if (paperData) {\n      await this.getOrCreatePaper(paperData);\n    }\n\n    // Log the annotation as interaction\n    await this.addInteraction(paperId, {\n      type: \"annotation\",\n      timestamp: new Date().toISOString(),\n      data: { key, value }\n    });\n  }\n\n  /**\n   * Update a paper's rating\n   */\n  async updateRating(\n    paperId: string,\n    rating: string,\n    paperData?: any\n  ): Promise<void> {\n    // Ensure paperId is in the new format\n    if (!isNewFormat(paperId)) {\n      logger.warning(`Legacy format paperId detected: ${paperId}. Converting to new format.`);\n      paperId = formatPrimaryId('arxiv', paperId);\n      \n      // If paperData provided but without primary_id, add it\n      if (paperData && !paperData.primary_id) {\n        paperData = {\n          ...paperData,\n          source: 'arxiv',\n          sourceId: paperData.arxivId || paperId.split('.')[1],\n          primary_id: paperId\n        };\n      }\n    }\n\n    // Get existing paper data\n    const paper = await this.getOrCreatePaper(paperData || { primary_id: paperId });\n\n    // Update rating\n    const objectId = `paper:${paperId}`;\n    await this.client.updateObject(objectId, { \n      ...paper,\n      rating \n    });\n\n    // Log rating change\n    await this.addInteraction(paperId, {\n      type: \"rating\",\n      timestamp: new Date().toISOString(),\n      data: { rating }\n    });\n  }\n\n  /**\n   * Add an interaction to a paper's log\n   */\n  private async addInteraction(paperId: string, interaction: Interaction): Promise<void> {\n    const log = await this.getOrCreateInteractionLog(paperId);\n    log.interactions.push(interaction);\n    \n    // Store with the new format ID\n    const objectId = `interactions:${paperId}`;\n    await this.client.updateObject(objectId, log);\n  }\n\n  /**\n   * Get interactions for a paper\n   */\n  async getInteractions(\n    paperId: string,\n    options: {\n      type?: string;\n      startTime?: Date;\n      endTime?: Date;\n    } = {}\n  ): Promise<Interaction[]> {\n    // Ensure paperId is in the new format\n    if (!isNewFormat(paperId)) {\n      logger.warning(`Legacy format paperId detected: ${paperId}. Converting to new format.`);\n      paperId = formatPrimaryId('arxiv', paperId);\n    }\n    \n    try {\n      const log = await this.getOrCreateInteractionLog(paperId);\n      let interactions = log.interactions;\n\n      if (options.type) {\n        interactions = interactions.filter((i: Interaction) => i.type === options.type);\n      }\n\n      if (options.startTime || options.endTime) {\n        interactions = interactions.filter((i: Interaction) => {\n          const time = new Date(i.timestamp);\n          if (options.startTime && time < options.startTime) return false;\n          if (options.endTime && time > options.endTime) return false;\n          return true;\n        });\n      }\n\n      return interactions;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        return [];\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Get total reading time for a paper\n   */\n  async getPaperReadingTime(paperId: string): Promise<number> {\n    // Ensure paperId is in the new format\n    if (!isNewFormat(paperId)) {\n      logger.warning(`Legacy format paperId detected: ${paperId}. Converting to new format.`);\n      paperId = formatPrimaryId('arxiv', paperId);\n    }\n    \n    const interactions = await this.getInteractions(paperId, { type: 'reading_session' });\n    return interactions.reduce((total, i) => {\n      logger.info('Calculating from interaction:', i);\n      \n      const data = i.data;\n      if (typeof data === 'object' && data !== null && 'duration_seconds' in data) {\n        return total + (data.duration_seconds as number);\n      }\n      return total;\n    }, 0);\n  }\n\n  /**\n   * Get paper history\n   */\n  async getPaperHistory(paperId: string): Promise<Json[]> {\n    // Ensure paperId is in the new format\n    if (!isNewFormat(paperId)) {\n      logger.warning(`Legacy format paperId detected: ${paperId}. Converting to new format.`);\n      paperId = formatPrimaryId('arxiv', paperId);\n    }\n    \n    const objectId = `paper:${paperId}`;\n    return this.client.getObjectHistory(objectId);\n  }\n}\n","// extension/config/session.js\n\n// Default configuration values\nconst DEFAULT_CONFIG = {\n    idleThresholdMinutes: 5,\n    minSessionDurationSeconds: 30,\n    // Adding more granular control\n    requireContinuousActivity: true,  // If true, resets timer on idle\n    logPartialSessions: false,        // If true, logs sessions even if under minimum duration\n    activityUpdateIntervalSeconds: 1  // How often to update active time\n};\n\n// Load session configuration from storage\nasync function loadSessionConfig() {\n    const items = await chrome.storage.sync.get('sessionConfig');\n    return { ...DEFAULT_CONFIG, ...items.sessionConfig };\n}\n\n// Save session configuration to storage\nasync function saveSessionConfig(config) {\n    await chrome.storage.sync.set({\n        sessionConfig: {\n            idleThresholdMinutes: Number(config.idleThresholdMinutes),\n            minSessionDurationSeconds: Number(config.minSessionDurationSeconds),\n            requireContinuousActivity: Boolean(config.requireContinuousActivity),\n            logPartialSessions: Boolean(config.logPartialSessions),\n            activityUpdateIntervalSeconds: Number(config.activityUpdateIntervalSeconds)\n        }\n    });\n}\n\n// Convert configuration to milliseconds for internal use\nfunction getConfigurationInMs(config) {\n    return {\n        idleThreshold: config.idleThresholdMinutes * 60 * 1000,\n        minSessionDuration: config.minSessionDurationSeconds * 1000,\n        activityUpdateInterval: config.activityUpdateIntervalSeconds * 1000,\n        requireContinuousActivity: config.requireContinuousActivity,\n        logPartialSessions: config.logPartialSessions\n    };\n}\n\nexport { loadSessionConfig, saveSessionConfig, getConfigurationInMs, DEFAULT_CONFIG };","// extension/papers/detector.ts\n// Detector for academic paper URLs from multiple sources\n\nimport { formatPrimaryId, detectSourceFromUrl } from './source_utils';\nimport { SourceInfo } from './types';\n\n/**\n * Multi-source paper URL detector\n */\nexport class MultiSourceDetector {\n  /**\n   * Detect paper source and metadata from URL\n   * \n   * @param {string} url - URL to analyze\n   * @returns {SourceInfo|null} Paper source information or null if not detected\n   */\n  static detect(url: string): SourceInfo | null {\n    return detectSourceFromUrl(url);\n  }\n  \n  /**\n   * Process a URL to extract paper data\n   * This is an enhanced version of the original processArxivUrl function\n   * \n   * @param {string} url - URL to process\n   * @param {Function} existingProcessArxivUrl - The original arXiv processing function\n   * @returns {Promise<any|null>} Paper data or null if not detected/processed\n   */\n  static async processUrl(\n    url: string, \n    existingProcessArxivUrl?: (url: string) => Promise<any>\n  ): Promise<any | null> {\n    // First try to detect the source from URL\n    const sourceInfo = this.detect(url);\n    \n    if (!sourceInfo) {\n      // Fall back to the original arXiv processor if source not detected\n      return existingProcessArxivUrl ? existingProcessArxivUrl(url) : null;\n    }\n    \n    // ArXiv URLs should still use the original processor for full compatibility\n    if (sourceInfo.type === 'arxiv' && existingProcessArxivUrl) {\n      const paperData = await existingProcessArxivUrl(url);\n      \n      // Add new fields for multi-source support without breaking compatibility\n      if (paperData) {\n        paperData.source = 'arxiv';\n        paperData.sourceId = paperData.arxivId;\n        paperData.primary_id = formatPrimaryId('arxiv', paperData.arxivId);\n      }\n      \n      return paperData;\n    }\n    \n    // For non-arXiv sources, extract basic metadata\n    // This is a minimal implementation to get started\n    const { type, id, primary_id } = sourceInfo;\n    \n    const paperData: Record<string, any> = {\n      source: type,\n      sourceId: id,\n      primary_id: primary_id,\n      url: url,\n      title: `${type.toUpperCase()} Paper: ${id}`, // Generic title as placeholder\n      authors: '',\n      abstract: '',\n      timestamp: new Date().toISOString(),\n      rating: 'novote'\n    };\n    \n    // Try to extract metadata from page if tab is available\n    try {\n      // This functionality is implemented in process_paper_url.ts\n      // Will be added as part of the integration\n    } catch (error) {\n      console.error('Error extracting metadata:', error);\n    }\n    \n    return paperData;\n  }\n}\n","// extension/papers/plugins/registry.ts\n\nimport { SourcePlugin } from './source_plugin';\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('PluginRegistry');\n\nclass PluginRegistry {\n  private plugins: Map<string, SourcePlugin> = new Map();\n  \n  register(plugin: SourcePlugin): void {\n    if (this.plugins.has(plugin.id)) {\n      logger.warning(`Plugin with ID ${plugin.id} already registered, overwriting`);\n    }\n    this.plugins.set(plugin.id, plugin);\n    logger.info(`Registered plugin: ${plugin.name} (${plugin.id})`);\n  }\n  \n  getAll(): SourcePlugin[] {\n    return Array.from(this.plugins.values());\n  }\n  \n  get(id: string): SourcePlugin | undefined {\n    return this.plugins.get(id);\n  }\n  \n  findForUrl(url: string): { plugin: SourcePlugin; id: string } | null {\n    for (const plugin of this.plugins.values()) {\n      for (const pattern of plugin.urlPatterns) {\n        if (pattern.test(url)) {\n          const id = plugin.extractId(url);\n          if (id) {\n            return { plugin, id };\n          }\n        }\n      }\n    }\n    return null;\n  }\n}\n\n// Export singleton instance\nexport const pluginRegistry = new PluginRegistry();\n","/**\n * Enhance paper data with additional metadata from APIs\n * \n * @param {any} paperData - Basic paper data\n * @returns {Promise<any>} Enhanced paper data\n */\nexport async function enhancePaperData(paperData: any): Promise<any> {\n  if (!paperData.source || !paperData.sourceId) {\n    return paperData;\n  }\n  \n  try {\n    // Try to get additional metadata\n    const additionalData = await fetchAdditionalMetadata(\n      paperData.source,\n      paperData.sourceId\n    );\n    \n    if (additionalData) {\n      // Check if we have a plugin for this source\n      const plugin = pluginRegistry.get(paperData.source);\n      \n      if (plugin) {\n        // The plugin API already handled this in fetchAdditionalMetadata\n        // Just add source info\n        return {\n          ...paperData,\n          ...additionalData,\n          source: paperData.source,\n          sourceId: paperData.sourceId,\n          primary_id: paperData.primary_id\n        };\n      }\n      \n      // Source-specific data enhancement\n      if (paperData.source === 'semanticscholar') {\n        // Update with S2 data\n        if (!paperData.title && additionalData.title) {\n          paperData.title = additionalData.title;\n        }\n        \n        if (!paperData.abstract && additionalData.abstract) {\n          paperData.abstract = additionalData.abstract;\n        }\n        \n        if (!paperData.authors && additionalData.authors) {\n          paperData.authors = additionalData.authors\n            .map((author: any) => author.name)\n            .join(', ');\n        }\n        \n        // Add identifiers\n        if (additionalData.doi) {\n          paperData.doi = additionalData.doi;\n          paperData.identifiers.doi = additionalData.doi;\n        }\n        \n        if (additionalData.arxivId) {\n          paperData.identifiers.arxiv = additionalData.arxivId;\n        }\n        \n        // Add citation count\n        if (additionalData.citationCount) {\n          paperData.citations = additionalData.citationCount;\n        }\n      } else if (paperData.source === 'doi') {\n        // Update with CrossRef data\n        if (!paperData.title && additionalData.title) {\n          paperData.title = additionalData.title;\n        }\n        \n        if (!paperData.authors && additionalData.author) {\n          paperData.authors = additionalData.author\n            .map((author: any) => {\n              if (author.given && author.family) {\n                return `${author.given} ${author.family}`;\n              }\n              return author.name || '';\n            })\n            .filter(Boolean)\n            .join(', ');\n        }\n        \n        // Add publication date\n        if (!paperData.published_date && additionalData.created) {\n          const date = new Date(additionalData.created['date-time']);\n          paperData.published_date = date.toISOString().split('T')[0];\n        }\n      } else if (paperData.source === 'openreview') {\n        // Update with OpenReview data\n        if (additionalData.notes && additionalData.notes.length > 0) {\n          const note = additionalData.notes[0];\n          \n          if (note.content) {\n            if (!paperData.title && note.content.title) {\n              paperData.title = note.content.title;\n            }\n            \n            if (!paperData.abstract && note.content.abstract) {\n              paperData.abstract = note.content.abstract;\n            }\n            \n            if (!paperData.authors && note.content.authors) {\n              if (Array.isArray(note.content.authors)) {\n                paperData.authors = note.content.authors.join(', ');\n              } else {\n                paperData.authors = note.content.authors;\n              }\n            }\n            \n            // Add venue information\n            if (note.venue) {\n              paperData.venue = note.venue;\n            }\n            \n            // Add specific OpenReview metadata\n            paperData.source_specific_metadata = {\n              forum_id: note.forum || note.id,\n              invitation: note.invitation,\n              creation_date: note.cdate ? new Date(note.cdate).toISOString() : undefined,\n              publication_date: note.pdate ? new Date(note.pdate).toISOString() : undefined\n            };\n          }\n        }\n      }\n    }\n  } catch (error) {\n    logger.error('Error enhancing paper data:', error);\n  }\n  \n  return paperData;\n}// extension/papers/process_paper_url.ts\n// Process paper URLs from multiple sources with plugin system integration\n\nimport { MultiSourceDetector } from './detector';\nimport { SourceInfo } from './types';\nimport { formatPrimaryId } from './source_utils';\nimport { pluginRegistry } from './plugins/registry';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('PaperProcessor');\n\n/**\n * Metadata extracted from a paper page\n */\ninterface PageMetadata {\n  title?: string;\n  authors?: string;\n  abstract?: string;\n  published_date?: string;\n  doi?: string;\n  url?: string;\n  citations?: number;\n}\n\n/**\n * Extract metadata from the current tab's page\n * \n * @param {number} tabId - Tab ID to extract metadata from\n * @returns {Promise<PageMetadata|null>} Extracted metadata or null\n */\nasync function extractMetadataFromPage(tabId: number): Promise<PageMetadata | null> {\n  try {\n    // Use chrome.scripting.executeScript instead of the deprecated chrome.tabs.executeScript\n    const results = await chrome.scripting.executeScript({\n      target: { tabId: tabId },\n      func: () => {\n        try {\n          // Helper function to safely get content from meta tags\n          const getMetaContent = (selector: string): string | undefined => {\n            const element = document.querySelector(selector);\n            return element && 'content' in element ? \n              (element as HTMLMetaElement).content : undefined;\n          };\n\n          // Try to extract from common meta tags first\n          const metadata: {\n            title?: string;\n            authors?: string;\n            abstract?: string;\n            published_date?: string;\n            doi?: string;\n            url?: string;\n            citations?: number | null;\n          } = {\n            title: getMetaContent('meta[name=\"citation_title\"]') ||\n                   getMetaContent('meta[property=\"og:title\"]') ||\n                   document.title,\n            authors: getMetaContent('meta[name=\"citation_author\"]') ||\n                     getMetaContent('meta[name=\"citation_authors\"]') ||\n                     getMetaContent('meta[name=\"author\"]'),\n            abstract: getMetaContent('meta[name=\"description\"]') ||\n                      getMetaContent('meta[property=\"og:description\"]') ||\n                      getMetaContent('meta[name=\"citation_abstract\"]'),\n            published_date: getMetaContent('meta[name=\"citation_publication_date\"]') ||\n                            getMetaContent('meta[name=\"citation_date\"]'),\n            doi: getMetaContent('meta[name=\"citation_doi\"]'),\n            url: getMetaContent('meta[property=\"og:url\"]') || window.location.href,\n            citations: null\n          };\n          \n          // Source-specific extraction fallbacks\n          if (!metadata.title) {\n            const h1 = document.querySelector('h1');\n            if (h1 && h1.textContent) metadata.title = h1.textContent.trim();\n          }\n          \n          if (!metadata.abstract) {\n            // Try common abstract containers\n            const abstractEl = document.querySelector('.abstract') || \n                              document.querySelector('#abstract') ||\n                              document.querySelector('[class*=\"abstract\"]') ||\n                              document.querySelector('[id*=\"abstract\"]');\n            if (abstractEl && abstractEl.textContent) metadata.abstract = abstractEl.textContent.trim();\n          }\n          \n          // DOI-specific extraction\n          if (!metadata.doi && window.location.href.includes('doi.org')) {\n            const match = window.location.href.match(/doi\\.org\\/(10\\.[0-9.]+\\/[^\\s&/?#]+[^\\s&/?#.:])/);\n            if (match) metadata.doi = match[1];\n          }\n          \n          // ACM-specific extraction\n          if (window.location.href.includes('dl.acm.org')) {\n            // Try to get citation count\n            const citationEl = document.querySelector('.citation-metrics');\n            if (citationEl && citationEl.textContent) {\n              const citText = citationEl.textContent;\n              const citMatch = citText.match(/(\\d+)\\s+citations/i);\n              if (citMatch) metadata.citations = parseInt(citMatch[1], 10);\n            }\n            \n            // Try to extract DOI from URL or page\n            if (!metadata.doi) {\n              const doiMatch = window.location.href.match(/dl\\.acm\\.org\\/doi\\/(10\\.[0-9.]+\\/[^\\s&/?#]+[^\\s&/?#.:])/);\n              if (doiMatch) metadata.doi = doiMatch[1];\n            }\n          }\n          \n          // Semantic Scholar specific extraction\n          if (window.location.href.includes('semanticscholar.org')) {\n            // Try to get citation count\n            const citationEl = document.querySelector('[data-test-id=\"citation-count\"]');\n            if (citationEl && citationEl.textContent) {\n              const citText = citationEl.textContent;\n              const citMatch = citText.match(/(\\d+)/);\n              if (citMatch) metadata.citations = parseInt(citMatch[1], 10);\n            }\n            \n            // Format authors if found in a specific format\n            const authorElements = document.querySelectorAll('[data-test-id=\"author-list\"] a');\n            if (authorElements.length > 0) {\n              metadata.authors = Array.from(authorElements)\n                .map(el => el.textContent?.trim())\n                .filter(Boolean)\n                .join(', ');\n            }\n          }\n\n          // OpenReview specific extraction\n          if (window.location.href.includes('openreview.net')) {\n            // Try to extract authors from meta tags or DOM\n            if (!metadata.authors) {\n              const authorElements = document.querySelectorAll('meta[name=\"citation_author\"]');\n              if (authorElements.length > 0) {\n                metadata.authors = Array.from(authorElements)\n                  .map(el => (el as HTMLMetaElement).content)\n                  .filter(Boolean)\n                  .join(', ');\n              } else {\n                const authorEl = document.querySelector('.signatures, .author, .authors');\n                if (authorEl && authorEl.textContent) {\n                  metadata.authors = authorEl.textContent.trim();\n                }\n              }\n            }\n            \n            // Try to extract abstract from meta tags or DOM\n            if (!metadata.abstract) {\n              const abstractEl = document.querySelector('strong.note-content-field:contains(\"Abstract\") ~ span.note-content-value');\n              if (abstractEl && abstractEl.textContent) {\n                metadata.abstract = abstractEl.textContent.trim();\n              }\n            }\n          }\n          \n          return metadata;\n        } catch (e) {\n          console.error('Error extracting metadata:', e);\n          return null;\n        }\n      }\n    });\n    \n    if (results && results[0] && results[0].result) {\n      const result = results[0].result as {\n        title?: string;\n        authors?: string;\n        abstract?: string;\n        published_date?: string;\n        doi?: string;\n        url?: string;\n        citations?: number | null;\n      };\n      \n      // Convert to PageMetadata and ensure citations is properly typed\n      const metadata: PageMetadata = {\n        title: result.title,\n        authors: result.authors,\n        abstract: result.abstract,\n        published_date: result.published_date,\n        doi: result.doi,\n        url: result.url,\n        citations: result.citations !== null ? result.citations : undefined\n      };\n      \n      return metadata;\n    }\n  } catch (error) {\n    logger.error('Error executing metadata extraction script:', error);\n  }\n  \n  return null;\n}\n\n/**\n * Helper function to find the appropriate plugin for a URL\n * \n * @param {string} url - URL to process\n * @returns {Object|null} - Source information or null\n */\nfunction findPluginForUrl(url: string): (SourceInfo & { plugin?: any }) | null {\n  // First try using the plugin registry\n  const plugins = pluginRegistry.getAll();\n  \n  for (const plugin of plugins) {\n    for (const pattern of plugin.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        const id = plugin.extractId(url);\n        if (id) {\n          return {\n            type: plugin.id,\n            id: id,\n            primary_id: plugin.formatId ? plugin.formatId(id) : formatPrimaryId(plugin.id, id),\n            url,\n            plugin: plugin\n          };\n        }\n      }\n    }\n  }\n  \n  // Fallback to legacy detector if no plugin match\n  return MultiSourceDetector.detect(url);\n}\n\n/**\n * Process a paper URL from any supported source\n * \n * @param {string} url - The URL to process\n * @param {Function} processArxivUrl - The original arXiv processing function\n * @returns {Promise<any|null>} Paper data or null if not detected\n */\nexport async function processPaperUrl(\n  url: string, \n  processArxivUrl?: (url: string) => Promise<any>\n): Promise<any | null> {\n  logger.info('Processing URL for multiple sources:', url);\n  \n  // Detect source and ID from URL\n  const sourceInfo = findPluginForUrl(url);\n  \n  if (!sourceInfo) {\n    logger.info('No paper source detected');\n    return null;\n  }\n  \n  const { type: sourceType, id: sourceId, primary_id } = sourceInfo;\n  logger.info(`Detected ${sourceType} paper with ID: ${sourceId}`);\n  \n  // First try using plugin if available\n  if (sourceInfo.plugin) {\n    const plugin = sourceInfo.plugin;\n    \n    // Try to use plugin's API\n    if (plugin.hasApi && plugin.fetchApiData) {\n      try {\n        logger.info(`Using ${plugin.id} plugin API`);\n        const apiData = await plugin.fetchApiData(sourceId);\n        if (Object.keys(apiData).length > 0) {\n          // Add required source information\n          return {\n            ...apiData,\n            source: plugin.id,\n            sourceId,\n            primary_id,\n            url\n          };\n        }\n      } catch (error) {\n        logger.error(`Error using plugin API: ${error}`);\n      }\n    }\n  }\n  \n  // For arXiv papers, use the original processor for compatibility if no plugin data\n  if (sourceType === 'arxiv' && processArxivUrl) {\n    const paperData = await processArxivUrl(url);\n    \n    // Add multi-source fields if successful\n    if (paperData) {\n      paperData.source = 'arxiv';\n      paperData.sourceId = paperData.arxivId;\n      paperData.primary_id = primary_id;\n    }\n    \n    return paperData;\n  }\n  \n  // For other sources, create a basic paper data object\n  let paperData: any = {\n    source: sourceType,\n    sourceId: sourceId,\n    primary_id: primary_id, // The standardized format ID\n    url: url,\n    timestamp: new Date().toISOString(),\n    rating: 'novote'\n  };\n  \n  // Try to extract metadata from the page - but handle the case where this fails\n  try {\n    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (tabs.length > 0 && tabs[0].id) {\n      const metadata = await extractMetadataFromPage(tabs[0].id);\n      \n      if (metadata) {\n        paperData.title = metadata.title || `${sourceType.toUpperCase()} Paper: ${sourceId}`;\n        paperData.authors = metadata.authors || '';\n        paperData.abstract = metadata.abstract || '';\n        paperData.published_date = metadata.published_date || '';\n        \n        // Add source-specific data\n        if (metadata.doi) {\n          paperData.doi = metadata.doi;\n        }\n        \n        if (metadata.citations !== undefined) {\n          paperData.citations = metadata.citations;\n        }\n      } else {\n        // Default title if metadata extraction fails\n        paperData.title = `${sourceType.toUpperCase()} Paper: ${sourceId}`;\n      }\n    } else {\n      paperData.title = `${sourceType.toUpperCase()} Paper: ${sourceId}`;\n    }\n  } catch (error) {\n    logger.error('Error extracting metadata:', error);\n    // If there's any error in metadata extraction, use a default title\n    paperData.title = `${sourceType.toUpperCase()} Paper: ${sourceId}`;\n  }\n  \n  // Add source-specific identifiers\n  paperData.identifiers = {\n    original: sourceId,\n    url: url\n  };\n  \n  if (sourceType === 'doi' || sourceType === 'acm') {\n    paperData.doi = sourceId;\n    paperData.identifiers.doi = sourceId;\n  } else if (sourceType === 'semanticscholar') {\n    paperData.s2Id = sourceId;\n    paperData.identifiers.s2 = sourceId;\n  }\n  \n  logger.info('Processed paper data:', paperData);\n  return paperData;\n}\n\n/**\n * Fetch additional metadata for source types that have APIs\n * This is an optional enhancement that can fetch richer metadata\n * \n * @param {string} sourceType - Source type (e.g., 'arxiv', 'doi')\n * @param {string} sourceId - Source-specific ID\n * @returns {Promise<any|null>} Additional metadata or null if unavailable\n */\nexport async function fetchAdditionalMetadata(\n  sourceType: string,\n  sourceId: string\n): Promise<any | null> {\n  // First check if we have a plugin for this source\n  const plugin = pluginRegistry.get(sourceType);\n  \n  if (plugin && plugin.hasApi && plugin.fetchApiData) {\n    try {\n      logger.info(`Using ${plugin.id} plugin API for additional metadata`);\n      return await plugin.fetchApiData(sourceId);\n    } catch (error) {\n      logger.error(`Error fetching metadata via plugin API: ${error}`);\n    }\n  }\n\n  // Fall back to built-in API fetchers\n  try {\n    // Source-specific API calls\n    if (sourceType === 'semanticscholar') {\n      // Semantic Scholar API\n      const response = await fetch(`https://api.semanticscholar.org/v1/paper/${sourceId}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    } else if (sourceType === 'doi') {\n      // CrossRef API for DOIs\n      const response = await fetch(`https://api.crossref.org/works/${encodeURIComponent(sourceId)}`);\n      if (response.ok) {\n        const data = await response.json();\n        return data.message;\n      }\n    } else if (sourceType === 'openreview') {\n      // OpenReview API\n      const response = await fetch(`https://api.openreview.net/notes?id=${sourceId}`);\n      if (response.ok) {\n        return await response.json();\n      }\n    }\n  } catch (error) {\n    logger.error(`Error fetching additional metadata for ${sourceType}:${sourceId}:`, error);\n  }\n  \n  return null;\n}\n","// extension/background_multi_source.js\n// Extension to support multiple paper sources\n\nimport { MultiSourceDetector } from './papers/detector';\nimport { processPaperUrl as processUrl, enhancePaperData } from './papers/process_paper_url';\nimport { loguru } from './utils/logger';\nimport { formatPrimaryId, isNewFormat } from './papers/source_utils';\n\nconst logger = loguru.getLogger('MultiSourceSupport');\n\n/**\n * Context for external functions provided by the background script\n */\nlet externalContext = {\n  createGithubIssue: null,\n  endCurrentSession: null,\n  EnhancedReadingSession: null,\n  sessionConfig: null,\n  startActivityTracking: null,\n  setCurrentPaperData: null,\n  processArxivUrl: null\n};\n\n// Track URLs that are being processed to avoid duplicates\nconst pendingUrls = new Set();\n\n/**\n * Extracts metadata from the current page if possible\n * \n * @param {number} tabId - ID of the current tab\n * @returns {Promise<Object|null>} - Extracted metadata or null\n */\nasync function extractMetadataFromPage(tabId) {\n  try {\n    const result = await chrome.scripting.executeScript({\n      target: { tabId: tabId },\n      func: () => {\n        try {\n          // Helper function to safely get content from meta tags\n          const getMetaContent = (selector) => {\n            const element = document.querySelector(selector);\n            return element && 'content' in element ? \n              element.content : undefined;\n          };\n\n          // Try to extract from common meta tags first\n          const metadata = {\n            title: getMetaContent('meta[name=\"citation_title\"]') ||\n                   getMetaContent('meta[property=\"og:title\"]') ||\n                   document.title,\n            authors: getMetaContent('meta[name=\"citation_author\"]') ||\n                     getMetaContent('meta[name=\"citation_authors\"]') ||\n                     getMetaContent('meta[name=\"author\"]'),\n            abstract: getMetaContent('meta[name=\"description\"]') ||\n                      getMetaContent('meta[property=\"og:description\"]') ||\n                      getMetaContent('meta[name=\"citation_abstract\"]'),\n            published_date: getMetaContent('meta[name=\"citation_publication_date\"]') ||\n                            getMetaContent('meta[name=\"citation_date\"]'),\n            doi: getMetaContent('meta[name=\"citation_doi\"]')\n          };\n          \n          // If metadata not found in meta tags, try common page elements\n          if (!metadata.title) {\n            const h1 = document.querySelector('h1');\n            if (h1 && h1.textContent) metadata.title = h1.textContent.trim();\n          }\n          \n          if (!metadata.abstract) {\n            const abstractEl = document.querySelector('.abstract') || \n                              document.querySelector('#abstract') ||\n                              document.querySelector('[class*=\"abstract\"]');\n            if (abstractEl && abstractEl.textContent) metadata.abstract = abstractEl.textContent.trim();\n          }\n          \n          return metadata;\n        } catch (e) {\n          console.error('Error extracting metadata:', e);\n          return null;\n        }\n      }\n    });\n    \n    if (result && result[0] && result[0].result) {\n      return result[0].result;\n    }\n  } catch (error) {\n    logger.error('Error executing script:', error);\n  }\n  \n  return null;\n}\n\n/**\n * Enhanced version of processArxivUrl that supports multiple sources\n * \n * @param {string} url - URL to process\n * @returns {Promise<Object|null>} - Paper data or null\n */\nasync function processPaperUrl(url) {\n  logger.info(`Multi-source processing for URL: ${url}`);\n  \n  // Prevent duplicate processing\n  if (pendingUrls.has(url)) {\n    logger.info(`URL already being processed, skipping: ${url}`);\n    return null;\n  }\n  \n  // Mark URL as being processed\n  pendingUrls.add(url);\n  \n  try {\n    // Use detector to identify paper source\n    const sourceInfo = MultiSourceDetector.detect(url);\n    \n    // If not a recognized paper URL, exit\n    if (!sourceInfo) {\n      logger.info('No recognized paper source detected in URL');\n      \n      // Try legacy arXiv detection as fallback\n      if (externalContext.processArxivUrl) {\n        return externalContext.processArxivUrl(url);\n      }\n      return null;\n    }\n    \n    logger.info(`Detected paper source: ${sourceInfo.type}:${sourceInfo.id}`);\n    \n    const { type: sourceType, id: sourceId, primary_id } = sourceInfo;\n    \n    // For arXiv, use the existing well-tested processor if available\n    if (sourceType === 'arxiv' && externalContext.processArxivUrl) {\n      const paperData = await externalContext.processArxivUrl(url);\n      \n      // Ensure it has all required fields\n      if (paperData) {\n        if (!paperData.source) paperData.source = 'arxiv';\n        if (!paperData.sourceId) paperData.sourceId = paperData.arxivId;\n        if (!paperData.primary_id) paperData.primary_id = primary_id;\n      }\n      \n      return paperData;\n    }\n    \n    // Delegate to the TypeScript implementation in papers/process_paper_url.ts\n    try {\n      const paperData = await processUrl(url, externalContext.processArxivUrl);\n      \n      // Store in GitHub if available - but don't await to avoid race conditions\n      if (paperData && externalContext.createGithubIssue) {\n        externalContext.createGithubIssue(paperData).catch(e => {\n          logger.error('Error storing paper data in GitHub:', e);\n        });\n      }\n      \n      return paperData;\n    } catch (error) {\n      logger.error('Error processing paper URL:', error);\n      \n      // Create basic paper data as fallback\n      return {\n        source: sourceType,\n        sourceId: sourceId,\n        primary_id: primary_id,\n        url: url,\n        title: `${sourceType.toUpperCase()} Paper: ${sourceId}`,\n        timestamp: new Date().toISOString(),\n        rating: 'novote'\n      };\n    }\n  } catch (error) {\n    logger.error(`Unexpected error in processPaperUrl: ${error}`);\n    return null;\n  } finally {\n    // Remove URL from pending after a delay to prevent immediate reprocessing\n    setTimeout(() => {\n      pendingUrls.delete(url);\n    }, 500);\n  }\n}\n\n/**\n * Enhanced tab change handler for multiple sources\n * \n * @param {Object} tab - Current tab data\n * @param {Function} originalHandler - Original handler for legacy support\n */\nasync function enhancedHandleTabChange(tab, originalHandler) {\n  if (!tab || !tab.url) {\n    return;\n  }\n  \n  const url = tab.url;\n  \n  // Prevent duplicate processing\n  if (pendingUrls.has(url)) {\n    logger.info(`URL already being processed in enhancedHandleTabChange: ${url}`);\n    return;\n  }\n  \n  // Mark URL as being processed\n  pendingUrls.add(url);\n  \n  try {\n    // Use detector to identify paper source\n    const sourceInfo = MultiSourceDetector.detect(url);\n    const isPaperUrl = !!sourceInfo;\n    \n    logger.info(`Tab change detected:`, { isPaperUrl, url, sourceInfo });\n    \n    if (!isPaperUrl) {\n      logger.info('Not a recognized paper page, ending current session');\n      \n      // End current session if available\n      if (externalContext.endCurrentSession) {\n        await externalContext.endCurrentSession();\n      }\n      return;\n    }\n    \n    // For arXiv papers, use the original handler for full compatibility\n    if (sourceInfo.type === 'arxiv' && originalHandler) {\n      return originalHandler(tab);\n    }\n    \n    // For other sources, end any existing session\n    if (externalContext.endCurrentSession) {\n      await externalContext.endCurrentSession();\n    }\n    \n    logger.info('Processing paper URL for new session');\n    const paperData = await processPaperUrl(url);\n    \n    if (paperData) {\n      logger.info(`Starting new session for: ${paperData.primary_id}`);\n      \n      if (externalContext.EnhancedReadingSession && externalContext.sessionConfig) {\n        // Create a new session with the updated EnhancedReadingSession class\n        // which requires paperData instead of just an ID\n        const currentSession = new externalContext.EnhancedReadingSession(paperData, externalContext.sessionConfig);\n        const metadata = currentSession.getMetadata();\n        logger.info('New session created:', metadata);\n        \n        // Set the current paper data\n        if (externalContext.setCurrentPaperData) {\n          externalContext.setCurrentPaperData(paperData);\n        }\n        \n        // Start tracking activity\n        if (externalContext.startActivityTracking) {\n          externalContext.startActivityTracking();\n        }\n        \n        // Return the paper data\n        return paperData;\n      }\n    }\n    \n    return null;\n  } catch (error) {\n    logger.error(`Error in enhanced tab change handler: ${error}`);\n    return null;\n  } finally {\n    // Remove URL from pending after a delay\n    setTimeout(() => {\n      pendingUrls.delete(url);\n    }, 500);\n  }\n}\n\n/**\n * Initialize the multi-source support\n * \n * @param {Object} context - External functions from background script\n */\nexport function initMultiSourceSupport(context = {}) {\n  // Store external context\n  externalContext = {\n    ...externalContext,\n    ...context\n  };\n  \n  logger.info('Multi-source paper support initialized with context:', \n    Object.keys(externalContext).filter(k => !!externalContext[k]));\n  \n  // Return overrides that can be applied to the main module\n  return {\n    processPaperUrl,\n    enhancedHandleTabChange\n  };\n}\n","// extension/papers/plugins/loader.ts\n\nimport { loguru } from '../../utils/logger';\nimport { pluginRegistry } from './registry';\n\n// Import plugins directly (static import)\nimport * as plugins from './sources/index';\n\nconst logger = loguru.getLogger('PluginLoader');\n\n/**\n * Load all built-in source plugins\n */\nexport async function loadBuiltinPlugins(): Promise<void> {\n  logger.info('Loading built-in plugins');\n  \n  try {\n    // Plugins are already loaded via the static import\n    // This is just to check if they were properly registered\n    const pluginCount = pluginRegistry.getAll().length;\n    \n    if (pluginCount === 0) {\n      logger.warning('No plugins were registered. Check plugin registration.');\n    } else {\n      logger.info(`${pluginCount} plugins are registered.`);\n    }\n  } catch (error) {\n    logger.error('Error loading plugins', error);\n    // Log detailed error information for debugging\n    if (error instanceof Error) {\n      logger.error(`Plugin loading error: ${error.message}`);\n      if (error.stack) {\n        logger.error(`Stack trace: ${error.stack}`);\n      }\n    }\n  }\n}\n\n/**\n * Initialize the plugin system\n */\nexport async function initializePluginSystem(): Promise<void> {\n  logger.info('Initializing plugin system');\n  \n  await loadBuiltinPlugins();\n  \n  // Log loaded plugins\n  const plugins = pluginRegistry.getAll();\n  logger.info(`Initialized ${plugins.length} plugins:`);\n  \n  plugins.forEach(plugin => {\n    logger.info(`- ${plugin.name} (${plugin.id}) v${plugin.version}`);\n  });\n}\n","// background.js\nimport { GitHubStoreClient } from 'gh-store-client';\nimport { PaperManager } from './papers/manager';\nimport { loadSessionConfig, getConfigurationInMs } from './config/session.js';\nimport { ReadingSessionData } from './papers/types';\n// Added imports for multi-source support\nimport { MultiSourceDetector } from './papers/detector';\nimport { formatPrimaryId } from './papers/source_utils';\nimport { initMultiSourceSupport } from './background_multi_source';\nimport { initializePluginSystem } from './papers/plugins/loader';\nimport { pluginRegistry } from './papers/plugins/registry';\n\nimport { loguru } from './utils/logger';\n\nconst logger = loguru.getLogger('Background');\n\nlet githubToken = '';\nlet githubRepo = '';\nlet currentPaperData = null;\nlet currentSession = null;\nlet activityInterval = null;\nlet sessionConfig = null;\nlet paperManager = null;\n\n// Store references to functions that will be enhanced\nlet originalProcessArxivUrl = null;\nlet enhancedProcessPaperUrl = null;\n\n// Debounce mechanism to avoid multiple creations of the same paper\nconst pendingUrls = new Set();\nconst pendingPaperCreations = new Map();\n\n// Enhanced reading session for modern format\nclass EnhancedReadingSession {\n  constructor(paperData, config) {\n    // Use primary_id as the canonical identifier\n    if (!paperData.primary_id) {\n      throw new Error('Paper data must include primary_id');\n    }\n    \n    this.paperId = paperData.primary_id;\n    this.paperData = paperData;\n    \n    // Generate unique session ID\n    this.sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    \n    // Initialize timing data\n    this.startTime = new Date();\n    this.activeTime = 0;\n    this.idleTime = 0;\n    this.lastActiveTime = new Date();\n    this.isTracking = true;\n    this.config = config;\n    this.endTime = null;\n    this.finalizedData = null;\n  }\n  \n  update() {\n    if (this.isTracking && !this.finalizedData) {\n      const now = new Date();\n      const timeSinceLastActive = now.getTime() - this.lastActiveTime.getTime();\n      \n      if (timeSinceLastActive < this.config.idleThreshold) {\n        this.activeTime += timeSinceLastActive;\n      } else {\n        this.idleTime += timeSinceLastActive;\n      }\n      \n      this.lastActiveTime = now;\n    }\n  }\n  \n  finalize() {\n    if (this.finalizedData) {\n      return this.finalizedData;\n    }\n \n    this.update();\n    this.isTracking = false;\n    this.endTime = new Date();\n    const totalElapsed = this.endTime.getTime() - this.startTime.getTime();\n \n    if (this.activeTime >= this.config.minSessionDuration) {\n      this.finalizedData = {\n        session_id: this.sessionId,\n        duration_seconds: Math.round(this.activeTime / 1000),\n        idle_seconds: Math.round(this.idleTime / 1000),\n        start_time: this.startTime.toISOString(),\n        end_time: this.endTime.toISOString(),\n        total_elapsed_seconds: Math.round(totalElapsed / 1000)\n      };\n      return this.finalizedData;\n    }\n    return null;\n  }\n  \n  getMetadata() {\n    return {\n      sourceType: this.paperData.source,\n      paperId: this.paperId,\n      title: this.paperData.title,\n      sessionId: this.sessionId,\n      startTime: this.startTime.toISOString(),\n      activeSeconds: Math.round(this.activeTime / 1000),\n      idleSeconds: Math.round(this.idleTime / 1000)\n    };\n  }\n}\n\n// Load credentials and configuration when extension starts\nasync function loadCredentials() {\n    const items = await chrome.storage.sync.get(['githubToken', 'githubRepo']);\n    githubToken = items.githubToken || '';\n    githubRepo = items.githubRepo || '';\n    console.log('Credentials loaded:', { hasToken: !!githubToken, hasRepo: !!githubRepo });\n    \n    // Initialize paper manager if we have credentials\n    if (githubToken && githubRepo) {\n        const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n        paperManager = new PaperManager(githubClient);\n        console.log('Paper manager initialized');\n    }\n    \n    // Load session configuration\n    sessionConfig = getConfigurationInMs(await loadSessionConfig());\n    console.log('Session configuration loaded:', sessionConfig);\n\n    // Initialize multi-source support\n    enhancedInitialization();\n    \n    // Initialize debug objects after everything is loaded\n    initializeDebugObjects();\n}\n\n// Initialize multi-source support\nfunction enhancedInitialization() {\n    // Save original function for compatibility\n    originalProcessArxivUrl = processArxivUrl;\n    \n    // Initialize multi-source support with explicit context binding\n    const { processPaperUrl, enhancedHandleTabChange } = initMultiSourceSupport({\n        createGithubIssue,       // Pass createGithubIssue function to background_multi_source\n        endCurrentSession,       // Pass endCurrentSession function\n        EnhancedReadingSession,  // Pass EnhancedReadingSession class\n        sessionConfig,           // Pass sessionConfig\n        startActivityTracking,   // Pass startActivityTracking function\n        setCurrentPaperData,     // New helper function to set current paper data\n        processArxivUrl          // Pass the original arXiv processor\n    });\n    \n    // Store enhanced function\n    enhancedProcessPaperUrl = processPaperUrl;\n    \n    // Debug information\n    console.log('Multi-source paper support initialized');\n}\n\n// Helper function to set current paper data\nfunction setCurrentPaperData(data) {\n    currentPaperData = data;\n    return currentPaperData;\n}\n\n// Listen for credential changes\nchrome.storage.onChanged.addListener(async (changes) => {\n    console.log('Storage changes detected:', Object.keys(changes));\n    if (changes.githubToken) {\n        githubToken = changes.githubToken.newValue;\n    }\n    if (changes.githubRepo) {\n        githubRepo = changes.githubRepo.newValue;\n    }\n    if (changes.sessionConfig) {\n        sessionConfig = getConfigurationInMs(changes.sessionConfig.newValue);\n        console.log('Session configuration updated:', sessionConfig);\n    }\n    \n    // Reinitialize paper manager if credentials changed\n    if (changes.githubToken || changes.githubRepo) {\n        if (githubToken && githubRepo) {\n            const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n            paperManager = new PaperManager(githubClient);\n            console.log('Paper manager reinitialized');\n        }\n    }\n});\n\n// Initialize the extension\nasync function initialize() {\n  logger.info('Initializing extension');\n  \n  // Load credentials and config\n  await loadCredentials();\n  \n  // Initialize plugin system\n  await initializePluginSystem();\n  \n  // Set up listeners for tab changes\n  await setupListeners();\n  \n  logger.info('Extension initialized');\n}\n\n// Initialize credentials\ninitialize().catch(error => {\n  logger.error('Initialization failed', error);\n});\n\n// Message passing between background and popup\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log('Message received:', request);\n    \n    if (request.type === 'getCurrentPaper') {\n        console.log('Popup requested current paper:', currentPaperData);\n        sendResponse(currentPaperData);\n    }\n    else if (request.type === 'updateRating') {\n        console.log('Rating update requested:', request.rating);\n        handleUpdateRating(request.rating, sendResponse);\n        return true; // Will respond asynchronously\n    }\n    else if (request.type === 'updateAnnotation') {\n        console.log('Annotation update requested:', request.annotationType, request.data);\n        handleAnnotationUpdate(request.annotationType, request.data)\n            .then(response => sendResponse(response))\n            .catch(error => sendResponse({ success: false, error: error.message }));\n        return true; // Will respond asynchronously\n    }\n    // Add a dedicated handler for track paper requests from content scripts\n    else if (request.type === 'trackPaper') {\n        console.log('Track paper requested:', request);\n        handleTrackPaper(request)\n            .then(response => sendResponse(response))\n            .catch(error => sendResponse({ success: false, error: error.message }));\n        return true; // Will respond asynchronously\n    }\n    return true;\n});\n\n// Handle track paper request from content script\nasync function handleTrackPaper(request) {\n    if (!paperManager) {\n        throw new Error('Paper manager not initialized');\n    }\n\n    try {\n        // Process the paper URL based on its source\n        let paperData;\n        \n        // Use the plugin system to process the URL if possible\n        const plugin = pluginRegistry.get(request.source);\n        if (plugin) {\n            logger.info(`Using ${plugin.name} plugin to process paper`);\n            \n            // Extract ID using the plugin\n            const id = plugin.extractId(request.url);\n            \n            if (!id) {\n                throw new Error(`Could not extract ID from URL: ${request.url}`);\n            }\n            \n            // Try to use the plugin's API if available\n            if (plugin.hasApi && plugin.fetchApiData) {\n                try {\n                    paperData = await plugin.fetchApiData(id);\n                    // Add required source information\n                    paperData.source = request.source;\n                    paperData.sourceId = id;\n                    paperData.primary_id = plugin.formatId ? plugin.formatId(id) : formatPrimaryId(request.source, id);\n                    paperData.url = request.url;\n                } catch (error) {\n                    logger.error(`Error using plugin API: ${error}`);\n                }\n            }\n            \n            // Fall back to enhanced process paper URL if API failed\n            if (!paperData && enhancedProcessPaperUrl) {\n                paperData = await enhancedProcessPaperUrl(request.url);\n            }\n        } else if (request.source === 'arxiv' && originalProcessArxivUrl) {\n            // Special case for arXiv\n            paperData = await originalProcessArxivUrl(request.url);\n            \n            // Add multi-source fields\n            if (paperData) {\n                paperData.source = 'arxiv';\n                paperData.sourceId = paperData.arxivId;\n                paperData.primary_id = formatPrimaryId('arxiv', paperData.arxivId);\n            }\n        } else if (enhancedProcessPaperUrl) {\n            // Try the generic processor as a fallback\n            paperData = await enhancedProcessPaperUrl(request.url);\n        }\n        \n        if (!paperData) {\n            throw new Error(`Could not process paper: ${request.url}`);\n        }\n        \n        // Create GitHub issue for the paper\n        await createGithubIssue(paperData);\n        \n        return { success: true, paperData };\n    } catch (error) {\n        logger.error(`Error tracking paper: ${error}`);\n        throw error;\n    }\n}\n\nasync function handleUpdateRating(rating, sendResponse) {\n    if (!paperManager) {\n        sendResponse({ success: false, error: 'Paper manager not initialized' });\n        return;\n    }\n\n    if (!currentPaperData) {\n        sendResponse({ success: false, error: 'No current paper' });\n        return;\n    }\n\n    try {\n        // Always use primary_id for rating updates\n        const paperId = currentPaperData.primary_id;\n        await paperManager.updateRating(paperId, rating, currentPaperData);\n        currentPaperData.rating = rating;\n        sendResponse({ success: true });\n    } catch (error) {\n        console.error('Error updating rating:', error);\n        sendResponse({ success: false, error: error.message });\n    }\n}\n\n// Consolidated setup for all navigation and tab listeners\nasync function setupListeners() {\n  logger.info('Setting up unified event listeners');\n  \n  // Get all supported hosts from plugins\n  const plugins = pluginRegistry.getAll();\n  \n  // Create host patterns from all plugins\n  const hostPatterns = [];\n  \n  for (const plugin of plugins) {\n    // Add all the plugin URL patterns if possible\n    try {\n      // Extract domain patterns from the plugin's URL patterns\n      for (const pattern of plugin.urlPatterns) {\n        const patternStr = pattern.toString();\n        // Extract domain from pattern - this is a simplified approach\n        const match = patternStr.match(/([a-zA-Z0-9.-]+)\\\\?\\.([a-zA-Z]+)/);\n        if (match) {\n          const domain = match[1];\n          const tld = match[2];\n          hostPatterns.push({ hostSuffix: `${domain}.${tld}` });\n        }\n      }\n    } catch (err) {\n      logger.error(`Error processing plugin URL patterns: ${err}`);\n    }\n  }\n  \n  // Add default patterns if we couldn't extract from plugins\n  if (hostPatterns.length === 0) {\n    hostPatterns.push(\n      { hostSuffix: 'arxiv.org' },\n      { hostSuffix: 'semanticscholar.org' },\n      { hostSuffix: 'doi.org' },\n      { hostSuffix: 'dl.acm.org' },\n      { hostSuffix: 'openreview.net' }\n    );\n  }\n  \n  logger.info(`Setting up navigation listener with patterns: ${JSON.stringify(hostPatterns)}`);\n  \n  // CONSOLIDATED LISTENER: Set up a single navigation listener with all hosts\n  chrome.webNavigation.onCompleted.addListener(handleUnifiedNavigation, { \n    url: hostPatterns\n  });\n  \n  // CONSOLIDATED LISTENER: Set up a single tab activation listener\n  chrome.tabs.onActivated.addListener(handleUnifiedTabActivation);\n  \n  // CONSOLIDATED LISTENER: Set up a single tab update listener\n  chrome.tabs.onUpdated.addListener(handleUnifiedTabUpdate);\n  \n  // Window focus changes\n  chrome.windows.onFocusChanged.addListener((windowId) => {\n    if (windowId === chrome.windows.WINDOW_ID_NONE) {\n      endCurrentSession();\n    }\n  });\n  \n  logger.info('All event listeners initialized');\n}\n\n// Unified handlers for navigation and tab events\nasync function handleUnifiedNavigation(details) {\n  logger.info(`Unified navigation handler: ${details.url}`);\n  \n  // Skip if URL is already being processed to avoid duplicates\n  if (pendingUrls.has(details.url)) {\n    logger.info(`URL already being processed, skipping: ${details.url}`);\n    return;\n  }\n  \n  // Mark URL as being processed\n  pendingUrls.add(details.url);\n  \n  try {\n    // Check if this is a paper URL\n    const sourceInfo = MultiSourceDetector.detect(details.url);\n    if (!sourceInfo) {\n      logger.info('Not a recognized paper URL');\n      return;\n    }\n    \n    logger.info(`Detected paper: ${sourceInfo.type}:${sourceInfo.id}`);\n    \n    // Get tab info to determine if it's the active tab\n    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (tabs.length > 0 && tabs[0].id === details.tabId) {\n      // This is the active tab, handle as tab change\n      await handleTabChangeWithPlugins(tabs[0]);\n    } else {\n      // Process URL but don't start a session\n      const paperData = await processUnifiedPaperUrl(details.url);\n      if (paperData) {\n        logger.info(`Processed paper data: ${paperData.title}`);\n      }\n    }\n  } catch (error) {\n    logger.error(`Error in navigation handler: ${error}`);\n  } finally {\n    // Remove URL from pending after a delay to prevent immediate reprocessing\n    setTimeout(() => {\n      pendingUrls.delete(details.url);\n    }, 500);\n  }\n}\n\nasync function handleUnifiedTabActivation(activeInfo) {\n  logger.info(`Unified tab activation handler: ${activeInfo.tabId}`);\n  const tab = await chrome.tabs.get(activeInfo.tabId);\n  \n  if (!tab.url || pendingUrls.has(tab.url)) {\n    logger.info(`Tab URL empty or already being processed: ${tab.url}`);\n    return;\n  }\n  \n  pendingUrls.add(tab.url);\n  \n  try {\n    // Delegate to the appropriate handler\n    await handleTabChangeWithPlugins(tab);\n  } catch (error) {\n    logger.error(`Error in tab activation handler: ${error}`);\n  } finally {\n    setTimeout(() => {\n      pendingUrls.delete(tab.url);\n    }, 500);\n  }\n}\n\nasync function handleUnifiedTabUpdate(tabId, changeInfo, tab) {\n  if (changeInfo.status !== 'complete' || !tab.url || pendingUrls.has(tab.url)) {\n    return;\n  }\n  \n  logger.info(`Unified tab update handler: ${tab.url}`);\n  pendingUrls.add(tab.url);\n  \n  try {\n    // Delegate to the appropriate handler\n    await handleTabChangeWithPlugins(tab);\n  } catch (error) {\n    logger.error(`Error in tab update handler: ${error}`);\n  } finally {\n    setTimeout(() => {\n      pendingUrls.delete(tab.url);\n    }, 500);\n  }\n}\n\n// Helper function to find the appropriate plugin for a URL\nfunction findPluginForUrl(url) {\n  // First try using the plugin registry\n  const plugins = pluginRegistry.getAll();\n  \n  for (const plugin of plugins) {\n    for (const pattern of plugin.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        const id = plugin.extractId(url);\n        if (id) {\n          return {\n            type: plugin.id,\n            id: id,\n            primary_id: plugin.formatId ? plugin.formatId(id) : formatPrimaryId(plugin.id, id),\n            plugin: plugin\n          };\n        }\n      }\n    }\n  }\n  \n  // Fallback to legacy detector if no plugin match\n  return MultiSourceDetector.detect(url);\n}\n\n// Unified paper URL processor with debouncing\nasync function processUnifiedPaperUrl(url) {\n  logger.info(`Processing paper URL: ${url}`);\n  \n  // Skip if URL is already being processed\n  if (pendingUrls.has(url)) {\n    logger.info(`URL already being processed in processUnifiedPaperUrl: ${url}`);\n    return null;\n  }\n  \n  // Mark URL as being processed\n  pendingUrls.add(url);\n  \n  try {\n    // Check source type\n    const sourceInfo = MultiSourceDetector.detect(url);\n    if (!sourceInfo) {\n      logger.info('Not a recognized paper URL in processor');\n      return null;\n    }\n    \n    // Process based on source type\n    let paperData;\n    if (sourceInfo.type === 'arxiv' && originalProcessArxivUrl) {\n      // Use original arXiv processor for compatibility\n      paperData = await originalProcessArxivUrl(url);\n      \n      // Enhance with source fields\n      if (paperData) {\n        paperData.source = 'arxiv';\n        paperData.sourceId = paperData.arxivId;\n        paperData.primary_id = sourceInfo.primary_id;\n      }\n    } else if (enhancedProcessPaperUrl) {\n      // Use enhanced processor for other sources\n      paperData = await enhancedProcessPaperUrl(url);\n    }\n    \n    // If paper data was extracted, create or update in GitHub\n    if (paperData) {\n      logger.info(`Paper data extracted, creating GitHub issue for: ${paperData.primary_id}`);\n      try {\n        await createGithubIssue(paperData);\n      } catch (error) {\n        logger.error(`Error creating GitHub issue: ${error}`);\n      }\n    }\n    \n    return paperData;\n  } catch (error) {\n    logger.error(`Error processing paper URL: ${error}`);\n    return null;\n  } finally {\n    // Remove URL from pending after a delay\n    setTimeout(() => {\n      pendingUrls.delete(url);\n    }, 500);\n  }\n}\n\n// Handle tab changes with plugin system\nasync function handleTabChangeWithPlugins(tab) {\n  if (!tab.url) return;\n  \n  // Find the appropriate plugin or source info\n  const sourceInfo = findPluginForUrl(tab.url);\n  \n  if (!sourceInfo) {\n    logger.info('Not a recognized paper page, ending current session');\n    await endCurrentSession();\n    return;\n  }\n  \n  // End any existing session\n  if (currentSession) {\n    logger.info('Ending existing session before starting new one');\n    await endCurrentSession();\n  }\n  \n  // Process the paper URL\n  logger.info(`Processing paper URL: ${tab.url}`);\n  \n  // Use sourceInfo to get paper data\n  let paperData;\n  \n  // If we have a plugin, try to use it\n  if (sourceInfo.plugin) {\n    const plugin = sourceInfo.plugin;\n    \n    // Try to use the plugin's API if available\n    if (plugin.hasApi && plugin.fetchApiData) {\n      try {\n        logger.info(`Using ${plugin.id} plugin API for tab`);\n        const apiData = await plugin.fetchApiData(sourceInfo.id);\n        if (Object.keys(apiData).length > 0) {\n          paperData = {\n            ...apiData,\n            source: plugin.id,\n            sourceId: sourceInfo.id,\n            primary_id: sourceInfo.primary_id,\n            url: tab.url\n          };\n        }\n      } catch (error) {\n        logger.error(`Error using plugin API for tab: ${error}`);\n      }\n    }\n  }\n  \n  // Fall back to legacy processors if needed\n  if (!paperData) {\n    if (sourceInfo.type === 'arxiv' && originalProcessArxivUrl) {\n      // Use original arXiv processor for compatibility\n      paperData = await originalProcessArxivUrl(tab.url);\n      \n      // Enhance with source fields\n      if (paperData) {\n        paperData.source = 'arxiv';\n        paperData.sourceId = paperData.arxivId;\n        paperData.primary_id = sourceInfo.primary_id;\n      }\n    } else if (enhancedProcessPaperUrl) {\n      // Use enhanced processor for other sources\n      paperData = await enhancedProcessPaperUrl(tab.url);\n    }\n  }\n  \n  if (paperData) {\n    logger.info(`Starting new session for: ${paperData.primary_id}`);\n    \n    // Store current paper data\n    currentPaperData = paperData;\n    \n    // Create a new reading session\n    currentSession = new EnhancedReadingSession(paperData, sessionConfig);\n    \n    const metadata = currentSession.getMetadata();\n    logger.info('New session created:', metadata);\n    \n    // Start tracking reading time\n    startActivityTracking();\n    \n    // Create GitHub issue\n    logger.info(`Creating GitHub issue for: ${paperData.primary_id}`);\n    try {\n      await createGithubIssue(paperData);\n    } catch (error) {\n      logger.error(`Error creating GitHub issue: ${error}`);\n    }\n  }\n}\n\nasync function endCurrentSession() {\n    if (currentSession && currentPaperData) {\n        logger.info(`Ending session for: ${currentPaperData.primary_id}`);\n        const sessionData = currentSession.finalize();\n        if (sessionData) {\n            logger.info('Creating reading event:', sessionData);\n            await enhancedCreateReadingEvent(currentPaperData, sessionData);\n        }\n        currentSession = null;\n        currentPaperData = null;\n        stopActivityTracking();\n    }\n}\n\nfunction startActivityTracking() {\n    if (!activityInterval) {\n        console.log('Starting activity tracking');\n        activityInterval = setInterval(() => {\n            if (currentSession) {\n                currentSession.update();\n            }\n        }, sessionConfig.activityUpdateInterval);\n    }\n}\n\nfunction stopActivityTracking() {\n    if (activityInterval) {\n        clearInterval(activityInterval);\n        activityInterval = null;\n    }\n}\n\n// Enhanced createReadingEvent function for multi-source support\nasync function enhancedCreateReadingEvent(paperData, sessionData) {\n    if (!paperManager || !paperData) {\n        console.error('Missing required data for creating reading event:', {\n            hasPaperManager: !!paperManager,\n            hasPaperData: !!paperData\n        });\n        return;\n    }\n\n    try {\n        // Always use primary_id for storage\n        if (!paperData.primary_id) {\n            logger.error('Paper data missing primary_id. This should not happen.');\n            return;\n        }\n        \n        const paperId = paperData.primary_id;\n        \n        await paperManager.logReadingSession(\n            paperId,\n            sessionData,\n            paperData\n        );\n        \n        logger.info('Reading session logged:', {\n            paperId: paperId,\n            sessionId: sessionData.session_id,\n            activeTime: sessionData.duration_seconds,\n            idleTime: sessionData.idle_seconds,\n            totalTime: sessionData.total_elapsed_seconds\n        });\n        \n    } catch (error) {\n        logger.error('Error logging reading session:', error);\n    }\n}\n\n// Direct GitHub issue creation function\nasync function createGithubIssue(paperData) {\n    if (!paperManager) {\n        logger.error('Paper manager not initialized');\n        return null;\n    }\n\n    // Ensure paper has primary_id\n    if (!paperData.primary_id) {\n        if (paperData.source && paperData.sourceId) {\n            paperData.primary_id = formatPrimaryId(paperData.source, paperData.sourceId);\n        } else if (paperData.arxivId) {\n            paperData.source = 'arxiv';\n            paperData.sourceId = paperData.arxivId;\n            paperData.primary_id = formatPrimaryId('arxiv', paperData.arxivId);\n        } else {\n            logger.error('Cannot create paper - no valid identifier');\n            return null;\n        }\n    }\n    \n    try {\n        logger.info(`Creating/getting paper issue: ${paperData.primary_id}`);\n        const existingPaper = await paperManager.getOrCreatePaper(paperData);\n        logger.info(`Paper metadata stored/retrieved: ${existingPaper.primary_id}`);\n        return existingPaper;\n    } catch (error) {\n        logger.error(`Error handling paper metadata: ${error}`, error);\n        return null;\n    }\n}\n\nasync function handleAnnotationUpdate(type, data) {\n    if (!paperManager) {\n        throw new Error('Paper manager not initialized');\n    }\n\n    try {\n        // Ensure we have a valid paper ID\n        let paperId = data.paperId;\n        \n        // Convert to new format if needed\n        if (!paperId.includes('.')) {\n            logger.warning(`Legacy ID format detected in annotation: ${paperId}`);\n            paperId = formatPrimaryId('arxiv', paperId);\n        }\n        \n        const paperData = data.title ? {\n            title: data.title,\n            source: data.source,\n            primary_id: paperId\n        } : undefined;\n\n        if (type === 'vote') {\n            await paperManager.updateRating(\n                paperId,\n                data.vote,\n                paperData\n            );\n        } else {\n            await paperManager.logAnnotation(\n                paperId,\n                'notes',\n                data.notes,\n                paperData\n            );\n        }\n\n        return { success: true };\n    } catch (error) {\n        console.error('Error logging interaction:', error);\n        throw error;\n    }\n}\n\nasync function parseXMLText(xmlText) {\n    console.log('Parsing XML response...');\n    try {\n        const getTagContent = (tag, text) => {\n            const entryRegex = /<entry>([\\s\\S]*?)<\\/entry>/;\n            const entryMatch = text.match(entryRegex);\n            \n            if (entryMatch) {\n                const entryContent = entryMatch[1];\n                const regex = new RegExp(`<${tag}[^>]*>(.*?)</${tag}>`, 's');\n                const match = entryContent.match(regex);\n                return match ? match[1].trim() : '';\n            }\n            return '';\n        };\n        \n        const getAuthors = (text) => {\n            const authors = [];\n            const regex = /<author>[^]*?<name>([^]*?)<\\/name>[^]*?<\\/author>/g;\n            let match;\n            while (match = regex.exec(text)) {\n                authors.push(match[1].trim());\n            }\n            return authors;\n        };\n\n        const getCategories = (text) => {\n            const categories = new Set();\n            \n            const primaryMatch = text.match(/<arxiv:primary_category[^>]*term=\"([^\"]+)\"/);\n            if (primaryMatch) {\n                categories.add(primaryMatch[1]);\n            }\n            \n            const categoryRegex = /<category[^>]*term=\"([^\"]+)\"/g;\n            let match;\n            while (match = categoryRegex.exec(text)) {\n                categories.add(match[1]);\n            }\n            \n            return Array.from(categories);\n        };\n\n        const getPublishedDate = (text) => {\n            const match = text.match(/<published>([^<]+)<\\/published>/);\n            return match ? match[1].trim() : null;\n        };\n\n        const parsed = {\n            title: getTagContent('title', xmlText),\n            summary: getTagContent('summary', xmlText),\n            authors: getAuthors(xmlText),\n            published_date: getPublishedDate(xmlText),\n            arxiv_tags: getCategories(xmlText)\n        };\n        \n        console.log('Parsed XML:', parsed);\n        return parsed;\n    } catch (error) {\n        console.error('Error parsing XML:', error);\n        return null;\n    }\n}\n\n// Process arXiv URL, but enhanced to add standardized fields\nasync function processArxivUrl(url) {\n    console.log('Processing URL:', url);\n    \n    let arxivId = null;\n    const match = url.match(/arxiv\\.org\\/(abs|pdf|html)\\/([0-9.]+)/);\n    if (match) {\n        arxivId = match[2];\n    }\n    \n    if (!arxivId) {\n        console.log('No arXiv ID found in URL');\n        return null;\n    }\n    \n    console.log('Found arXiv ID:', arxivId);\n    \n    try {\n        const apiUrl = `https://export.arxiv.org/api/query?id_list=${arxivId}`;\n        console.log('Fetching from arXiv API:', apiUrl);\n        \n        const response = await fetch(apiUrl);\n        console.log('API response status:', response.status);\n        \n        if (!response.ok) {\n            throw new Error(`ArXiv API error: ${response.status}`);\n        }\n        \n        const text = await response.text();\n        const parsed = await parseXMLText(text);\n        \n        if (!parsed) {\n            console.log('Failed to parse API response');\n            return null;\n        }\n        \n        // Build paper data with new format fields\n        const paperData = {\n            arxivId,\n            source: 'arxiv',\n            sourceId: arxivId,\n            primary_id: formatPrimaryId('arxiv', arxivId),\n            url,\n            title: parsed.title,\n            authors: parsed.authors.join(\", \"),\n            abstract: parsed.summary,\n            timestamp: new Date().toISOString(),\n            rating: 'novote',\n            published_date: parsed.published_date,\n            arxiv_tags: parsed.arxiv_tags\n        };\n        \n        console.log('Paper data processed:', paperData);\n        return paperData;\n    } catch (error) {\n        console.error('Error processing arXiv URL:', error);\n        return null;\n    }\n}\n\n// Initialize debug objects in service worker scope\nfunction initializeDebugObjects() {\n    // Don't use window in service worker context\n    self.__DEBUG__ = {\n        get paperManager() { return paperManager; },\n        getGithubClient: () => paperManager?.client,\n        getCurrentPaper: () => currentPaperData,\n        getCurrentSession: () => currentSession,\n        getConfig: () => sessionConfig\n    };\n\n    console.log('Debug objects registered, access via __DEBUG__ in service worker console');\n}\n"],"names":["logger","paperData","findPluginForUrl","processPaperUrl","pendingUrls","processUrl","plugins","GitHubStoreClient"],"mappings":"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","x_google_ignoreList":[0]}