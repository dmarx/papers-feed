{"version":3,"file":"background.bundle.js","sources":["../node_modules/gh-store-client/dist/index.mjs","../utils/logger.ts","../papers/plugins/registry.ts","../papers/source_utils.ts","../papers/manager.ts","../config/session.js","../papers/plugins/loader.ts","../background.js"],"sourcesContent":["var d=class{constructor(e={}){this.cache=new Map,this.maxSize=e.maxSize??1e3,this.ttl=e.ttl??1e3*60*60,this.accessOrder=[]}get(e){let s=this.cache.get(e);if(s){if(Date.now()-s.lastAccessed>this.ttl){this.cache.delete(e),this.removeFromAccessOrder(e);return}return s.lastAccessed=Date.now(),this.updateAccessOrder(e),s.issueNumber}}set(e,s,t){if(this.cache.size>=this.maxSize&&!this.cache.has(e)){let r=this.accessOrder[this.accessOrder.length-1];r&&(this.cache.delete(r),this.removeFromAccessOrder(r))}this.cache.set(e,{issueNumber:s,lastAccessed:Date.now(),createdAt:t.createdAt,updatedAt:t.updatedAt}),this.updateAccessOrder(e)}remove(e){this.cache.delete(e),this.removeFromAccessOrder(e)}clear(){this.cache.clear(),this.accessOrder=[]}getStats(){return{size:this.cache.size,maxSize:this.maxSize,ttl:this.ttl}}shouldRefresh(e,s){let t=this.cache.get(e);return t?s>t.updatedAt:!0}updateAccessOrder(e){this.removeFromAccessOrder(e),this.accessOrder.unshift(e)}removeFromAccessOrder(e){let s=this.accessOrder.indexOf(e);s>-1&&this.accessOrder.splice(s,1)}};var l=\"0.3.2\";var f=class{constructor(e,s,t={}){this.token=e,this.repo=s,this.config={baseLabel:t.baseLabel??\"stored-object\",uidPrefix:t.uidPrefix??\"UID:\",reactions:{processed:t.reactions?.processed??\"+1\",initialState:t.reactions?.initialState??\"rocket\"}},this.cache=new d(t.cache)}async fetchFromGitHub(e,s={}){let t=new URL(`https://api.github.com/repos/${this.repo}${e}`);s.params&&(Object.entries(s.params).forEach(([i,a])=>{t.searchParams.append(i,a)}),delete s.params);let r=await fetch(t.toString(),{...s,headers:{Authorization:`token ${this.token}`,Accept:\"application/vnd.github.v3+json\",...s.headers}});if(!r.ok)throw new Error(`GitHub API error: ${r.status}`);return r.json()}createCommentPayload(e,s){let t={_data:e,_meta:{client_version:l,timestamp:new Date().toISOString(),update_mode:\"append\"}};return s&&(t.type=s),t}async getObject(e){let s=this.cache.get(e),t;if(s)try{t=await this.fetchFromGitHub(`/issues/${s}`),this._verifyIssueLabels(t,e)||(this.cache.remove(e),t=void 0)}catch{this.cache.remove(e)}if(!t){let c=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"closed\"}});if(!c||c.length===0)throw new Error(`No object found with ID: ${e}`);t=c[0]}if(!t?.body)throw new Error(`Invalid issue data received for ID: ${e}`);let r=JSON.parse(t.body),i=new Date(t.created_at),a=new Date(t.updated_at);return this.cache.set(e,t.number,{createdAt:i,updatedAt:a}),{meta:{objectId:e,label:`${this.config.uidPrefix}${e}`,createdAt:i,updatedAt:a,version:await this._getVersion(t.number)},data:r}}async createObject(e,s){let t=`${this.config.uidPrefix}${e}`,r=await this.fetchFromGitHub(\"/issues\",{method:\"POST\",body:JSON.stringify({title:`Stored Object: ${e}`,body:JSON.stringify(s,null,2),labels:[this.config.baseLabel,t]})});this.cache.set(e,r.number,{createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at)});let i=this.createCommentPayload(s,\"initial_state\"),a=await this.fetchFromGitHub(`/issues/${r.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(i,null,2)})});return await this.fetchFromGitHub(`/issues/comments/${a.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.processed})}),await this.fetchFromGitHub(`/issues/comments/${a.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.initialState})}),await this.fetchFromGitHub(`/issues/${r.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"closed\"})}),{meta:{objectId:e,label:t,createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at),version:1},data:s}}_verifyIssueLabels(e,s){let t=new Set([this.config.baseLabel,`${this.config.uidPrefix}${s}`]);return e.labels.some(r=>t.has(r.name))}async updateObject(e,s){let t=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!t||t.length===0)throw new Error(`No object found with ID: ${e}`);let r=t[0],i=this.createCommentPayload(s);return await this.fetchFromGitHub(`/issues/${r.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(i,null,2)})}),await this.fetchFromGitHub(`/issues/${r.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"open\"})}),this.getObject(e)}async listAll(){let e=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\"}}),s={};for(let t of e)if(!t.labels.some(r=>r.name===\"archived\"))try{let r=this._getObjectIdFromLabels(t),i=JSON.parse(t.body),a={objectId:r,label:r,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at),version:await this._getVersion(t.number)};s[r]={meta:a,data:i}}catch{continue}return s}async listUpdatedSince(e){let s=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\",since:e.toISOString()}}),t={};for(let r of s)if(!r.labels.some(i=>i.name===\"archived\"))try{let i=this._getObjectIdFromLabels(r),a=JSON.parse(r.body),n=new Date(r.updated_at);if(n>e){let c={objectId:i,label:i,createdAt:new Date(r.created_at),updatedAt:n,version:await this._getVersion(r.number)};t[i]={meta:c,data:a}}}catch{continue}return t}async getObjectHistory(e){let s=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!s||s.length===0)throw new Error(`No object found with ID: ${e}`);let t=s[0],r=await this.fetchFromGitHub(`/issues/${t.number}/comments`),i=[];for(let a of r)try{let n=JSON.parse(a.body),c=\"update\",m,b={client_version:\"legacy\",timestamp:a.created_at,update_mode:\"append\"};typeof n==\"object\"?\"_data\"in n?(c=n.type||\"update\",m=n._data,b=n._meta||b):\"type\"in n&&n.type===\"initial_state\"?(c=\"initial_state\",m=n.data):m=n:m=n,i.push({timestamp:a.created_at,type:c,data:m,commentId:a.id})}catch{continue}return i}async _getVersion(e){return(await this.fetchFromGitHub(`/issues/${e}/comments`)).length+1}_getObjectIdFromLabels(e){for(let s of e.labels)if(s.name!==this.config.baseLabel&&s.name.startsWith(this.config.uidPrefix))return s.name.slice(this.config.uidPrefix.length);throw new Error(`No UID label found with prefix ${this.config.uidPrefix}`)}};var u={baseLabel:\"stored-object\",uidPrefix:\"UID:\",reactions:{processed:\"+1\",initialState:\"rocket\"},retries:{maxAttempts:3,backoffFactor:2},rateLimit:{maxRequestsPerHour:1e3}};function _(o){return{...u,...o,reactions:{...u.reactions,...o.reactions},retries:{...u.retries,...o.retries},rateLimit:{...u.rateLimit,...o.rateLimit}}}function v(o){return/^gh[ps]_[a-zA-Z0-9]{36}$/.test(o)}function P(o){return/^[\\w-]+\\/[\\w-]+$/.test(o)}var h=class extends Error{constructor(e){super(e),this.name=\"ConfigError\"}},g=class extends h{constructor(e=\"Invalid GitHub token format\"){super(e),this.name=\"TokenError\"}},p=class extends h{constructor(e=\"Invalid repository format. Use owner/repo\"){super(e),this.name=\"RepoError\"}};export{h as ConfigError,u as DEFAULT_CONFIG,f as GitHubStoreClient,p as RepoError,g as TokenError,_ as mergeConfig,P as validateRepo,v as validateToken};\n//# sourceMappingURL=index.mjs.map","// extension/utils/logger.ts\n\n/**\n * Simple logger utility inspired by loguru\n */\nclass Logger {\n  private name: string;\n  \n  constructor(name: string) {\n    this.name = name;\n  }\n  \n  info(message: string, ...args: any[]): void {\n    console.log(`[INFO] ${this.name}: ${message}`, ...args);\n  }\n  \n  warning(message: string, ...args: any[]): void {\n    console.warn(`[WARNING] ${this.name}: ${message}`, ...args);\n  }\n  \n  error(message: string, ...args: any[]): void {\n    console.error(`[ERROR] ${this.name}: ${message}`, ...args);\n  }\n  \n  debug(message: string, ...args: any[]): void {\n    console.debug(`[DEBUG] ${this.name}: ${message}`, ...args);\n  }\n}\n\nexport const loguru = {\n  getLogger: (name: string) => new Logger(name)\n};\n","// extension/papers/plugins/registry.ts\n\nimport { SourcePlugin } from './source_plugin';\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('PluginRegistry');\n\nclass PluginRegistry {\n  private plugins: Map<string, SourcePlugin> = new Map();\n  \n  register(plugin: SourcePlugin): void {\n    if (this.plugins.has(plugin.id)) {\n      logger.warning(`Plugin with ID ${plugin.id} already registered, overwriting`);\n    }\n    this.plugins.set(plugin.id, plugin);\n    logger.info(`Registered plugin: ${plugin.name} (${plugin.id})`);\n  }\n  \n  getAll(): SourcePlugin[] {\n    return Array.from(this.plugins.values());\n  }\n  \n  get(id: string): SourcePlugin | undefined {\n    return this.plugins.get(id);\n  }\n  \n  findForUrl(url: string): { plugin: SourcePlugin; id: string } | null {\n    for (const plugin of this.plugins.values()) {\n      for (const pattern of plugin.urlPatterns) {\n        if (pattern.test(url)) {\n          const id = plugin.extractId(url);\n          if (id) {\n            return { plugin, id };\n          }\n        }\n      }\n    }\n    return null;\n  }\n}\n\n// Export singleton instance\nexport const pluginRegistry = new PluginRegistry();\n","// extension/papers/source_utils.ts\n// Simplified utility functions for paper sources that work with the plugin system\n\nimport { pluginRegistry } from './plugins/registry';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('SourceUtils');\n\n// Default source prefixes for ID formatting\n// These are used as fallbacks if a plugin doesn't define its own formatId method\nconst SOURCE_PREFIXES: Record<string, string> = {\n  'arxiv': 'arxiv',\n  'semanticscholar': 's2',\n  'doi': 'doi',\n  'openreview': 'openreview',\n  'acm': 'doi'  // ACM uses DOIs\n};\n\n/**\n * Format a source-specific ID into a universal primary ID format\n * Uses source-specific formatId from plugin if available\n * \n * @param {string} source - Source type (e.g. 'arxiv', 'doi')\n * @param {string} id - Original source-specific identifier\n * @returns {string} Formatted primary ID\n */\nexport function formatPrimaryId(source: string, id: string): string {\n  // First check if we have a plugin for this source\n  const plugin = pluginRegistry.get(source);\n  \n  // Use plugin's formatId method if available\n  if (plugin && plugin.formatId) {\n    return plugin.formatId(id);\n  }\n  \n  // Otherwise use the default prefix\n  const sourcePrefix = SOURCE_PREFIXES[source] || 'generic';\n  \n  // Sanitize the ID by replacing problematic characters\n  const safeId = id\n    .replace(/\\//g, '_')\n    .replace(/:/g, '.')\n    .replace(/\\s/g, '_')\n    .replace(/\\\\/g, '_');\n  \n  return `${sourcePrefix}.${safeId}`;\n}\n\n/**\n * Parse a primary ID into its source type and original source ID\n * \n * @param {string} prefixedId - The primary ID in the format \"{source_prefix}.{id}\"\n * @returns {Object} Object with source type and source ID\n */\nexport function parseId(prefixedId: string): { type: string; id: string } {\n  // Split at the first dot\n  const [prefix, ...idParts] = prefixedId.split('.');\n  const id = idParts.join('.'); // Rejoin in case ID contains periods\n  \n  // Map prefix to source type by looking up plugins\n  const plugins = pluginRegistry.getAll();\n  for (const plugin of plugins) {\n    // Check if the plugin's ID format matches the prefix\n    if (plugin.formatId) {\n      const sampleId = plugin.formatId('test');\n      const samplePrefix = sampleId.split('.')[0];\n      if (samplePrefix === prefix) {\n        return {\n          type: plugin.id,\n          id: id\n        };\n      }\n    }\n  }\n  \n  // Fallback to hardcoded mapping for backward compatibility\n  const prefixToSource: Record<string, string> = {\n    'arxiv': 'arxiv',\n    's2': 'semanticscholar',\n    'doi': 'doi',\n    'openreview': 'openreview'\n  };\n  \n  return {\n    type: prefixToSource[prefix] || 'generic',\n    id: prefix === 'doi' ? id.replace(/_/g, '/') : id\n  };\n}\n\n/**\n * Checks if a string is in the required prefixed format\n * \n * @param {string} id - ID to check\n * @returns {boolean} True if the ID is in the correct format\n */\nexport function isNewFormat(id: string): boolean {\n  // Check if it has a valid prefix\n  const validPrefixes = Object.values(SOURCE_PREFIXES).map(prefix => `${prefix}.`);\n  validPrefixes.push('generic.'); // Add generic prefix\n  \n  return validPrefixes.some(prefix => id.startsWith(prefix));\n}\n\n/**\n * Gets a display label for a source type using the plugin if available\n * \n * @param {string} sourceType - Source type\n * @returns {string} Human-readable label\n */\nexport function getSourceLabel(sourceType: string): string {\n  const plugin = pluginRegistry.get(sourceType);\n  if (plugin) {\n    return plugin.name;\n  }\n  \n  // Fallback for backward compatibility\n  const labels: Record<string, string> = {\n    'arxiv': 'arXiv',\n    'semanticscholar': 'Semantic Scholar',\n    'doi': 'DOI',\n    'acm': 'ACM Digital Library',\n    'openreview': 'OpenReview'\n  };\n  \n  return labels[sourceType] || sourceType.charAt(0).toUpperCase() + sourceType.slice(1);\n}\n\n/**\n * Get canonical URL for a paper using the plugin if available\n * \n * @param {string} sourceType - Source type\n * @param {string} id - Source ID\n * @returns {string} Canonical URL\n */\nexport function getCanonicalUrl(sourceType: string, id: string): string {\n  // First check if a plugin is available for this source\n  const plugin = pluginRegistry.get(sourceType);\n  if (plugin) {\n    // If the plugin has any URL patterns, try to construct a URL\n    if (plugin.urlPatterns && plugin.urlPatterns.length > 0) {\n      const pattern = plugin.urlPatterns[0].toString();\n      // Extract the domain and path pattern\n      const match = pattern.match(/([^/]+)(\\/[^)]+)/);\n      if (match) {\n        const domain = match[1].replace(/\\\\\\./, '.');\n        const path = match[2]\n          .replace(/\\\\\\//g, '/')\n          .replace(/\\([^)]+\\)/, id);\n        return `https://${domain}${path}`;\n      }\n    }\n  }\n  \n  // Fallback for backward compatibility\n  switch (sourceType) {\n    case 'arxiv':\n      return `https://arxiv.org/abs/${id}`;\n    case 'semanticscholar':\n      return `https://www.semanticscholar.org/paper/${id}`;\n    case 'doi':\n      return `https://doi.org/${id}`;\n    case 'acm':\n      return `https://dl.acm.org/doi/${id}`;\n    case 'openreview':\n      return `https://openreview.net/forum?id=${id}`;\n    default:\n      return id.startsWith('10.') ? `https://doi.org/${id}` : \"\";\n  }\n}\n","// extension/papers/manager.ts\n// Simplified PaperManager that uses a consistent approach for all paper sources\n\nimport { GitHubStoreClient } from 'gh-store-client';\nimport type { Json } from 'gh-store-client';\nimport { \n  type PaperMetadata, \n  type InteractionLog, \n  type Interaction,\n  type ReadingSessionData\n} from './types';\nimport { formatPrimaryId, isNewFormat } from './source_utils';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('PaperManager');\n\n/**\n * Checks if data is an interaction log\n */\nfunction isInteractionLog(data: any): data is InteractionLog {\n  return typeof data === \"object\" && \n         data !== null && \n         typeof data.paper_id === \"string\" && \n         Array.isArray(data.interactions);\n}\n\nexport class PaperManager {\n  private client: GitHubStoreClient;\n  // Concurrency control locks\n  private creationLocks = new Map<string, Promise<any>>();\n  \n  constructor(client: GitHubStoreClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get or create a paper record\n   */\n  async getOrCreatePaper(paperData: any): Promise<any> {\n    // Ensure paperData has a primary_id\n    if (!paperData.primary_id) {\n      if (paperData.source && paperData.sourceId) {\n        paperData.primary_id = formatPrimaryId(paperData.source, paperData.sourceId);\n      } else {\n        throw new Error(\"Invalid paper data: missing primary_id and cannot generate it\");\n      }\n    }\n    \n    const objectId = `paper:${paperData.primary_id}`;\n    logger.info(`Getting or creating paper: ${objectId}`);\n    \n    try {\n      // Try to get the paper\n      const obj = await this.client.getObject(objectId);\n      const data = obj.data as Record<string, any>;\n      \n      logger.info(`Found existing paper: ${objectId}`);\n      return data;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"No object found\")) {\n        // Create new paper with appropriate fields\n        const defaultPaperData: Record<string, any> = {\n          primary_id: paperData.primary_id,\n          source: paperData.source,\n          sourceId: paperData.sourceId,\n          url: paperData.url || '',\n          title: paperData.title || paperData.sourceId,\n          authors: paperData.authors || '',\n          abstract: paperData.abstract || '',\n          timestamp: new Date().toISOString(),\n          rating: 'novote'\n        };\n        \n        // Add source-specific data directly\n        if (paperData.source_specific_metadata) {\n          defaultPaperData.source_specific_metadata = paperData.source_specific_metadata;\n        }\n        \n        // Always add identifiers object\n        defaultPaperData.identifiers = {\n          original: paperData.sourceId,\n          url: paperData.url\n        };\n        \n        // Add cross-references if available\n        if (paperData.doi) {\n          defaultPaperData.identifiers.doi = paperData.doi;\n        }\n        \n        logger.info(`Creating new paper object: ${objectId}`);\n        try {\n          await this.client.createObject(objectId, defaultPaperData);\n          logger.info(`Successfully created paper: ${objectId}`);\n          return defaultPaperData;\n        } catch (createError) {\n          logger.error(`Error creating paper object: ${createError}`);\n          throw createError;\n        }\n      }\n      logger.error(`Error in getOrCreatePaper: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get or create an interaction log\n   */\n  private async getOrCreateInteractionLog(paperId: string): Promise<InteractionLog> {\n    // Ensure we have a standard format ID\n    if (!isNewFormat(paperId)) {\n      paperId = formatPrimaryId('arxiv', paperId);\n      logger.warning(`Converted legacy ID to: ${paperId}`);\n    }\n    \n    const objectId = `interactions:${paperId}`;\n    \n    // Check if we're already creating this log\n    if (this.creationLocks.has(objectId)) {\n      logger.info(`Waiting for existing creation of interaction log: ${objectId}`);\n      return this.creationLocks.get(objectId) as Promise<InteractionLog>;\n    }\n    \n    // Create a new promise for this operation\n    const creationPromise = (async () => {\n      try {\n        const obj = await this.client.getObject(objectId);\n        const data = obj.data;\n        \n        if (isInteractionLog(data)) {\n          return data;\n        }\n        \n        throw new Error('Invalid interaction log format');\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('No object found')) {\n          // Create new log\n          const newLog: InteractionLog = {\n            paper_id: paperId,\n            interactions: []\n          };\n          \n          logger.info(`Creating new interaction log: ${objectId}`);\n          await this.client.createObject(objectId, newLog);\n          return newLog;\n        }\n        throw error;\n      } finally {\n        // Release the lock after a delay\n        setTimeout(() => {\n          this.creationLocks.delete(objectId);\n        }, 500);\n      }\n    })();\n    \n    // Store the promise\n    this.creationLocks.set(objectId, creationPromise);\n    \n    return creationPromise;\n  }\n\n  /**\n   * Log a reading session for a paper\n   */\n  async logReadingSession(\n    paperId: string,\n    session: ReadingSessionData,\n    paperData?: any\n  ): Promise<void> {\n    // Ensure we have a standard format ID\n    if (!isNewFormat(paperId)) {\n      paperId = formatPrimaryId('arxiv', paperId);\n      logger.warning(`Converted legacy ID to: ${paperId}`);\n      \n      // If paperData provided, ensure it has primary_id\n      if (paperData && !paperData.primary_id) {\n        paperData.primary_id = paperId;\n      }\n    }\n\n    // Ensure paper exists with proper data\n    if (paperData) {\n      await this.getOrCreatePaper(paperData);\n    }\n\n    // Log the session as interaction\n    await this.addInteraction(paperId, {\n      type: \"reading_session\",\n      timestamp: new Date().toISOString(),\n      data: session\n    });\n  }\n\n  /**\n   * Log an annotation for a paper\n   */\n  async logAnnotation(\n    paperId: string,\n    key: string,\n    value: Json,\n    paperData?: any\n  ): Promise<void> {\n    // Ensure we have a standard format ID\n    if (!isNewFormat(paperId)) {\n      paperId = formatPrimaryId('arxiv', paperId);\n      logger.warning(`Converted legacy ID to: ${paperId}`);\n      \n      // If paperData provided, ensure it has primary_id\n      if (paperData && !paperData.primary_id) {\n        paperData.primary_id = paperId;\n      }\n    }\n\n    // Ensure paper exists with proper data\n    if (paperData) {\n      await this.getOrCreatePaper(paperData);\n    }\n\n    // Log the annotation as interaction\n    await this.addInteraction(paperId, {\n      type: \"annotation\",\n      timestamp: new Date().toISOString(),\n      data: { key, value }\n    });\n  }\n\n  /**\n   * Update a paper's rating\n   */\n  async updateRating(\n    paperId: string,\n    rating: string,\n    paperData?: any\n  ): Promise<void> {\n    // Ensure we have a standard format ID\n    if (!isNewFormat(paperId)) {\n      paperId = formatPrimaryId('arxiv', paperId);\n      logger.warning(`Converted legacy ID to: ${paperId}`);\n      \n      // If paperData provided, ensure it has primary_id\n      if (paperData && !paperData.primary_id) {\n        paperData.primary_id = paperId;\n      }\n    }\n\n    // Get existing paper data\n    const paper = await this.getOrCreatePaper(paperData || { primary_id: paperId });\n\n    // Update rating\n    const objectId = `paper:${paperId}`;\n    await this.client.updateObject(objectId, { \n      ...paper,\n      rating \n    });\n\n    // Log rating change\n    await this.addInteraction(paperId, {\n      type: \"rating\",\n      timestamp: new Date().toISOString(),\n      data: { rating }\n    });\n  }\n\n  /**\n   * Add an interaction to a paper's log\n   */\n  private async addInteraction(paperId: string, interaction: Interaction): Promise<void> {\n    const log = await this.getOrCreateInteractionLog(paperId);\n    log.interactions.push(interaction);\n    \n    // Store with the standard format ID\n    const objectId = `interactions:${paperId}`;\n    await this.client.updateObject(objectId, log);\n  }\n\n  /**\n   * Get interactions for a paper\n   */\n  async getInteractions(\n    paperId: string,\n    options: {\n      type?: string;\n      startTime?: Date;\n      endTime?: Date;\n    } = {}\n  ): Promise<Interaction[]> {\n    // Ensure we have a standard format ID\n    if (!isNewFormat(paperId)) {\n      paperId = formatPrimaryId('arxiv', paperId);\n      logger.warning(`Converted legacy ID to: ${paperId}`);\n    }\n    \n    try {\n      const log = await this.getOrCreateInteractionLog(paperId);\n      let interactions = log.interactions;\n\n      if (options.type) {\n        interactions = interactions.filter((i: Interaction) => i.type === options.type);\n      }\n\n      if (options.startTime || options.endTime) {\n        interactions = interactions.filter((i: Interaction) => {\n          const time = new Date(i.timestamp);\n          if (options.startTime && time < options.startTime) return false;\n          if (options.endTime && time > options.endTime) return false;\n          return true;\n        });\n      }\n\n      return interactions;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        return [];\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Get total reading time for a paper\n   */\n  async getPaperReadingTime(paperId: string): Promise<number> {\n    // Ensure we have a standard format ID\n    if (!isNewFormat(paperId)) {\n      paperId = formatPrimaryId('arxiv', paperId);\n      logger.warning(`Converted legacy ID to: ${paperId}`);\n    }\n    \n    const interactions = await this.getInteractions(paperId, { type: 'reading_session' });\n    return interactions.reduce((total, i) => {\n      const data = i.data;\n      if (typeof data === 'object' && data !== null && 'duration_seconds' in data) {\n        return total + (data.duration_seconds as number);\n      }\n      return total;\n    }, 0);\n  }\n\n  /**\n   * Get paper history\n   */\n  async getPaperHistory(paperId: string): Promise<Json[]> {\n    // Ensure we have a standard format ID\n    if (!isNewFormat(paperId)) {\n      paperId = formatPrimaryId('arxiv', paperId);\n      logger.warning(`Converted legacy ID to: ${paperId}`);\n    }\n    \n    const objectId = `paper:${paperId}`;\n    return this.client.getObjectHistory(objectId);\n  }\n}\n","// extension/config/session.js\n\n// Default configuration values\nconst DEFAULT_CONFIG = {\n    idleThresholdMinutes: 5,\n    minSessionDurationSeconds: 30,\n    // Adding more granular control\n    requireContinuousActivity: true,  // If true, resets timer on idle\n    logPartialSessions: false,        // If true, logs sessions even if under minimum duration\n    activityUpdateIntervalSeconds: 1  // How often to update active time\n};\n\n// Load session configuration from storage\nasync function loadSessionConfig() {\n    const items = await chrome.storage.sync.get('sessionConfig');\n    return { ...DEFAULT_CONFIG, ...items.sessionConfig };\n}\n\n// Save session configuration to storage\nasync function saveSessionConfig(config) {\n    await chrome.storage.sync.set({\n        sessionConfig: {\n            idleThresholdMinutes: Number(config.idleThresholdMinutes),\n            minSessionDurationSeconds: Number(config.minSessionDurationSeconds),\n            requireContinuousActivity: Boolean(config.requireContinuousActivity),\n            logPartialSessions: Boolean(config.logPartialSessions),\n            activityUpdateIntervalSeconds: Number(config.activityUpdateIntervalSeconds)\n        }\n    });\n}\n\n// Convert configuration to milliseconds for internal use\nfunction getConfigurationInMs(config) {\n    return {\n        idleThreshold: config.idleThresholdMinutes * 60 * 1000,\n        minSessionDuration: config.minSessionDurationSeconds * 1000,\n        activityUpdateInterval: config.activityUpdateIntervalSeconds * 1000,\n        requireContinuousActivity: config.requireContinuousActivity,\n        logPartialSessions: config.logPartialSessions\n    };\n}\n\nexport { loadSessionConfig, saveSessionConfig, getConfigurationInMs, DEFAULT_CONFIG };","// extension/papers/plugins/loader.ts\n\nimport { loguru } from '../../utils/logger';\nimport { pluginRegistry } from './registry';\n\n// Import plugins directly (static import)\nimport * as plugins from './sources/index';\n\nconst logger = loguru.getLogger('PluginLoader');\n\n/**\n * Load all built-in source plugins\n */\nexport async function loadBuiltinPlugins(): Promise<void> {\n  logger.info('Loading built-in plugins');\n  \n  try {\n    // Plugins are already loaded via the static import\n    // This is just to check if they were properly registered\n    const pluginCount = pluginRegistry.getAll().length;\n    \n    if (pluginCount === 0) {\n      logger.warning('No plugins were registered. Check plugin registration.');\n    } else {\n      logger.info(`${pluginCount} plugins are registered.`);\n    }\n  } catch (error) {\n    logger.error('Error loading plugins', error);\n    // Log detailed error information for debugging\n    if (error instanceof Error) {\n      logger.error(`Plugin loading error: ${error.message}`);\n      if (error.stack) {\n        logger.error(`Stack trace: ${error.stack}`);\n      }\n    }\n  }\n}\n\n/**\n * Initialize the plugin system\n */\nexport async function initializePluginSystem(): Promise<void> {\n  logger.info('Initializing plugin system');\n  \n  await loadBuiltinPlugins();\n  \n  // Log loaded plugins\n  const plugins = pluginRegistry.getAll();\n  logger.info(`Initialized ${plugins.length} plugins:`);\n  \n  plugins.forEach(plugin => {\n    logger.info(`- ${plugin.name} (${plugin.id}) v${plugin.version}`);\n  });\n}\n","// background.js - Consolidated with multi-source support\nimport { GitHubStoreClient } from 'gh-store-client';\nimport { PaperManager } from './papers/manager';\nimport { loadSessionConfig, getConfigurationInMs } from './config/session.js';\nimport { formatPrimaryId } from './papers/source_utils';\nimport { initializePluginSystem } from './papers/plugins/loader';\nimport { pluginRegistry } from './papers/plugins/registry';\nimport { loguru } from './utils/logger';\n\nconst logger = loguru.getLogger('Background');\n\n// Global state\nlet githubToken = '';\nlet githubRepo = '';\nlet currentPaperData = null;\nlet currentSession = null;\nlet activityInterval = null;\nlet sessionConfig = null;\nlet paperManager = null;\n\n// Debounce mechanism to avoid multiple creations of the same paper\nconst pendingUrls = new Set();\n\n// Enhanced reading session for modern format\nclass EnhancedReadingSession {\n  constructor(paperData, config) {\n    // Use primary_id as the canonical identifier\n    if (!paperData.primary_id) {\n      throw new Error('Paper data must include primary_id');\n    }\n    \n    this.paperId = paperData.primary_id;\n    this.paperData = paperData;\n    \n    // Generate unique session ID\n    this.sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    \n    // Initialize timing data\n    this.startTime = new Date();\n    this.activeTime = 0;\n    this.idleTime = 0;\n    this.lastActiveTime = new Date();\n    this.isTracking = true;\n    this.config = config;\n    this.endTime = null;\n    this.finalizedData = null;\n  }\n  \n  update() {\n    if (this.isTracking && !this.finalizedData) {\n      const now = new Date();\n      const timeSinceLastActive = now.getTime() - this.lastActiveTime.getTime();\n      \n      if (timeSinceLastActive < this.config.idleThreshold) {\n        this.activeTime += timeSinceLastActive;\n      } else {\n        this.idleTime += timeSinceLastActive;\n      }\n      \n      this.lastActiveTime = now;\n    }\n  }\n  \n  finalize() {\n    if (this.finalizedData) {\n      return this.finalizedData;\n    }\n \n    this.update();\n    this.isTracking = false;\n    this.endTime = new Date();\n    const totalElapsed = this.endTime.getTime() - this.startTime.getTime();\n \n    if (this.activeTime >= this.config.minSessionDuration) {\n      this.finalizedData = {\n        session_id: this.sessionId,\n        duration_seconds: Math.round(this.activeTime / 1000),\n        idle_seconds: Math.round(this.idleTime / 1000),\n        start_time: this.startTime.toISOString(),\n        end_time: this.endTime.toISOString(),\n        total_elapsed_seconds: Math.round(totalElapsed / 1000)\n      };\n      return this.finalizedData;\n    }\n    return null;\n  }\n  \n  getMetadata() {\n    return {\n      sourceType: this.paperData.source,\n      paperId: this.paperId,\n      title: this.paperData.title,\n      sessionId: this.sessionId,\n      startTime: this.startTime.toISOString(),\n      activeSeconds: Math.round(this.activeTime / 1000),\n      idleSeconds: Math.round(this.idleTime / 1000)\n    };\n  }\n}\n\n// Load credentials and configuration when extension starts\nasync function loadCredentials() {\n  const items = await chrome.storage.sync.get(['githubToken', 'githubRepo']);\n  githubToken = items.githubToken || '';\n  githubRepo = items.githubRepo || '';\n  logger.info('Credentials loaded:', { hasToken: !!githubToken, hasRepo: !!githubRepo });\n  \n  // Initialize paper manager if we have credentials\n  if (githubToken && githubRepo) {\n    const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n    paperManager = new PaperManager(githubClient);\n    logger.info('Paper manager initialized');\n  }\n  \n  // Load session configuration\n  sessionConfig = getConfigurationInMs(await loadSessionConfig());\n  logger.info('Session configuration loaded:', sessionConfig);\n  \n  // Initialize debug objects\n  initializeDebugObjects();\n}\n\n// Listen for credential changes\nchrome.storage.onChanged.addListener(async (changes) => {\n  logger.info('Storage changes detected:', Object.keys(changes));\n  if (changes.githubToken) {\n    githubToken = changes.githubToken.newValue;\n  }\n  if (changes.githubRepo) {\n    githubRepo = changes.githubRepo.newValue;\n  }\n  if (changes.sessionConfig) {\n    sessionConfig = getConfigurationInMs(changes.sessionConfig.newValue);\n    logger.info('Session configuration updated:', sessionConfig);\n  }\n  \n  // Reinitialize paper manager if credentials changed\n  if (changes.githubToken || changes.githubRepo) {\n    if (githubToken && githubRepo) {\n      const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n      paperManager = new PaperManager(githubClient);\n      logger.info('Paper manager reinitialized');\n    }\n  }\n});\n\n// Initialize the extension\nasync function initialize() {\n  logger.info('Initializing extension');\n  \n  // Load credentials and config\n  await loadCredentials();\n  \n  // Initialize plugin system\n  await initializePluginSystem();\n  \n  // Set up listeners for tab changes\n  await setupListeners();\n  \n  logger.info('Extension initialized');\n}\n\n// Initialize extension\ninitialize().catch(error => {\n  logger.error('Initialization failed', error);\n});\n\n// Message passing between background and popup/content scripts\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  logger.info('Message received:', request);\n  \n  if (request.type === 'getCurrentPaper') {\n    logger.info('Popup requested current paper:', currentPaperData);\n    sendResponse(currentPaperData);\n  }\n  else if (request.type === 'updateRating') {\n    logger.info('Rating update requested:', request.rating);\n    handleUpdateRating(request.rating, sendResponse);\n    return true; // Will respond asynchronously\n  }\n  else if (request.type === 'updateAnnotation') {\n    logger.info('Annotation update requested:', request.annotationType, request.data);\n    handleAnnotationUpdate(request.annotationType, request.data)\n      .then(response => sendResponse(response))\n      .catch(error => sendResponse({ success: false, error: error.message }));\n    return true; // Will respond asynchronously\n  }\n  // Add a dedicated handler for track paper requests from content scripts\n  else if (request.type === 'trackPaper') {\n    logger.info('Track paper requested:', request);\n    handleTrackPaper(request)\n      .then(response => sendResponse(response))\n      .catch(error => sendResponse({ success: false, error: error.message }));\n    return true; // Will respond asynchronously\n  }\n  return true;\n});\n\n// Handle track paper request from content script\nasync function handleTrackPaper(request) {\n  if (!paperManager) {\n    throw new Error('Paper manager not initialized');\n  }\n\n  try {\n    // Process the paper URL based on its source\n    let paperData;\n    \n    // Use the plugin system to process the URL if possible\n    const plugin = pluginRegistry.get(request.source);\n    if (plugin) {\n      logger.info(`Using ${plugin.name} plugin to process paper`);\n      \n      // Extract ID using the plugin\n      const id = plugin.extractId(request.url);\n      \n      if (!id) {\n        throw new Error(`Could not extract ID from URL: ${request.url}`);\n      }\n      \n      // Try to use the plugin's API if available\n      if (plugin.hasApi && plugin.fetchApiData) {\n        try {\n          paperData = await plugin.fetchApiData(id);\n          // Add required source information\n          paperData.source = request.source;\n          paperData.sourceId = id;\n          paperData.primary_id = plugin.formatId ? plugin.formatId(id) : formatPrimaryId(request.source, id);\n          paperData.url = request.url;\n        } catch (error) {\n          logger.error(`Error using plugin API: ${error}`);\n        }\n      }\n    }\n    \n    // Fall back to basic paper data if API failed\n    if (!paperData) {\n      // Get the ID using the plugin if available\n      const id = plugin ? plugin.extractId(request.url) : request.id;\n      paperData = {\n        source: request.source,\n        sourceId: id,\n        primary_id: plugin && plugin.formatId ? \n          plugin.formatId(id) : formatPrimaryId(request.source, id),\n        url: request.url,\n        title: request.title || `${request.source.toUpperCase()} Paper: ${id}`,\n        timestamp: new Date().toISOString(),\n        rating: 'novote'\n      };\n    }\n    \n    if (!paperData) {\n      throw new Error(`Could not process paper: ${request.url}`);\n    }\n    \n    // Create GitHub issue for the paper\n    await createGithubIssue(paperData);\n    \n    return { success: true, paperData };\n  } catch (error) {\n    logger.error(`Error tracking paper: ${error}`);\n    throw error;\n  }\n}\n\nasync function handleUpdateRating(rating, sendResponse) {\n  if (!paperManager) {\n    sendResponse({ success: false, error: 'Paper manager not initialized' });\n    return;\n  }\n\n  if (!currentPaperData) {\n    sendResponse({ success: false, error: 'No current paper' });\n    return;\n  }\n\n  try {\n    // Always use primary_id for rating updates\n    const paperId = currentPaperData.primary_id;\n    await paperManager.updateRating(paperId, rating, currentPaperData);\n    currentPaperData.rating = rating;\n    sendResponse({ success: true });\n  } catch (error) {\n    logger.error('Error updating rating:', error);\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n// Consolidated setup for all navigation and tab listeners\nasync function setupListeners() {\n  logger.info('Setting up unified event listeners');\n  \n  // Get all supported hosts from plugins\n  const plugins = pluginRegistry.getAll();\n  \n  // Create host patterns from all plugins\n  const hostPatterns = [];\n  \n  for (const plugin of plugins) {\n    // Add all the plugin URL patterns if possible\n    try {\n      // Extract domain patterns from the plugin's URL patterns\n      for (const pattern of plugin.urlPatterns) {\n        const patternStr = pattern.toString();\n        // Extract domain from pattern - this is a simplified approach\n        const match = patternStr.match(/([a-zA-Z0-9.-]+)\\\\?\\.([a-zA-Z]+)/);\n        if (match) {\n          const domain = match[1];\n          const tld = match[2];\n          hostPatterns.push({ hostSuffix: `${domain}.${tld}` });\n        }\n      }\n    } catch (err) {\n      logger.error(`Error processing plugin URL patterns: ${err}`);\n    }\n  }\n  \n  // Add default patterns if we couldn't extract from plugins\n  if (hostPatterns.length === 0) {\n    hostPatterns.push(\n      { hostSuffix: 'arxiv.org' },\n      { hostSuffix: 'semanticscholar.org' },\n      { hostSuffix: 'doi.org' },\n      { hostSuffix: 'dl.acm.org' },\n      { hostSuffix: 'openreview.net' }\n    );\n  }\n  \n  logger.info(`Setting up navigation listener with patterns: ${JSON.stringify(hostPatterns)}`);\n  \n  // CONSOLIDATED LISTENER: Set up a single navigation listener with all hosts\n  chrome.webNavigation.onCompleted.addListener(handleUnifiedNavigation, { \n    url: hostPatterns\n  });\n  \n  // CONSOLIDATED LISTENER: Set up a single tab activation listener\n  chrome.tabs.onActivated.addListener(handleUnifiedTabActivation);\n  \n  // CONSOLIDATED LISTENER: Set up a single tab update listener\n  chrome.tabs.onUpdated.addListener(handleUnifiedTabUpdate);\n  \n  // Window focus changes\n  chrome.windows.onFocusChanged.addListener((windowId) => {\n    if (windowId === chrome.windows.WINDOW_ID_NONE) {\n      endCurrentSession();\n    }\n  });\n  \n  logger.info('All event listeners initialized');\n}\n\n// Helper function to find the appropriate plugin for a URL\nfunction findPluginForUrl(url) {\n  // First try using the plugin registry\n  const plugins = pluginRegistry.getAll();\n  \n  for (const plugin of plugins) {\n    for (const pattern of plugin.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        const id = plugin.extractId(url);\n        if (id) {\n          return {\n            type: plugin.id,\n            id: id,\n            primary_id: plugin.formatId ? plugin.formatId(id) : formatPrimaryId(plugin.id, id),\n            plugin: plugin\n          };\n        }\n      }\n    }\n  }\n  \n  // No plugin match\n  return null;\n}\n\n// Unified handlers for navigation and tab events\nasync function handleUnifiedNavigation(details) {\n  logger.info(`Unified navigation handler: ${details.url}`);\n  \n  // Skip if URL is already being processed to avoid duplicates\n  if (pendingUrls.has(details.url)) {\n    logger.info(`URL already being processed, skipping: ${details.url}`);\n    return;\n  }\n  \n  // Mark URL as being processed\n  pendingUrls.add(details.url);\n  \n  try {\n    // Get the appropriate plugin for this URL\n    const sourceInfo = findPluginForUrl(details.url);\n    \n    if (!sourceInfo) {\n      logger.info('Not a recognized paper URL');\n      pendingUrls.delete(details.url);\n      return;\n    }\n    \n    logger.info(`Detected paper: ${sourceInfo.type}:${sourceInfo.id}`);\n    \n    // Get tab info to determine if it's the active tab\n    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (tabs.length > 0 && tabs[0].id === details.tabId) {\n      // This is the active tab, handle as tab change\n      await handleTabChangeWithPlugins(tabs[0]);\n    } else {\n      // Process URL but don't start a session\n      const paperData = await processPaperUrl(details.url);\n      if (paperData) {\n        logger.info(`Processed paper data: ${paperData.title}`);\n      }\n    }\n  } catch (error) {\n    logger.error(`Error in navigation handler: ${error}`);\n  } finally {\n    // Remove URL from pending after a delay to prevent immediate reprocessing\n    setTimeout(() => {\n      pendingUrls.delete(details.url);\n    }, 500);\n  }\n}\n\nasync function handleUnifiedTabActivation(activeInfo) {\n  logger.info(`Unified tab activation handler: ${activeInfo.tabId}`);\n  const tab = await chrome.tabs.get(activeInfo.tabId);\n  \n  if (!tab.url || pendingUrls.has(tab.url)) {\n    logger.info(`Tab URL empty or already being processed: ${tab.url}`);\n    return;\n  }\n  \n  pendingUrls.add(tab.url);\n  \n  try {\n    // Delegate to the appropriate handler\n    await handleTabChangeWithPlugins(tab);\n  } catch (error) {\n    logger.error(`Error in tab activation handler: ${error}`);\n  } finally {\n    setTimeout(() => {\n      pendingUrls.delete(tab.url);\n    }, 500);\n  }\n}\n\nasync function handleUnifiedTabUpdate(tabId, changeInfo, tab) {\n  if (changeInfo.status !== 'complete' || !tab.url || pendingUrls.has(tab.url)) {\n    return;\n  }\n  \n  logger.info(`Unified tab update handler: ${tab.url}`);\n  pendingUrls.add(tab.url);\n  \n  try {\n    // Delegate to the appropriate handler\n    await handleTabChangeWithPlugins(tab);\n  } catch (error) {\n    logger.error(`Error in tab update handler: ${error}`);\n  } finally {\n    setTimeout(() => {\n      pendingUrls.delete(tab.url);\n    }, 500);\n  }\n}\n\n// Process a paper URL with plugin system\nasync function processPaperUrl(url) {\n  logger.info(`Processing paper URL: ${url}`);\n  \n  // Skip if URL is already being processed\n  if (pendingUrls.has(url)) {\n    logger.info(`URL already being processed in processPaperUrl: ${url}`);\n    return null;\n  }\n  \n  // Mark URL as being processed\n  pendingUrls.add(url);\n  \n  try {\n    // Find the appropriate plugin or source info\n    const sourceInfo = findPluginForUrl(url);\n    \n    if (!sourceInfo) {\n      logger.info('Not a recognized paper URL in processor');\n      return null;\n    }\n    \n    // Process based on source type\n    let paperData;\n    \n    if (sourceInfo.plugin) {\n      // Use plugin if available\n      const plugin = sourceInfo.plugin;\n      \n      // Try to use the plugin's API if available\n      if (plugin.hasApi && plugin.fetchApiData) {\n        try {\n          logger.info(`Using ${plugin.id} plugin API to process paper`);\n          const apiData = await plugin.fetchApiData(sourceInfo.id);\n          if (Object.keys(apiData).length > 0) {\n            paperData = {\n              ...apiData,\n              source: plugin.id,\n              sourceId: sourceInfo.id,\n              primary_id: sourceInfo.primary_id,\n              url: url\n            };\n          }\n        } catch (error) {\n          logger.error(`Error using plugin API: ${error}`);\n        }\n      }\n      \n      // If API failed, try to extract from the page DOM if we have a tab ID\n      if (!paperData) {\n        try {\n          logger.info(`Attempting DOM extraction for ${plugin.id}`);\n          const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n          if (tabs.length > 0 && tabs[0].id) {\n            const tabId = tabs[0].id;\n            \n            // Execute script to get HTML document\n            const script = await chrome.scripting.executeScript({\n              target: { tabId },\n              func: () => document.documentElement.outerHTML\n            });\n            \n            if (script && script[0] && script[0].result) {\n              // Create DOM document from HTML\n              const parser = new DOMParser();\n              const doc = parser.parseFromString(script[0].result, 'text/html');\n              \n              // Use plugin to extract metadata\n              const metadata = await plugin.extractMetadata(doc, url);\n              if (metadata && Object.keys(metadata).length > 0) {\n                paperData = {\n                  ...metadata,\n                  source: plugin.id,\n                  sourceId: sourceInfo.id,\n                  primary_id: sourceInfo.primary_id,\n                  url: url\n                };\n              }\n            }\n          }\n        } catch (error) {\n          logger.error(`Error extracting from DOM: ${error}`);\n        }\n      }\n    }\n    \n    // If we still don't have paper data, create a basic record\n    if (!paperData) {\n      paperData = {\n        source: sourceInfo.type,\n        sourceId: sourceInfo.id,\n        primary_id: sourceInfo.primary_id,\n        url: url,\n        title: `${sourceInfo.type.toUpperCase()} Paper: ${sourceInfo.id}`,\n        timestamp: new Date().toISOString(),\n        rating: 'novote'\n      };\n    }\n    \n    // If paper data was extracted, create or update in GitHub\n    if (paperData) {\n      logger.info(`Paper data extracted, creating GitHub issue for: ${paperData.primary_id}`);\n      try {\n        await createGithubIssue(paperData);\n      } catch (error) {\n        logger.error(`Error creating GitHub issue: ${error}`);\n      }\n    }\n    \n    return paperData;\n  } catch (error) {\n    logger.error(`Error processing paper URL: ${error}`);\n    return null;\n  } finally {\n    // Remove URL from pending after a delay\n    setTimeout(() => {\n      pendingUrls.delete(url);\n    }, 500);\n  }\n}\n\n// Handle tab changes with plugin system\nasync function handleTabChangeWithPlugins(tab) {\n  if (!tab.url) return;\n  \n  // Find the appropriate plugin or source info\n  const sourceInfo = findPluginForUrl(tab.url);\n  \n  if (!sourceInfo) {\n    logger.info('Not a recognized paper page, ending current session');\n    await endCurrentSession();\n    return;\n  }\n  \n  // End any existing session\n  if (currentSession) {\n    logger.info('Ending existing session before starting new one');\n    await endCurrentSession();\n  }\n  \n  // Process the paper URL\n  logger.info(`Processing paper URL: ${tab.url}`);\n  \n  // Get paper data using the plugin system\n  const paperData = await processPaperUrl(tab.url);\n  \n  if (paperData) {\n    logger.info(`Starting new session for: ${paperData.primary_id}`);\n    \n    // Store current paper data\n    currentPaperData = paperData;\n    \n    // Create a new reading session\n    currentSession = new EnhancedReadingSession(paperData, sessionConfig);\n    \n    const metadata = currentSession.getMetadata();\n    logger.info('New session created:', metadata);\n    \n    // Start tracking reading time\n    startActivityTracking();\n    \n    // Create GitHub issue\n    logger.info(`Creating GitHub issue for: ${paperData.primary_id}`);\n    try {\n      await createGithubIssue(paperData);\n    } catch (error) {\n      logger.error(`Error creating GitHub issue: ${error}`);\n    }\n  }\n}\n\nasync function endCurrentSession() {\n  if (currentSession && currentPaperData) {\n    logger.info(`Ending session for: ${currentPaperData.primary_id}`);\n    const sessionData = currentSession.finalize();\n    if (sessionData) {\n      logger.info('Creating reading event:', sessionData);\n      await createReadingEvent(currentPaperData, sessionData);\n    }\n    currentSession = null;\n    currentPaperData = null;\n    stopActivityTracking();\n  }\n}\n\nfunction startActivityTracking() {\n  if (!activityInterval) {\n    logger.info('Starting activity tracking');\n    activityInterval = setInterval(() => {\n      if (currentSession) {\n        currentSession.update();\n      }\n    }, sessionConfig.activityUpdateInterval);\n  }\n}\n\nfunction stopActivityTracking() {\n  if (activityInterval) {\n    clearInterval(activityInterval);\n    activityInterval = null;\n  }\n}\n\n// Create reading event function for all sources\nasync function createReadingEvent(paperData, sessionData) {\n  if (!paperManager || !paperData) {\n    logger.error('Missing required data for creating reading event:', {\n      hasPaperManager: !!paperManager,\n      hasPaperData: !!paperData\n    });\n    return;\n  }\n\n  try {\n    // Always use primary_id for storage\n    if (!paperData.primary_id) {\n      logger.error('Paper data missing primary_id. This should not happen.');\n      return;\n    }\n    \n    const paperId = paperData.primary_id;\n    \n    await paperManager.logReadingSession(\n      paperId,\n      sessionData,\n      paperData\n    );\n    \n    logger.info('Reading session logged:', {\n      paperId: paperId,\n      sessionId: sessionData.session_id,\n      activeTime: sessionData.duration_seconds,\n      idleTime: sessionData.idle_seconds,\n      totalTime: sessionData.total_elapsed_seconds\n    });\n    \n  } catch (error) {\n    logger.error('Error logging reading session:', error);\n  }\n}\n\n// GitHub issue creation function\nasync function createGithubIssue(paperData) {\n  if (!paperManager) {\n    logger.error('Paper manager not initialized');\n    return null;\n  }\n\n  // Ensure paper has primary_id\n  if (!paperData.primary_id) {\n    if (paperData.source && paperData.sourceId) {\n      paperData.primary_id = formatPrimaryId(paperData.source, paperData.sourceId);\n    } else {\n      logger.error('Cannot create paper - no valid identifier');\n      return null;\n    }\n  }\n  \n  try {\n    logger.info(`Creating/getting paper issue: ${paperData.primary_id}`);\n    const existingPaper = await paperManager.getOrCreatePaper(paperData);\n    logger.info(`Paper metadata stored/retrieved: ${existingPaper.primary_id}`);\n    return existingPaper;\n  } catch (error) {\n    logger.error(`Error handling paper metadata: ${error}`, error);\n    return null;\n  }\n}\n\nasync function handleAnnotationUpdate(type, data) {\n  if (!paperManager) {\n    throw new Error('Paper manager not initialized');\n  }\n\n  try {\n    // Ensure we have a valid paper ID\n    let paperId = data.paperId;\n    \n    // Convert to new format if needed\n    if (!paperId.includes('.')) {\n      logger.warning(`Legacy ID format detected in annotation: ${paperId}`);\n      paperId = formatPrimaryId('arxiv', paperId);\n    }\n    \n    const paperData = data.title ? {\n      title: data.title,\n      source: data.source,\n      primary_id: paperId\n    } : undefined;\n\n    if (type === 'vote') {\n      await paperManager.updateRating(\n        paperId,\n        data.vote,\n        paperData\n      );\n    } else {\n      await paperManager.logAnnotation(\n        paperId,\n        'notes',\n        data.notes,\n        paperData\n      );\n    }\n\n    return { success: true };\n  } catch (error) {\n    logger.error('Error logging interaction:', error);\n    throw error;\n  }\n}\n\n// Initialize debug objects in service worker scope\nfunction initializeDebugObjects() {\n  // Don't use window in service worker context\n  self.__DEBUG__ = {\n    get paperManager() { return paperManager; },\n    getGithubClient: () => paperManager?.client,\n    getCurrentPaper: () => currentPaperData,\n    getCurrentSession: () => currentSession,\n    getConfig: () => sessionConfig\n  };\n\n  logger.info('Debug objects registered, access via __DEBUG__ in service worker console');\n}\n"],"names":["logger","plugins","GitHubStoreClient"],"mappings":"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","x_google_ignoreList":[0]}