{"version":3,"file":"background.bundle.js","sources":["../node_modules/gh-store-client/dist/index.mjs","../papers/types.ts","../papers/manager.ts","../utils/session-tracker.ts","../utils/popup-manager.ts","../source-integration/source-manager.ts","../background.ts"],"sourcesContent":["var d=class{constructor(e={}){this.cache=new Map,this.maxSize=e.maxSize??1e3,this.ttl=e.ttl??1e3*60*60,this.accessOrder=[]}get(e){let s=this.cache.get(e);if(s){if(Date.now()-s.lastAccessed>this.ttl){this.cache.delete(e),this.removeFromAccessOrder(e);return}return s.lastAccessed=Date.now(),this.updateAccessOrder(e),s.issueNumber}}set(e,s,t){if(this.cache.size>=this.maxSize&&!this.cache.has(e)){let r=this.accessOrder[this.accessOrder.length-1];r&&(this.cache.delete(r),this.removeFromAccessOrder(r))}this.cache.set(e,{issueNumber:s,lastAccessed:Date.now(),createdAt:t.createdAt,updatedAt:t.updatedAt}),this.updateAccessOrder(e)}remove(e){this.cache.delete(e),this.removeFromAccessOrder(e)}clear(){this.cache.clear(),this.accessOrder=[]}getStats(){return{size:this.cache.size,maxSize:this.maxSize,ttl:this.ttl}}shouldRefresh(e,s){let t=this.cache.get(e);return t?s>t.updatedAt:!0}updateAccessOrder(e){this.removeFromAccessOrder(e),this.accessOrder.unshift(e)}removeFromAccessOrder(e){let s=this.accessOrder.indexOf(e);s>-1&&this.accessOrder.splice(s,1)}};var l=\"0.3.2\";var f=class{constructor(e,s,t={}){this.token=e,this.repo=s,this.config={baseLabel:t.baseLabel??\"stored-object\",uidPrefix:t.uidPrefix??\"UID:\",reactions:{processed:t.reactions?.processed??\"+1\",initialState:t.reactions?.initialState??\"rocket\"}},this.cache=new d(t.cache)}async fetchFromGitHub(e,s={}){let t=new URL(`https://api.github.com/repos/${this.repo}${e}`);s.params&&(Object.entries(s.params).forEach(([i,a])=>{t.searchParams.append(i,a)}),delete s.params);let r=await fetch(t.toString(),{...s,headers:{Authorization:`token ${this.token}`,Accept:\"application/vnd.github.v3+json\",...s.headers}});if(!r.ok)throw new Error(`GitHub API error: ${r.status}`);return r.json()}createCommentPayload(e,s){let t={_data:e,_meta:{client_version:l,timestamp:new Date().toISOString(),update_mode:\"append\"}};return s&&(t.type=s),t}async getObject(e){let s=this.cache.get(e),t;if(s)try{t=await this.fetchFromGitHub(`/issues/${s}`),this._verifyIssueLabels(t,e)||(this.cache.remove(e),t=void 0)}catch{this.cache.remove(e)}if(!t){let c=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"closed\"}});if(!c||c.length===0)throw new Error(`No object found with ID: ${e}`);t=c[0]}if(!t?.body)throw new Error(`Invalid issue data received for ID: ${e}`);let r=JSON.parse(t.body),i=new Date(t.created_at),a=new Date(t.updated_at);return this.cache.set(e,t.number,{createdAt:i,updatedAt:a}),{meta:{objectId:e,label:`${this.config.uidPrefix}${e}`,createdAt:i,updatedAt:a,version:await this._getVersion(t.number)},data:r}}async createObject(e,s){let t=`${this.config.uidPrefix}${e}`,r=await this.fetchFromGitHub(\"/issues\",{method:\"POST\",body:JSON.stringify({title:`Stored Object: ${e}`,body:JSON.stringify(s,null,2),labels:[this.config.baseLabel,t]})});this.cache.set(e,r.number,{createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at)});let i=this.createCommentPayload(s,\"initial_state\"),a=await this.fetchFromGitHub(`/issues/${r.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(i,null,2)})});return await this.fetchFromGitHub(`/issues/comments/${a.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.processed})}),await this.fetchFromGitHub(`/issues/comments/${a.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.initialState})}),await this.fetchFromGitHub(`/issues/${r.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"closed\"})}),{meta:{objectId:e,label:t,createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at),version:1},data:s}}_verifyIssueLabels(e,s){let t=new Set([this.config.baseLabel,`${this.config.uidPrefix}${s}`]);return e.labels.some(r=>t.has(r.name))}async updateObject(e,s){let t=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!t||t.length===0)throw new Error(`No object found with ID: ${e}`);let r=t[0],i=this.createCommentPayload(s);return await this.fetchFromGitHub(`/issues/${r.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(i,null,2)})}),await this.fetchFromGitHub(`/issues/${r.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"open\"})}),this.getObject(e)}async listAll(){let e=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\"}}),s={};for(let t of e)if(!t.labels.some(r=>r.name===\"archived\"))try{let r=this._getObjectIdFromLabels(t),i=JSON.parse(t.body),a={objectId:r,label:r,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at),version:await this._getVersion(t.number)};s[r]={meta:a,data:i}}catch{continue}return s}async listUpdatedSince(e){let s=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\",since:e.toISOString()}}),t={};for(let r of s)if(!r.labels.some(i=>i.name===\"archived\"))try{let i=this._getObjectIdFromLabels(r),a=JSON.parse(r.body),n=new Date(r.updated_at);if(n>e){let c={objectId:i,label:i,createdAt:new Date(r.created_at),updatedAt:n,version:await this._getVersion(r.number)};t[i]={meta:c,data:a}}}catch{continue}return t}async getObjectHistory(e){let s=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!s||s.length===0)throw new Error(`No object found with ID: ${e}`);let t=s[0],r=await this.fetchFromGitHub(`/issues/${t.number}/comments`),i=[];for(let a of r)try{let n=JSON.parse(a.body),c=\"update\",m,b={client_version:\"legacy\",timestamp:a.created_at,update_mode:\"append\"};typeof n==\"object\"?\"_data\"in n?(c=n.type||\"update\",m=n._data,b=n._meta||b):\"type\"in n&&n.type===\"initial_state\"?(c=\"initial_state\",m=n.data):m=n:m=n,i.push({timestamp:a.created_at,type:c,data:m,commentId:a.id})}catch{continue}return i}async _getVersion(e){return(await this.fetchFromGitHub(`/issues/${e}/comments`)).length+1}_getObjectIdFromLabels(e){for(let s of e.labels)if(s.name!==this.config.baseLabel&&s.name.startsWith(this.config.uidPrefix))return s.name.slice(this.config.uidPrefix.length);throw new Error(`No UID label found with prefix ${this.config.uidPrefix}`)}};var u={baseLabel:\"stored-object\",uidPrefix:\"UID:\",reactions:{processed:\"+1\",initialState:\"rocket\"},retries:{maxAttempts:3,backoffFactor:2},rateLimit:{maxRequestsPerHour:1e3}};function _(o){return{...u,...o,reactions:{...u.reactions,...o.reactions},retries:{...u.retries,...o.retries},rateLimit:{...u.rateLimit,...o.rateLimit}}}function v(o){return/^gh[ps]_[a-zA-Z0-9]{36}$/.test(o)}function P(o){return/^[\\w-]+\\/[\\w-]+$/.test(o)}var h=class extends Error{constructor(e){super(e),this.name=\"ConfigError\"}},g=class extends h{constructor(e=\"Invalid GitHub token format\"){super(e),this.name=\"TokenError\"}},p=class extends h{constructor(e=\"Invalid repository format. Use owner/repo\"){super(e),this.name=\"RepoError\"}};export{h as ConfigError,u as DEFAULT_CONFIG,f as GitHubStoreClient,p as RepoError,g as TokenError,_ as mergeConfig,P as validateRepo,v as validateToken};\n//# sourceMappingURL=index.mjs.map","// extension/papers/types.ts\n// Type definitions for paper data\n\nimport type { Json } from 'gh-store-client';\n\n/**\n * Paper metadata from any source\n */\nexport interface PaperMetadata {\n  // Source identifier\n  sourceId: string;\n  \n  // Paper identifier within the source\n  paperId: string;\n  \n  // Full URL to the paper\n  url: string;\n  \n  // Paper title\n  title: string;\n  \n  // Authors (comma-separated)\n  authors: string;\n  \n  // Abstract or summary\n  abstract: string;\n  \n  // When this paper was first added\n  timestamp: string;\n  \n  // Publication date\n  publishedDate: string;\n  \n  // Tags or categories\n  tags: string[];\n  \n  // User-assigned rating (novote, thumbsup, thumbsdown)\n  rating: string;\n  \n  // Allow additional source-specific properties\n  [key: string]: any;\n}\n\n/**\n * Reading session data\n */\nexport interface ReadingSessionData {\n  // Session identifier\n  session_id: string;\n  \n  // Active reading time in seconds\n  duration_seconds: number;\n  \n  // Idle time in seconds\n  idle_seconds: number;\n  \n  // Session start time\n  start_time: string;\n  \n  // Session end time\n  end_time: string;\n  \n  // Total elapsed time (active + idle) in seconds\n  total_elapsed_seconds: number;\n}\n\n/**\n * Interaction data\n */\nexport interface Interaction {\n  // Type of interaction (reading_session, annotation, rating)\n  type: string;\n  \n  // When interaction occurred\n  timestamp: string;\n  \n  // Additional data\n  data: Json;\n}\n\n/**\n * Interaction log\n */\nexport interface InteractionLog {\n  // Source identifier\n  sourceId: string;\n  \n  // Paper identifier within the source\n  paperId: string;\n  \n  // List of interactions\n  interactions: Interaction[];\n\n  // Index signature to make it compatible with Json type\n  [key: string]: string | Interaction[] | any;\n}\n\n/**\n * Type guard for interaction log\n */\nexport function isInteractionLog(data: unknown): data is InteractionLog {\n  const log = data as InteractionLog;\n  return (\n    typeof log === 'object' &&\n    log !== null &&\n    typeof log.sourceId === 'string' &&\n    typeof log.paperId === 'string' &&\n    Array.isArray(log.interactions)\n  );\n}\n","// extension/papers/manager.ts\nimport { GitHubStoreClient } from 'gh-store-client';\nimport type { Json } from 'gh-store-client';\nimport { \n  type PaperMetadata, \n  type InteractionLog, \n  type Interaction,\n  type ReadingSessionData,\n  isInteractionLog\n} from './types';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('paper-manager');\n\nexport class PaperManager {\n  constructor(private client: GitHubStoreClient) {\n    logger.debug('Paper manager initialized');\n  }\n  \n  /**\n   * Get paper by source and ID\n   */\n  async getPaper(sourceId: string, paperId: string): Promise<PaperMetadata | null> {\n    const objectId = `paper:${sourceId}:${paperId}`;\n    \n    try {\n      const obj = await this.client.getObject(objectId);\n      return obj.data as PaperMetadata;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Get or create paper metadata\n   */\n  async getOrCreatePaper(paperData: PaperMetadata): Promise<PaperMetadata> {\n    const { sourceId, paperId } = paperData;\n    const objectId = `paper:${sourceId}:${paperId}`;\n    \n    try {\n      const obj = await this.client.getObject(objectId);\n      const data = obj.data as PaperMetadata;\n      logger.debug(`Retrieved existing paper: ${sourceId}:${paperId}`);\n      return data;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        // Create new paper\n        const defaultPaperData: PaperMetadata = {\n          ...paperData,\n          timestamp: new Date().toISOString(),\n          rating: paperData.rating || 'novote'\n        };\n\n        await this.client.createObject(objectId, defaultPaperData);\n        logger.debug(`Created new paper: ${sourceId}:${paperId}`);\n        return defaultPaperData;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get or create interaction log for a paper\n   */\n  private async getOrCreateInteractionLog(sourceId: string, paperId: string): Promise<InteractionLog> {\n    const objectId = `interactions:${sourceId}:${paperId}`;\n    try {\n      const obj = await this.client.getObject(objectId);\n      const data = obj.data as unknown;\n      if (isInteractionLog(data)) {\n        return data;\n      }\n      throw new Error('Invalid interaction log format');\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        const newLog: InteractionLog = {\n          sourceId,\n          paperId,\n          interactions: []\n        };\n        await this.client.createObject(objectId, newLog as unknown as { [key: string]: Json });\n        logger.debug(`Created new interaction log: ${sourceId}:${paperId}`);\n        return newLog;\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Get GitHub client instance\n   */\n  getClient(): GitHubStoreClient {\n    return this.client;\n  }\n  \n  /**\n   * Log a reading session\n   */\n  async logReadingSession(\n    sourceId: string,\n    paperId: string,\n    session: ReadingSessionData,\n    paperData?: Partial<PaperMetadata>\n  ): Promise<void> {\n    // Ensure paper exists\n    if (paperData) {\n      await this.getOrCreatePaper({\n        sourceId,\n        paperId,\n        url: paperData.url || `${sourceId}:${paperId}`,\n        title: paperData.title || paperId,\n        authors: paperData.authors || '',\n        abstract: paperData.abstract || '',\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate: paperData.publishedDate || '',\n        tags: paperData.tags || []\n      });\n    }\n\n    // Log the session as an interaction\n    await this.addInteraction(sourceId, paperId, {\n      type: 'reading_session',\n      timestamp: new Date().toISOString(),\n      data: session as unknown as { [key: string]: Json }\n    });\n    \n    logger.info(`Logged reading session for ${sourceId}:${paperId}`, { duration: session.duration_seconds });\n  }\n\n  /**\n   * Log an annotation\n   */\n  async logAnnotation(\n    sourceId: string,\n    paperId: string,\n    key: string,\n    value: Json,\n    paperData?: Partial<PaperMetadata>\n  ): Promise<void> {\n    // Ensure paper exists\n    if (paperData) {\n      await this.getOrCreatePaper({\n        sourceId,\n        paperId,\n        url: paperData.url || `${sourceId}:${paperId}`,\n        title: paperData.title || paperId,\n        authors: paperData.authors || '',\n        abstract: paperData.abstract || '',\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate: paperData.publishedDate || '',\n        tags: paperData.tags || []\n      });\n    }\n\n    // Log the annotation as an interaction\n    await this.addInteraction(sourceId, paperId, {\n      type: 'annotation',\n      timestamp: new Date().toISOString(),\n      data: { key, value }\n    });\n    \n    logger.info(`Logged annotation for ${sourceId}:${paperId}`, { key });\n  }\n\n  /**\n   * Update paper rating\n   */\n  async updateRating(\n    sourceId: string,\n    paperId: string,\n    rating: string,\n    paperData?: Partial<PaperMetadata>\n  ): Promise<void> {\n    // Ensure paper exists and get current data\n    const paper = await this.getOrCreatePaper({\n      sourceId,\n      paperId,\n      url: paperData?.url || `${sourceId}:${paperId}`,\n      title: paperData?.title || paperId,\n      authors: paperData?.authors || '',\n      abstract: paperData?.abstract || '',\n      timestamp: new Date().toISOString(),\n      rating: 'novote',\n      publishedDate: paperData?.publishedDate || '',\n      tags: paperData?.tags || []\n    });\n\n    // Update paper metadata with new rating\n    await this.client.updateObject(`paper:${sourceId}:${paperId}`, { \n      ...paper,\n      rating \n    });\n\n    // Log rating change as an interaction\n    await this.addInteraction(sourceId, paperId, {\n      type: 'rating',\n      timestamp: new Date().toISOString(),\n      data: { rating }\n    });\n    \n    logger.info(`Updated rating for ${sourceId}:${paperId} to ${rating}`);\n  }\n\n  /**\n   * Add interaction to log\n   */\n  private async addInteraction(sourceId: string, paperId: string, interaction: Interaction): Promise<void> {\n    const log = await this.getOrCreateInteractionLog(sourceId, paperId);\n    log.interactions.push(interaction);\n    await this.client.updateObject(`interactions:${sourceId}:${paperId}`, log as unknown as { [key: string]: Json });\n  }\n\n  /**\n   * Get interactions for a paper\n   */\n  async getInteractions(\n    sourceId: string,\n    paperId: string,\n    options: {\n      type?: string;\n      startTime?: Date;\n      endTime?: Date;\n    } = {}\n  ): Promise<Interaction[]> {\n    try {\n      const log = await this.getOrCreateInteractionLog(sourceId, paperId);\n      let interactions = log.interactions;\n\n      if (options.type) {\n        interactions = interactions.filter((i: Interaction) => i.type === options.type);\n      }\n\n      if (options.startTime || options.endTime) {\n        interactions = interactions.filter((i: Interaction) => {\n          const time = new Date(i.timestamp);\n          if (options.startTime && time < options.startTime) return false;\n          if (options.endTime && time > options.endTime) return false;\n          return true;\n        });\n      }\n\n      return interactions;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        return [];\n      }\n      throw error;\n    }\n  }\n    \n  /**\n   * Calculate total reading time for a paper\n   */\n  async getPaperReadingTime(sourceId: string, paperId: string): Promise<number> {\n    const interactions = await this.getInteractions(sourceId, paperId, { type: 'reading_session' });\n    return interactions.reduce((total, i) => {\n      const data = i.data;\n      if (typeof data === 'object' && data !== null && 'duration_seconds' in data) {\n        return total + (data.duration_seconds as number);\n      }\n      return total;\n    }, 0);\n  }\n\n  /**\n   * Get history of paper changes\n   */\n  async getPaperHistory(sourceId: string, paperId: string): Promise<Json[]> {\n    const objectId = `paper:${sourceId}:${paperId}`;\n    return this.client.getObjectHistory(objectId);\n  }\n}\n","// utils/session-tracker.ts\n// Reading session tracking\n\nimport { ReadingSessionData } from '../papers/types';\nimport { loguru } from './logger';\n\nconst logger = loguru.getLogger('session-tracker');\n\nexport interface SessionConfig {\n  // Threshold for idle time in milliseconds\n  idleThreshold: number;\n  \n  // Minimum session duration to be considered valid, in milliseconds\n  minSessionDuration: number;\n  \n  // How often to update active time in milliseconds\n  activityUpdateInterval: number;\n  \n  // Whether to require continuous activity (reset timer on idle)\n  requireContinuousActivity: boolean;\n  \n  // Whether to log sessions shorter than minimum duration\n  logPartialSessions: boolean;\n}\n\nexport class SessionTracker {\n  private activeSession: ReadingSession | null = null;\n  private updateInterval: number | null = null;\n  private currentPaperId: string | null = null;\n  private currentSourceId: string | null = null;\n  \n  constructor(private config: SessionConfig) {\n    logger.debug('Session tracker initialized', config);\n  }\n  \n  /**\n   * Start tracking a new session\n   */\n  startSession(sourceId: string, paperId: string): void {\n    // End any existing session first\n    this.endSession();\n    \n    // Create new session\n    this.activeSession = new ReadingSession(sourceId, paperId, this.config);\n    this.currentSourceId = sourceId;\n    this.currentPaperId = paperId;\n    \n    // Start update interval\n    this.startUpdateInterval();\n    \n    logger.info(`Started tracking session for ${sourceId}:${paperId}`, \n      this.activeSession.getMetadata());\n  }\n  \n  /**\n   * End the current session and get the data\n   */\n  endSession(): ReadingSessionData | null {\n    if (!this.activeSession) {\n      return null;\n    }\n    \n    // Stop the update interval\n    this.stopUpdateInterval();\n    \n    // Finalize the session\n    const sessionData = this.activeSession.finalize();\n    \n    logger.info(`Ended session for ${this.currentSourceId}:${this.currentPaperId}`,\n      sessionData ? {\n        duration: sessionData.duration_seconds,\n        idle: sessionData.idle_seconds\n      } : 'Session too short');\n    \n    // Clear current session\n    this.activeSession = null;\n    this.currentSourceId = null;\n    this.currentPaperId = null;\n    \n    return sessionData;\n  }\n  \n  /**\n   * Get the current session's metadata\n   */\n  getCurrentSessionMetadata(): any | null {\n    return this.activeSession?.getMetadata() || null;\n  }\n  \n  /**\n   * Get current paper and source IDs\n   */\n  getCurrentPaper(): { sourceId: string | null, paperId: string | null } {\n    return {\n      sourceId: this.currentSourceId,\n      paperId: this.currentPaperId\n    };\n  }\n  \n  /**\n   * Start the activity update interval\n   */\n  private startUpdateInterval(): void {\n    if (this.updateInterval !== null) {\n      clearInterval(this.updateInterval);\n    }\n    \n    this.updateInterval = window.setInterval(() => {\n      this.activeSession?.update();\n    }, this.config.activityUpdateInterval);\n  }\n  \n  /**\n   * Stop the activity update interval\n   */\n  private stopUpdateInterval(): void {\n    if (this.updateInterval !== null) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n  }\n}\n\nclass ReadingSession {\n  // Session ID\n  readonly sessionId: string;\n  \n  // Timestamps\n  private startTime: Date;\n  private lastActiveTime: Date;\n  private endTime: Date | null = null;\n  \n  // Time tracking\n  private activeTime: number = 0;\n  private idleTime: number = 0;\n  \n  // State\n  private isTracking: boolean = true;\n  private finalizedData: ReadingSessionData | null = null;\n  \n  constructor(\n    public sourceId: string,\n    public paperId: string,\n    private config: SessionConfig\n  ) {\n    this.sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    this.startTime = new Date();\n    this.lastActiveTime = new Date();\n  }\n  \n  /**\n   * Update the session's active and idle time\n   */\n  update(): void {\n    if (!this.isTracking || this.finalizedData) {\n      return;\n    }\n    \n    const now = new Date();\n    const timeSinceLastActive = now.getTime() - this.lastActiveTime.getTime();\n    \n    if (timeSinceLastActive < this.config.idleThreshold) {\n      // User is active\n      this.activeTime += timeSinceLastActive;\n    } else {\n      // User is idle\n      this.idleTime += timeSinceLastActive;\n    }\n    \n    this.lastActiveTime = now;\n  }\n  \n  /**\n   * Finalize the session and get the data\n   */\n  finalize(): ReadingSessionData | null {\n    if (this.finalizedData) {\n      return this.finalizedData;\n    }\n    \n    // Update one last time\n    this.update();\n    \n    // Stop tracking\n    this.isTracking = false;\n    this.endTime = new Date();\n    \n    // Calculate total elapsed time\n    const totalElapsed = this.endTime.getTime() - this.startTime.getTime();\n    \n    // Check if session is long enough\n    if (this.activeTime >= this.config.minSessionDuration || this.config.logPartialSessions) {\n      this.finalizedData = {\n        session_id: this.sessionId,\n        duration_seconds: Math.round(this.activeTime / 1000),\n        idle_seconds: Math.round(this.idleTime / 1000),\n        start_time: this.startTime.toISOString(),\n        end_time: this.endTime.toISOString(),\n        total_elapsed_seconds: Math.round(totalElapsed / 1000)\n      };\n      \n      return this.finalizedData;\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Get session metadata (for debugging/display)\n   */\n  getMetadata(): any {\n    return {\n      sessionId: this.sessionId,\n      sourceId: this.sourceId,\n      paperId: this.paperId,\n      startTime: this.startTime.toISOString(),\n      activeSeconds: Math.round(this.activeTime / 1000),\n      idleSeconds: Math.round(this.idleTime / 1000),\n      isTracking: this.isTracking\n    };\n  }\n}\n","// extension/utils/popup-manager.ts\n// Popup management system integrated with source manager\n\nimport { SourceManager } from '../source-integration/types';\nimport { PaperManager } from '../papers/manager';\nimport { loguru } from './logger';\n\nconst logger = loguru.getLogger('popup-manager');\n\n/**\n * Popup handler information\n */\ninterface PopupHandler {\n  selector: string;\n  event: string;\n  action: string;\n}\n\n/**\n * Popup message type\n */\ninterface ShowPopupMessage {\n  type: 'showPopup';\n  sourceId: string;\n  paperId: string;\n  html: string;\n  handlers: PopupHandler[];\n  position?: { x: number, y: number };\n}\n\n/**\n * Manages all popup-related functionality\n */\nexport class PopupManager {\n  // Source manager and paper manager\n  private sourceManagerProvider: () => SourceManager | null;\n  private paperManagerProvider: () => PaperManager | null;\n  \n  /**\n   * Create a new popup manager\n   */\n  constructor(\n    sourceManagerProvider: () => SourceManager | null,\n    paperManagerProvider: () => PaperManager | null\n  ) {\n    this.sourceManagerProvider = sourceManagerProvider;\n    this.paperManagerProvider = paperManagerProvider;\n    \n    this.setupMessageListeners();\n    logger.debug('Popup manager initialized');\n  }\n  \n  /**\n   * Set up message listeners for popup-related messages\n   */\n  private setupMessageListeners(): void {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      // Handle popup actions (ratings, notes, etc.)\n      if (message.type === 'popupAction') {\n        this.handlePopupAction(\n          message.sourceId,\n          message.paperId,\n          message.action,\n          message.data\n        ).then(() => {\n          sendResponse({ success: true });\n        }).catch(error => {\n          logger.error('Error handling popup action', error);\n          sendResponse({ \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error' \n          });\n        });\n        \n        return true; // Will respond asynchronously\n      }\n      \n      // Handle request to show annotation popup\n      if (message.type === 'showAnnotationPopup' && sender.tab?.id) {\n        this.handleShowAnnotationPopup(\n          sender.tab.id,\n          message.sourceId,\n          message.paperId,\n          message.position\n        ).then(() => {\n          sendResponse({ success: true });\n        }).catch(error => {\n          logger.error('Error showing popup', error);\n          sendResponse({ \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        });\n        \n        return true; // Will respond asynchronously\n      }\n      \n      return false; // Not handled\n    });\n  }\n  \n  /**\n   * Handle a request to show an annotation popup\n   */\n  private async handleShowAnnotationPopup(\n    tabId: number,\n    sourceId: string,\n    paperId: string,\n    position: { x: number, y: number }\n  ): Promise<void> {\n    logger.debug(`Showing annotation popup for ${sourceId}:${paperId}`);\n    \n    // Check if we have source and paper manager\n    const sourceManager = this.sourceManagerProvider();\n    const paperManager = this.paperManagerProvider();\n    \n    if (!sourceManager) {\n      throw new Error('Source manager not initialized');\n    }\n    \n    if (!paperManager) {\n      throw new Error('Paper manager not initialized');\n    }\n    \n    try {\n      // Get paper data\n      const paper = await paperManager.getPaper(sourceId, paperId);\n      \n      // Create popup HTML\n      const html = this.createPopupHtml(paper || { \n        sourceId, \n        paperId,\n        title: paperId,\n        authors: '',\n        abstract: '',\n        url: '',\n        timestamp: new Date().toISOString(),\n        publishedDate: '',\n        tags: [],\n        rating: 'novote'\n      });\n      \n      // Get handlers\n      const handlers = this.getStandardPopupHandlers();\n      \n      // Send message to content script to show popup\n      const message: ShowPopupMessage = {\n        type: 'showPopup',\n        sourceId,\n        paperId,\n        html,\n        handlers,\n        position\n      };\n      \n      await chrome.tabs.sendMessage(tabId, message);\n      \n      logger.debug(`Sent popup to content script for ${sourceId}:${paperId}`);\n    } catch (error) {\n      logger.error(`Error showing popup for ${sourceId}:${paperId}`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Handle popup actions (ratings, notes, etc.)\n   */\n  private async handlePopupAction(\n    sourceId: string,\n    paperId: string,\n    action: string,\n    data: any\n  ): Promise<void> {\n    const paperManager = this.paperManagerProvider();\n    \n    if (!paperManager) {\n      throw new Error('Paper manager not initialized');\n    }\n    \n    logger.debug(`Handling popup action: ${action}`, { sourceId, paperId });\n    \n    try {\n      if (action === 'rate') {\n        await paperManager.updateRating(sourceId, paperId, data.value);\n        logger.info(`Updated rating for ${sourceId}:${paperId} to ${data.value}`);\n      } \n      else if (action === 'saveNotes') {\n        if (data.value) {\n          await paperManager.logAnnotation(sourceId, paperId, 'notes', data.value);\n          logger.info(`Saved notes for ${sourceId}:${paperId}`);\n        }\n      }\n    } catch (error) {\n      logger.error(`Error handling action ${action} for ${sourceId}:${paperId}`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create HTML for paper popup\n   */\n  private createPopupHtml(paper: any): string {\n    return `\n      <div class=\"paper-popup-header\">${paper.title || paper.paperId}</div>\n      <div class=\"paper-popup-meta\">${paper.authors || ''}</div>\n      \n      <div class=\"paper-popup-buttons\">\n        <button class=\"vote-button\" data-vote=\"thumbsup\" id=\"btn-thumbsup\" ${paper.rating === 'thumbsup' ? 'class=\"active\"' : ''}>👍 Interesting</button>\n        <button class=\"vote-button\" data-vote=\"thumbsdown\" id=\"btn-thumbsdown\" ${paper.rating === 'thumbsdown' ? 'class=\"active\"' : ''}>👎 Not Relevant</button>\n      </div>\n      \n      <textarea placeholder=\"Add notes about this paper...\" id=\"paper-notes\"></textarea>\n      \n      <div class=\"paper-popup-actions\">\n        <button class=\"save-button\" id=\"btn-save\">Save</button>\n      </div>\n    `;\n  }\n  \n  /**\n   * Get standard popup event handlers\n   */\n  private getStandardPopupHandlers(): PopupHandler[] {\n    return [\n      { selector: '#btn-thumbsup', event: 'click', action: 'rate' },\n      { selector: '#btn-thumbsdown', event: 'click', action: 'rate' },\n      { selector: '#btn-save', event: 'click', action: 'saveNotes' }\n    ];\n  }\n}\n","// source-integration/source-manager.ts\n// Manager for source integrations\n\nimport { SourceIntegration, SourceManager } from './types';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('source-manager');\n\n/**\n * Manages source integrations\n */\nexport class SourceIntegrationManager implements SourceManager {\n  private sources: Map<string, SourceIntegration> = new Map();\n  \n  constructor() {\n    logger.info('Source integration manager initialized');\n  }\n  \n  /**\n   * Register a source integration\n   */\n  registerSource(source: SourceIntegration): void {\n    if (this.sources.has(source.id)) {\n      logger.warning(`Source with ID '${source.id}' already registered, overwriting`);\n    }\n    \n    this.sources.set(source.id, source);\n    logger.info(`Registered source: ${source.name} (${source.id})`);\n  }\n  \n  /**\n   * Get all registered sources\n   */\n  getAllSources(): SourceIntegration[] {\n    return Array.from(this.sources.values());\n  }\n  \n  /**\n   * Get source that can handle a URL\n   */\n  getSourceForUrl(url: string): SourceIntegration | null {\n    for (const source of this.sources.values()) {\n      if (source.canHandleUrl(url)) {\n        logger.debug(`Found source for URL '${url}': ${source.id}`);\n        return source;\n      }\n    }\n    \n    logger.debug(`No source found for URL: ${url}`);\n    return null;\n  }\n  \n  /**\n   * Extract paper ID from URL using appropriate source\n   */\n  extractPaperId(url: string): { sourceId: string, paperId: string } | null {\n    for (const source of this.sources.values()) {\n      if (source.canHandleUrl(url)) {\n        const paperId = source.extractPaperId(url);\n        if (paperId) {\n          logger.debug(`Extracted paper ID '${paperId}' from URL using ${source.id}`);\n          return { sourceId: source.id, paperId };\n        }\n      }\n    }\n    \n    logger.debug(`Could not extract paper ID from URL: ${url}`);\n    return null;\n  }\n  \n  /**\n   * Get all content script match patterns\n   */\n  getAllContentScriptMatches(): string[] {\n    const patterns: string[] = [];\n    \n    for (const source of this.sources.values()) {\n      patterns.push(...source.contentScriptMatches);\n    }\n    \n    return patterns;\n  }\n}\n","// extension/background.ts\n// Background script with direct source imports\n\nimport { GitHubStoreClient } from 'gh-store-client';\nimport { PaperManager } from './papers/manager';\nimport { loadSessionConfig, getConfigurationInMs } from './config/session';\nimport { SessionTracker } from './utils/session-tracker';\nimport { PopupManager } from './utils/popup-manager';\nimport { SourceIntegrationManager } from './source-integration/source-manager';\nimport { loguru } from './utils/logger';\n\n// Import source plugins directly\nimport { arxivIntegration } from './source-integration/arxiv';\nimport { Message } from './source-integration/types';\n\nconst logger = loguru.getLogger('background');\n\n// Global state\nlet githubToken = '';\nlet githubRepo = '';\nlet currentPaperData: any = null;\nlet sessionConfig: any = null;\nlet paperManager: PaperManager | null = null;\nlet sessionTracker: SessionTracker | null = null;\nlet popupManager: PopupManager | null = null;\nlet sourceManager: SourceIntegrationManager | null = null;\n\n// Initialize sources\nfunction initializeSources() {\n  sourceManager = new SourceIntegrationManager();\n  \n  // Register built-in sources directly\n  sourceManager.registerSource(arxivIntegration);\n  \n  logger.info('Source manager initialized');\n  return sourceManager;\n}\n\n// Initialize everything\nasync function initialize() {\n  try {\n    // Initialize sources first\n    initializeSources();\n    \n    // Load GitHub credentials\n    const items = await chrome.storage.sync.get(['githubToken', 'githubRepo']);\n    githubToken = items.githubToken || '';\n    githubRepo = items.githubRepo || '';\n    logger.info('Credentials loaded', { hasToken: !!githubToken, hasRepo: !!githubRepo });\n    \n    // Initialize paper manager if we have credentials\n    if (githubToken && githubRepo) {\n      const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n      paperManager = new PaperManager(githubClient);\n      logger.info('Paper manager initialized');\n    }\n    \n    // Load session configuration\n    const rawConfig = await loadSessionConfig();\n    sessionConfig = getConfigurationInMs(rawConfig);\n    logger.info('Session configuration loaded', sessionConfig);\n    \n    // Initialize session tracker\n    sessionTracker = new SessionTracker(sessionConfig);\n    logger.info('Session tracker initialized');\n    \n    // Initialize popup manager\n    popupManager = new PopupManager(\n      () => sourceManager,\n      () => paperManager\n    );\n    logger.info('Popup manager initialized');\n    \n    // Set up message listeners\n    setupMessageListeners();\n    \n    // Initialize debug objects\n    initializeDebugObjects();\n  } catch (error) {\n    logger.error('Initialization error', error);\n  }\n}\n\n// Set up message listeners\n// Set up message listeners\nfunction setupMessageListeners() {\n  chrome.runtime.onMessage.addListener((message: any, sender, sendResponse) => {\n    if (message.type === 'contentScriptReady' && sender.tab?.id) {\n      logger.debug('Content script ready:', sender.tab.url);\n      sendResponse({ success: true });\n      return true;\n    }\n    \n    if (message.type === 'paperMetadata' && message.metadata) {\n      // Store metadata received from content script\n      handlePaperMetadata(message.metadata, sender.tab?.id);\n      sendResponse({ success: true });\n      return true;\n    }\n    \n    if (message.type === 'getCurrentPaper') {\n      logger.debug('Popup requested current paper', currentPaperData);\n      sendResponse(currentPaperData);\n      return true;\n    }\n    \n    if (message.type === 'updateRating') {\n      logger.debug('Rating update requested:', message.rating);\n      handleUpdateRating(message.rating, sendResponse);\n      return true; // Will respond asynchronously\n    }\n    \n    if (message.type === 'showAnnotationPopup') {\n      // This is now handled directly by the PopupManager\n      return false;\n    }\n    \n    if (message.type === 'popupAction') {\n      // This is now handled directly by the PopupManager\n      return false;\n    }\n    \n    return false;\n  });\n}\n\n// Handle paper metadata from content script\nasync function handlePaperMetadata(metadata: any, tabId?: number) {\n  logger.info(`Received metadata for ${metadata.sourceId}:${metadata.paperId}`);\n  \n  try {\n    // Store current paper data\n    currentPaperData = metadata;\n    \n    // Store in GitHub if we have a paper manager\n    if (paperManager) {\n      await paperManager.getOrCreatePaper(metadata);\n      logger.debug('Paper metadata stored in GitHub');\n    }\n    \n    // Start tracking session\n    if (sessionTracker) {\n      sessionTracker.startSession(metadata.sourceId, metadata.paperId);\n      logger.debug('Started tracking session');\n    }\n  } catch (error) {\n    logger.error('Error handling paper metadata', error);\n  }\n}\n\n// Handle rating update\nasync function handleUpdateRating(rating: string, sendResponse: (response: any) => void) {\n  if (!paperManager) {\n    sendResponse({ success: false, error: 'Paper manager not initialized' });\n    return;\n  }\n\n  if (!currentPaperData) {\n    sendResponse({ success: false, error: 'No current paper' });\n    return;\n  }\n\n  try {\n    await paperManager.updateRating(\n      currentPaperData.sourceId,\n      currentPaperData.paperId, \n      rating\n    );\n    currentPaperData.rating = rating;\n    sendResponse({ success: true });\n  } catch (error) {\n    logger.error('Error updating rating:', error);\n    sendResponse({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });\n  }\n}\n\n// Listen for credential changes\nchrome.storage.onChanged.addListener(async (changes) => {\n  logger.debug('Storage changes detected', Object.keys(changes));\n  \n  if (changes.githubToken) {\n    githubToken = changes.githubToken.newValue;\n  }\n  if (changes.githubRepo) {\n    githubRepo = changes.githubRepo.newValue;\n  }\n  if (changes.sessionConfig) {\n    sessionConfig = getConfigurationInMs(changes.sessionConfig.newValue);\n    logger.info('Session configuration updated', sessionConfig);\n    \n    // Update session tracker with new config\n    if (sessionTracker && sessionConfig) {\n      sessionTracker = new SessionTracker(sessionConfig);\n    }\n  }\n  \n  // Reinitialize paper manager if credentials changed\n  if (changes.githubToken || changes.githubRepo) {\n    if (githubToken && githubRepo) {\n      const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n      paperManager = new PaperManager(githubClient);\n      logger.info('Paper manager reinitialized');\n    }\n  }\n});\n\n// Tab and window management\nchrome.tabs.onActivated.addListener(async (activeInfo) => {\n  const tab = await chrome.tabs.get(activeInfo.tabId);\n  handleTabChange(tab);\n});\n\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete') {\n    handleTabChange(tab);\n  }\n});\n\nchrome.windows.onFocusChanged.addListener((windowId) => {\n  if (windowId === chrome.windows.WINDOW_ID_NONE) {\n    // Window lost focus, end current session\n    endCurrentSession();\n  }\n});\n\nasync function handleTabChange(tab: chrome.tabs.Tab) {\n  if (!tab.url || !sessionTracker || !sourceManager) {\n    return;\n  }\n  \n  // Check if URL matches any registered source\n  const source = sourceManager.getSourceForUrl(tab.url);\n  \n  if (!source) {\n    logger.debug('No supported paper source detected, ending session');\n    await endCurrentSession();\n    return;\n  }\n  \n  // Extract paper ID\n  const extractedInfo = sourceManager.extractPaperId(tab.url);\n  \n  if (!extractedInfo) {\n    logger.debug('No paper ID found in URL, ending session');\n    await endCurrentSession();\n    return;\n  }\n  \n  // Get current session info\n  const currentPaper = sessionTracker.getCurrentPaper();\n  \n  // End session if different paper\n  if (currentPaper.sourceId && currentPaper.paperId && \n      (currentPaper.sourceId !== extractedInfo.sourceId || \n       currentPaper.paperId !== extractedInfo.paperId)) {\n    logger.debug('Different paper detected, ending existing session');\n    await endCurrentSession();\n  }\n  \n  // Note: We don't start a new session here as we'll wait for the content script\n  // to send us the metadata first\n}\n\nasync function endCurrentSession() {\n  if (!sessionTracker) {\n    return;\n  }\n  \n  // Get current paper info\n  const currentPaper = sessionTracker.getCurrentPaper();\n  \n  if (currentPaper.sourceId && currentPaper.paperId && paperManager) {\n    logger.info('Ending session for paper', { \n      source: currentPaper.sourceId,\n      paperId: currentPaper.paperId\n    });\n    \n    // End session and get data\n    const sessionData = sessionTracker.endSession();\n    \n    if (sessionData && currentPaperData) {\n      logger.debug('Creating reading event', sessionData);\n      \n      // Store reading session\n      await paperManager.logReadingSession(\n        currentPaper.sourceId,\n        currentPaper.paperId,\n        sessionData,\n        currentPaperData\n      );\n    }\n    \n    // Clear current paper data\n    currentPaperData = null;\n  }\n}\n\n// Initialize debug objects in service worker scope\nfunction initializeDebugObjects() {\n  // @ts-ignore\n  globalThis.__DEBUG__ = {\n    get paperManager() { return paperManager; },\n    get sessionTracker() { return sessionTracker; },\n    get popupManager() { return popupManager; },\n    get sourceManager() { return sourceManager; },\n    getGithubClient: () => paperManager ? paperManager.getClient() : null,\n    getCurrentPaper: () => currentPaperData,\n    getSessionConfig: () => sessionConfig,\n    getSessionMetadata: () => sessionTracker?.getCurrentSessionMetadata(),\n    getSources: () => sourceManager?.getAllSources()\n  };\n\n  logger.info('Debug objects registered');\n}\n\n// Initialize extension\ninitialize();\n"],"names":["logger","GitHubStoreClient"],"mappings":"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","x_google_ignoreList":[0]}