{"version":3,"file":"options.bundle.js","sources":["../options.ts"],"sourcesContent":["// options.ts\nimport { loadSessionConfig, DEFAULT_CONFIG, saveSessionConfig } from './config/session';\nimport { RawSessionConfig } from './config/types';\n\n// Helper to set form values\nfunction setFormValues(settings: {\n  githubRepo?: string;\n  githubToken?: string;\n  sessionConfig?: RawSessionConfig;\n}): void {\n  // GitHub settings\n  if (settings.githubRepo) {\n    (document.getElementById('repo') as HTMLInputElement).value = settings.githubRepo;\n  }\n  if (settings.githubToken) {\n    // Don't show the actual token, just indicate it's set\n    (document.getElementById('token') as HTMLInputElement).placeholder = '••••••••••••••••••••••';\n  }\n\n  // Session settings\n  (document.getElementById('idleThreshold') as HTMLInputElement).value = \n    String(settings.sessionConfig?.idleThresholdMinutes ?? DEFAULT_CONFIG.idleThresholdMinutes);\n    \n  (document.getElementById('minDuration') as HTMLInputElement).value = \n    String(settings.sessionConfig?.minSessionDurationSeconds ?? DEFAULT_CONFIG.minSessionDurationSeconds);\n    \n  (document.getElementById('requireContinuous') as HTMLInputElement).checked = \n    settings.sessionConfig?.requireContinuousActivity ?? DEFAULT_CONFIG.requireContinuousActivity;\n    \n  (document.getElementById('logPartial') as HTMLInputElement).checked = \n    settings.sessionConfig?.logPartialSessions ?? DEFAULT_CONFIG.logPartialSessions;\n}\n\n// Helper to get form values\nfunction getFormValues(): {\n  githubRepo: string;\n  githubToken: string;\n  sessionConfig: RawSessionConfig;\n} {\n  return {\n    githubRepo: (document.getElementById('repo') as HTMLInputElement).value.trim(),\n    githubToken: (document.getElementById('token') as HTMLInputElement).value.trim(),\n    sessionConfig: {\n      idleThresholdMinutes: Number((document.getElementById('idleThreshold') as HTMLInputElement).value),\n      minSessionDurationSeconds: Number((document.getElementById('minDuration') as HTMLInputElement).value),\n      requireContinuousActivity: (document.getElementById('requireContinuous') as HTMLInputElement).checked,\n      logPartialSessions: (document.getElementById('logPartial') as HTMLInputElement).checked,\n      activityUpdateIntervalSeconds: DEFAULT_CONFIG.activityUpdateIntervalSeconds // Keep default\n    }\n  };\n}\n\n// Display status message\nfunction showStatus(message: string, isError = false): void {\n  const status = document.getElementById('status');\n  if (!status) return;\n  \n  status.textContent = message;\n  status.className = `status ${isError ? 'error' : 'success'}`;\n\n  // Clear status after 3 seconds if it's a success message\n  if (!isError) {\n    setTimeout(() => {\n      if (status) {\n        status.textContent = '';\n        status.className = 'status';\n      }\n    }, 3000);\n  }\n}\n\n// Validate settings before saving\nasync function validateSettings(settings: {\n  githubRepo: string;\n  githubToken: string;\n  sessionConfig: RawSessionConfig;\n}): Promise<void> {\n  // Validate repository format\n  if (!/^[\\w-]+\\/[\\w-]+$/.test(settings.githubRepo)) {\n    throw new Error('Invalid repository format. Use username/repository');\n  }\n\n  // Validate the token by making a test API call\n  const response = await fetch(`https://api.github.com/repos/${settings.githubRepo}`, {\n    headers: {\n      'Authorization': `token ${settings.githubToken}`,\n      'Accept': 'application/vnd.github.v3+json'\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error('Invalid token or repository. Please check your credentials.');\n  }\n\n  // Validate session settings\n  const { sessionConfig } = settings;\n  if (sessionConfig.idleThresholdMinutes < 1 || sessionConfig.idleThresholdMinutes > 60) {\n    throw new Error('Idle threshold must be between 1 and 60 minutes');\n  }\n  if (sessionConfig.minSessionDurationSeconds < 1 || sessionConfig.minSessionDurationSeconds > 300) {\n    throw new Error('Minimum session duration must be between 10 and 300 seconds');\n  }\n}\n\n// Save settings\nasync function saveSettings(settings: {\n  githubRepo: string;\n  githubToken: string;\n  sessionConfig: RawSessionConfig;\n}): Promise<void> {\n  await chrome.storage.sync.set({\n    githubRepo: settings.githubRepo,\n    githubToken: settings.githubToken\n  });\n\n  await saveSessionConfig(settings.sessionConfig);\n}\n\n// Initialize options page\ndocument.addEventListener('DOMContentLoaded', async () => {\n  try {\n    // Load current settings\n    const [storageItems, sessionConfig] = await Promise.all([\n      chrome.storage.sync.get(['githubRepo', 'githubToken']),\n      loadSessionConfig()\n    ]);\n\n    // Combine settings and display them\n    setFormValues({\n      ...(storageItems as {\n        githubRepo?: string;\n        githubToken?: string;\n      }),\n      sessionConfig\n    });\n\n    // Add save button handler\n    const saveButton = document.getElementById('save');\n    if (saveButton) {\n      saveButton.addEventListener('click', async () => {\n        try {\n          const settings = getFormValues();\n          await validateSettings(settings);\n          await saveSettings(settings);\n          showStatus('Settings saved successfully!');\n        } catch (error) {\n          showStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`, true);\n        }\n      });\n    }\n\n  } catch (error) {\n    showStatus(`Error loading settings: ${error instanceof Error ? error.message : 'Unknown error'}`, true);\n  }\n});\n"],"names":[],"mappings":"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"}